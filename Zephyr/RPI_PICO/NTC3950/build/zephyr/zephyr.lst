
zephyr.elf:     file format elf32-littlearm


Disassembly of section .boot2:

10000000 <.boot2>:
10000000:	4b32b500 	.word	0x4b32b500
10000004:	60582021 	.word	0x60582021
10000008:	21026898 	.word	0x21026898
1000000c:	60984388 	.word	0x60984388
10000010:	611860d8 	.word	0x611860d8
10000014:	4b2e6158 	.word	0x4b2e6158
10000018:	60992100 	.word	0x60992100
1000001c:	61592104 	.word	0x61592104
10000020:	22f02101 	.word	0x22f02101
10000024:	492b5099 	.word	0x492b5099
10000028:	21016019 	.word	0x21016019
1000002c:	20356099 	.word	0x20356099
10000030:	f844f000 	.word	0xf844f000
10000034:	42902202 	.word	0x42902202
10000038:	2106d014 	.word	0x2106d014
1000003c:	f0006619 	.word	0xf0006619
10000040:	6e19f834 	.word	0x6e19f834
10000044:	66192101 	.word	0x66192101
10000048:	66182000 	.word	0x66182000
1000004c:	f000661a 	.word	0xf000661a
10000050:	6e19f82c 	.word	0x6e19f82c
10000054:	6e196e19 	.word	0x6e196e19
10000058:	f0002005 	.word	0xf0002005
1000005c:	2101f82f 	.word	0x2101f82f
10000060:	d1f94208 	.word	0xd1f94208
10000064:	60992100 	.word	0x60992100
10000068:	6019491b 	.word	0x6019491b
1000006c:	60592100 	.word	0x60592100
10000070:	481b491a 	.word	0x481b491a
10000074:	21016001 	.word	0x21016001
10000078:	21eb6099 	.word	0x21eb6099
1000007c:	21a06619 	.word	0x21a06619
10000080:	f0006619 	.word	0xf0006619
10000084:	2100f812 	.word	0x2100f812
10000088:	49166099 	.word	0x49166099
1000008c:	60014814 	.word	0x60014814
10000090:	60992101 	.word	0x60992101
10000094:	2800bc01 	.word	0x2800bc01
10000098:	4700d000 	.word	0x4700d000
1000009c:	49134812 	.word	0x49134812
100000a0:	c8036008 	.word	0xc8036008
100000a4:	8808f380 	.word	0x8808f380
100000a8:	b5034708 	.word	0xb5034708
100000ac:	20046a99 	.word	0x20046a99
100000b0:	d0fb4201 	.word	0xd0fb4201
100000b4:	42012001 	.word	0x42012001
100000b8:	bd03d1f8 	.word	0xbd03d1f8
100000bc:	6618b502 	.word	0x6618b502
100000c0:	f7ff6618 	.word	0xf7ff6618
100000c4:	6e18fff2 	.word	0x6e18fff2
100000c8:	bd026e18 	.word	0xbd026e18
100000cc:	40020000 	.word	0x40020000
100000d0:	18000000 	.word	0x18000000
100000d4:	00070000 	.word	0x00070000
100000d8:	005f0300 	.word	0x005f0300
100000dc:	00002221 	.word	0x00002221
100000e0:	180000f4 	.word	0x180000f4
100000e4:	a0002022 	.word	0xa0002022
100000e8:	10000100 	.word	0x10000100
100000ec:	e000ed08 	.word	0xe000ed08
	...
100000fc:	d58f0b07 	.word	0xd58f0b07

Disassembly of section rom_start:

10000100 <_vector_table>:
10000100:	20001068 10001cb9 10003eb1 10001c75     h.. .....>..u...
	...
1000012c:	10001ab1 00000000 00000000 10001a51     ............Q...
1000013c:	10002381                                .#..

10000140 <_irq_vector_table>:
10000140:	10001b21 10001b21 10001b21 10001b21     !...!...!...!...
10000150:	10001b21 10001b21 10001b21 10001b21     !...!...!...!...
10000160:	10001b21 10001b21 10001b21 10001b21     !...!...!...!...
10000170:	10001b21 10001b21 10001b21 10001b21     !...!...!...!...
10000180:	10001b21 10001b21 10001b21 10001b21     !...!...!...!...
10000190:	10001b21 10001b21 10001b21 10001b21     !...!...!...!...
100001a0:	10001b21 10001b21                       !...!...

Disassembly of section text:

100001a8 <__gnu_thumb1_case_uqi>:
100001a8:	b402      	push	{r1}
100001aa:	4671      	mov	r1, lr
100001ac:	0849      	lsrs	r1, r1, #1
100001ae:	0049      	lsls	r1, r1, #1
100001b0:	5c09      	ldrb	r1, [r1, r0]
100001b2:	0049      	lsls	r1, r1, #1
100001b4:	448e      	add	lr, r1
100001b6:	bc02      	pop	{r1}
100001b8:	4770      	bx	lr
100001ba:	46c0      	nop			; (mov r8, r8)

100001bc <__gnu_thumb1_case_shi>:
100001bc:	b403      	push	{r0, r1}
100001be:	4671      	mov	r1, lr
100001c0:	0849      	lsrs	r1, r1, #1
100001c2:	0040      	lsls	r0, r0, #1
100001c4:	0049      	lsls	r1, r1, #1
100001c6:	5e09      	ldrsh	r1, [r1, r0]
100001c8:	0049      	lsls	r1, r1, #1
100001ca:	448e      	add	lr, r1
100001cc:	bc03      	pop	{r0, r1}
100001ce:	4770      	bx	lr

100001d0 <__udivsi3>:
100001d0:	2900      	cmp	r1, #0
100001d2:	d034      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>

100001d4 <.udivsi3_skip_div0_test>:
100001d4:	2301      	movs	r3, #1
100001d6:	2200      	movs	r2, #0
100001d8:	b410      	push	{r4}
100001da:	4288      	cmp	r0, r1
100001dc:	d32c      	bcc.n	10000238 <.udivsi3_skip_div0_test+0x64>
100001de:	2401      	movs	r4, #1
100001e0:	0724      	lsls	r4, r4, #28
100001e2:	42a1      	cmp	r1, r4
100001e4:	d204      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001e6:	4281      	cmp	r1, r0
100001e8:	d202      	bcs.n	100001f0 <.udivsi3_skip_div0_test+0x1c>
100001ea:	0109      	lsls	r1, r1, #4
100001ec:	011b      	lsls	r3, r3, #4
100001ee:	e7f8      	b.n	100001e2 <.udivsi3_skip_div0_test+0xe>
100001f0:	00e4      	lsls	r4, r4, #3
100001f2:	42a1      	cmp	r1, r4
100001f4:	d204      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001f6:	4281      	cmp	r1, r0
100001f8:	d202      	bcs.n	10000200 <.udivsi3_skip_div0_test+0x2c>
100001fa:	0049      	lsls	r1, r1, #1
100001fc:	005b      	lsls	r3, r3, #1
100001fe:	e7f8      	b.n	100001f2 <.udivsi3_skip_div0_test+0x1e>
10000200:	4288      	cmp	r0, r1
10000202:	d301      	bcc.n	10000208 <.udivsi3_skip_div0_test+0x34>
10000204:	1a40      	subs	r0, r0, r1
10000206:	431a      	orrs	r2, r3
10000208:	084c      	lsrs	r4, r1, #1
1000020a:	42a0      	cmp	r0, r4
1000020c:	d302      	bcc.n	10000214 <.udivsi3_skip_div0_test+0x40>
1000020e:	1b00      	subs	r0, r0, r4
10000210:	085c      	lsrs	r4, r3, #1
10000212:	4322      	orrs	r2, r4
10000214:	088c      	lsrs	r4, r1, #2
10000216:	42a0      	cmp	r0, r4
10000218:	d302      	bcc.n	10000220 <.udivsi3_skip_div0_test+0x4c>
1000021a:	1b00      	subs	r0, r0, r4
1000021c:	089c      	lsrs	r4, r3, #2
1000021e:	4322      	orrs	r2, r4
10000220:	08cc      	lsrs	r4, r1, #3
10000222:	42a0      	cmp	r0, r4
10000224:	d302      	bcc.n	1000022c <.udivsi3_skip_div0_test+0x58>
10000226:	1b00      	subs	r0, r0, r4
10000228:	08dc      	lsrs	r4, r3, #3
1000022a:	4322      	orrs	r2, r4
1000022c:	2800      	cmp	r0, #0
1000022e:	d003      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000230:	091b      	lsrs	r3, r3, #4
10000232:	d001      	beq.n	10000238 <.udivsi3_skip_div0_test+0x64>
10000234:	0909      	lsrs	r1, r1, #4
10000236:	e7e3      	b.n	10000200 <.udivsi3_skip_div0_test+0x2c>
10000238:	0010      	movs	r0, r2
1000023a:	bc10      	pop	{r4}
1000023c:	4770      	bx	lr
1000023e:	b501      	push	{r0, lr}
10000240:	2000      	movs	r0, #0
10000242:	f000 f85f 	bl	10000304 <__aeabi_idiv0>
10000246:	bd02      	pop	{r1, pc}

10000248 <__aeabi_uidivmod>:
10000248:	2900      	cmp	r1, #0
1000024a:	d0f8      	beq.n	1000023e <.udivsi3_skip_div0_test+0x6a>
1000024c:	b503      	push	{r0, r1, lr}
1000024e:	f7ff ffc1 	bl	100001d4 <.udivsi3_skip_div0_test>
10000252:	bc0e      	pop	{r1, r2, r3}
10000254:	4342      	muls	r2, r0
10000256:	1a89      	subs	r1, r1, r2
10000258:	4718      	bx	r3
1000025a:	46c0      	nop			; (mov r8, r8)

1000025c <__divsi3>:
1000025c:	2900      	cmp	r1, #0
1000025e:	d041      	beq.n	100002e4 <.divsi3_skip_div0_test+0x84>

10000260 <.divsi3_skip_div0_test>:
10000260:	b410      	push	{r4}
10000262:	0004      	movs	r4, r0
10000264:	404c      	eors	r4, r1
10000266:	46a4      	mov	ip, r4
10000268:	2301      	movs	r3, #1
1000026a:	2200      	movs	r2, #0
1000026c:	2900      	cmp	r1, #0
1000026e:	d500      	bpl.n	10000272 <.divsi3_skip_div0_test+0x12>
10000270:	4249      	negs	r1, r1
10000272:	2800      	cmp	r0, #0
10000274:	d500      	bpl.n	10000278 <.divsi3_skip_div0_test+0x18>
10000276:	4240      	negs	r0, r0
10000278:	4288      	cmp	r0, r1
1000027a:	d32c      	bcc.n	100002d6 <.divsi3_skip_div0_test+0x76>
1000027c:	2401      	movs	r4, #1
1000027e:	0724      	lsls	r4, r4, #28
10000280:	42a1      	cmp	r1, r4
10000282:	d204      	bcs.n	1000028e <.divsi3_skip_div0_test+0x2e>
10000284:	4281      	cmp	r1, r0
10000286:	d202      	bcs.n	1000028e <.divsi3_skip_div0_test+0x2e>
10000288:	0109      	lsls	r1, r1, #4
1000028a:	011b      	lsls	r3, r3, #4
1000028c:	e7f8      	b.n	10000280 <.divsi3_skip_div0_test+0x20>
1000028e:	00e4      	lsls	r4, r4, #3
10000290:	42a1      	cmp	r1, r4
10000292:	d204      	bcs.n	1000029e <.divsi3_skip_div0_test+0x3e>
10000294:	4281      	cmp	r1, r0
10000296:	d202      	bcs.n	1000029e <.divsi3_skip_div0_test+0x3e>
10000298:	0049      	lsls	r1, r1, #1
1000029a:	005b      	lsls	r3, r3, #1
1000029c:	e7f8      	b.n	10000290 <.divsi3_skip_div0_test+0x30>
1000029e:	4288      	cmp	r0, r1
100002a0:	d301      	bcc.n	100002a6 <.divsi3_skip_div0_test+0x46>
100002a2:	1a40      	subs	r0, r0, r1
100002a4:	431a      	orrs	r2, r3
100002a6:	084c      	lsrs	r4, r1, #1
100002a8:	42a0      	cmp	r0, r4
100002aa:	d302      	bcc.n	100002b2 <.divsi3_skip_div0_test+0x52>
100002ac:	1b00      	subs	r0, r0, r4
100002ae:	085c      	lsrs	r4, r3, #1
100002b0:	4322      	orrs	r2, r4
100002b2:	088c      	lsrs	r4, r1, #2
100002b4:	42a0      	cmp	r0, r4
100002b6:	d302      	bcc.n	100002be <.divsi3_skip_div0_test+0x5e>
100002b8:	1b00      	subs	r0, r0, r4
100002ba:	089c      	lsrs	r4, r3, #2
100002bc:	4322      	orrs	r2, r4
100002be:	08cc      	lsrs	r4, r1, #3
100002c0:	42a0      	cmp	r0, r4
100002c2:	d302      	bcc.n	100002ca <.divsi3_skip_div0_test+0x6a>
100002c4:	1b00      	subs	r0, r0, r4
100002c6:	08dc      	lsrs	r4, r3, #3
100002c8:	4322      	orrs	r2, r4
100002ca:	2800      	cmp	r0, #0
100002cc:	d003      	beq.n	100002d6 <.divsi3_skip_div0_test+0x76>
100002ce:	091b      	lsrs	r3, r3, #4
100002d0:	d001      	beq.n	100002d6 <.divsi3_skip_div0_test+0x76>
100002d2:	0909      	lsrs	r1, r1, #4
100002d4:	e7e3      	b.n	1000029e <.divsi3_skip_div0_test+0x3e>
100002d6:	0010      	movs	r0, r2
100002d8:	4664      	mov	r4, ip
100002da:	2c00      	cmp	r4, #0
100002dc:	d500      	bpl.n	100002e0 <.divsi3_skip_div0_test+0x80>
100002de:	4240      	negs	r0, r0
100002e0:	bc10      	pop	{r4}
100002e2:	4770      	bx	lr
100002e4:	b501      	push	{r0, lr}
100002e6:	2000      	movs	r0, #0
100002e8:	f000 f80c 	bl	10000304 <__aeabi_idiv0>
100002ec:	bd02      	pop	{r1, pc}
100002ee:	46c0      	nop			; (mov r8, r8)

100002f0 <__aeabi_idivmod>:
100002f0:	2900      	cmp	r1, #0
100002f2:	d0f7      	beq.n	100002e4 <.divsi3_skip_div0_test+0x84>
100002f4:	b503      	push	{r0, r1, lr}
100002f6:	f7ff ffb3 	bl	10000260 <.divsi3_skip_div0_test>
100002fa:	bc0e      	pop	{r1, r2, r3}
100002fc:	4342      	muls	r2, r0
100002fe:	1a89      	subs	r1, r1, r2
10000300:	4718      	bx	r3
10000302:	46c0      	nop			; (mov r8, r8)

10000304 <__aeabi_idiv0>:
10000304:	4770      	bx	lr
10000306:	46c0      	nop			; (mov r8, r8)

10000308 <__clzsi2>:
10000308:	211c      	movs	r1, #28
1000030a:	2301      	movs	r3, #1
1000030c:	041b      	lsls	r3, r3, #16
1000030e:	4298      	cmp	r0, r3
10000310:	d301      	bcc.n	10000316 <__clzsi2+0xe>
10000312:	0c00      	lsrs	r0, r0, #16
10000314:	3910      	subs	r1, #16
10000316:	0a1b      	lsrs	r3, r3, #8
10000318:	4298      	cmp	r0, r3
1000031a:	d301      	bcc.n	10000320 <__clzsi2+0x18>
1000031c:	0a00      	lsrs	r0, r0, #8
1000031e:	3908      	subs	r1, #8
10000320:	091b      	lsrs	r3, r3, #4
10000322:	4298      	cmp	r0, r3
10000324:	d301      	bcc.n	1000032a <__clzsi2+0x22>
10000326:	0900      	lsrs	r0, r0, #4
10000328:	3904      	subs	r1, #4
1000032a:	a202      	add	r2, pc, #8	; (adr r2, 10000334 <__clzsi2+0x2c>)
1000032c:	5c10      	ldrb	r0, [r2, r0]
1000032e:	1840      	adds	r0, r0, r1
10000330:	4770      	bx	lr
10000332:	46c0      	nop			; (mov r8, r8)
10000334:	02020304 	.word	0x02020304
10000338:	01010101 	.word	0x01010101
	...

10000344 <__ctzsi2>:
10000344:	4241      	negs	r1, r0
10000346:	4008      	ands	r0, r1
10000348:	211c      	movs	r1, #28
1000034a:	2301      	movs	r3, #1
1000034c:	041b      	lsls	r3, r3, #16
1000034e:	4298      	cmp	r0, r3
10000350:	d301      	bcc.n	10000356 <__ctzsi2+0x12>
10000352:	0c00      	lsrs	r0, r0, #16
10000354:	3910      	subs	r1, #16
10000356:	0a1b      	lsrs	r3, r3, #8
10000358:	4298      	cmp	r0, r3
1000035a:	d301      	bcc.n	10000360 <__ctzsi2+0x1c>
1000035c:	0a00      	lsrs	r0, r0, #8
1000035e:	3908      	subs	r1, #8
10000360:	091b      	lsrs	r3, r3, #4
10000362:	4298      	cmp	r0, r3
10000364:	d301      	bcc.n	1000036a <__ctzsi2+0x26>
10000366:	0900      	lsrs	r0, r0, #4
10000368:	3904      	subs	r1, #4
1000036a:	a202      	add	r2, pc, #8	; (adr r2, 10000374 <__ctzsi2+0x30>)
1000036c:	5c10      	ldrb	r0, [r2, r0]
1000036e:	1a40      	subs	r0, r0, r1
10000370:	4770      	bx	lr
10000372:	46c0      	nop			; (mov r8, r8)
10000374:	1d1d1c1b 	.word	0x1d1d1c1b
10000378:	1e1e1e1e 	.word	0x1e1e1e1e
1000037c:	1f1f1f1f 	.word	0x1f1f1f1f
10000380:	1f1f1f1f 	.word	0x1f1f1f1f

10000384 <__aeabi_uldivmod>:
10000384:	2b00      	cmp	r3, #0
10000386:	d111      	bne.n	100003ac <__aeabi_uldivmod+0x28>
10000388:	2a00      	cmp	r2, #0
1000038a:	d10f      	bne.n	100003ac <__aeabi_uldivmod+0x28>
1000038c:	2900      	cmp	r1, #0
1000038e:	d100      	bne.n	10000392 <__aeabi_uldivmod+0xe>
10000390:	2800      	cmp	r0, #0
10000392:	d002      	beq.n	1000039a <__aeabi_uldivmod+0x16>
10000394:	2100      	movs	r1, #0
10000396:	43c9      	mvns	r1, r1
10000398:	0008      	movs	r0, r1
1000039a:	b407      	push	{r0, r1, r2}
1000039c:	4802      	ldr	r0, [pc, #8]	; (100003a8 <__aeabi_uldivmod+0x24>)
1000039e:	a102      	add	r1, pc, #8	; (adr r1, 100003a8 <__aeabi_uldivmod+0x24>)
100003a0:	1840      	adds	r0, r0, r1
100003a2:	9002      	str	r0, [sp, #8]
100003a4:	bd03      	pop	{r0, r1, pc}
100003a6:	46c0      	nop			; (mov r8, r8)
100003a8:	ffffff5d 	.word	0xffffff5d
100003ac:	b403      	push	{r0, r1}
100003ae:	4668      	mov	r0, sp
100003b0:	b501      	push	{r0, lr}
100003b2:	9802      	ldr	r0, [sp, #8]
100003b4:	f000 f853 	bl	1000045e <__udivmoddi4>
100003b8:	9b01      	ldr	r3, [sp, #4]
100003ba:	469e      	mov	lr, r3
100003bc:	b002      	add	sp, #8
100003be:	bc0c      	pop	{r2, r3}
100003c0:	4770      	bx	lr
100003c2:	46c0      	nop			; (mov r8, r8)

100003c4 <__aeabi_llsr>:
100003c4:	40d0      	lsrs	r0, r2
100003c6:	000b      	movs	r3, r1
100003c8:	40d1      	lsrs	r1, r2
100003ca:	469c      	mov	ip, r3
100003cc:	3a20      	subs	r2, #32
100003ce:	40d3      	lsrs	r3, r2
100003d0:	4318      	orrs	r0, r3
100003d2:	4252      	negs	r2, r2
100003d4:	4663      	mov	r3, ip
100003d6:	4093      	lsls	r3, r2
100003d8:	4318      	orrs	r0, r3
100003da:	4770      	bx	lr

100003dc <__aeabi_llsl>:
100003dc:	4091      	lsls	r1, r2
100003de:	0003      	movs	r3, r0
100003e0:	4090      	lsls	r0, r2
100003e2:	469c      	mov	ip, r3
100003e4:	3a20      	subs	r2, #32
100003e6:	4093      	lsls	r3, r2
100003e8:	4319      	orrs	r1, r3
100003ea:	4252      	negs	r2, r2
100003ec:	4663      	mov	r3, ip
100003ee:	40d3      	lsrs	r3, r2
100003f0:	4319      	orrs	r1, r3
100003f2:	4770      	bx	lr

100003f4 <__clzdi2>:
100003f4:	b510      	push	{r4, lr}
100003f6:	2900      	cmp	r1, #0
100003f8:	d103      	bne.n	10000402 <__clzdi2+0xe>
100003fa:	f7ff ff85 	bl	10000308 <__clzsi2>
100003fe:	3020      	adds	r0, #32
10000400:	e002      	b.n	10000408 <__clzdi2+0x14>
10000402:	0008      	movs	r0, r1
10000404:	f7ff ff80 	bl	10000308 <__clzsi2>
10000408:	bd10      	pop	{r4, pc}
1000040a:	46c0      	nop			; (mov r8, r8)

1000040c <__aeabi_lmul>:
1000040c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000040e:	0c04      	lsrs	r4, r0, #16
10000410:	000d      	movs	r5, r1
10000412:	b291      	uxth	r1, r2
10000414:	000f      	movs	r7, r1
10000416:	4361      	muls	r1, r4
10000418:	468c      	mov	ip, r1
1000041a:	0006      	movs	r6, r0
1000041c:	9301      	str	r3, [sp, #4]
1000041e:	b283      	uxth	r3, r0
10000420:	0c10      	lsrs	r0, r2, #16
10000422:	435f      	muls	r7, r3
10000424:	4344      	muls	r4, r0
10000426:	4358      	muls	r0, r3
10000428:	0c3b      	lsrs	r3, r7, #16
1000042a:	4460      	add	r0, ip
1000042c:	181b      	adds	r3, r3, r0
1000042e:	4299      	cmp	r1, r3
10000430:	d902      	bls.n	10000438 <__aeabi_lmul+0x2c>
10000432:	2180      	movs	r1, #128	; 0x80
10000434:	0249      	lsls	r1, r1, #9
10000436:	1864      	adds	r4, r4, r1
10000438:	9901      	ldr	r1, [sp, #4]
1000043a:	4355      	muls	r5, r2
1000043c:	4371      	muls	r1, r6
1000043e:	0c18      	lsrs	r0, r3, #16
10000440:	1904      	adds	r4, r0, r4
10000442:	041b      	lsls	r3, r3, #16
10000444:	b2bf      	uxth	r7, r7
10000446:	1949      	adds	r1, r1, r5
10000448:	19d8      	adds	r0, r3, r7
1000044a:	1909      	adds	r1, r1, r4
1000044c:	b003      	add	sp, #12
1000044e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10000450 <__ffssi2>:
10000450:	b510      	push	{r4, lr}
10000452:	2800      	cmp	r0, #0
10000454:	d002      	beq.n	1000045c <__ffssi2+0xc>
10000456:	f7ff ff75 	bl	10000344 <__ctzsi2>
1000045a:	3001      	adds	r0, #1
1000045c:	bd10      	pop	{r4, pc}

1000045e <__udivmoddi4>:
1000045e:	b5f0      	push	{r4, r5, r6, r7, lr}
10000460:	0006      	movs	r6, r0
10000462:	000f      	movs	r7, r1
10000464:	0015      	movs	r5, r2
10000466:	001c      	movs	r4, r3
10000468:	b085      	sub	sp, #20
1000046a:	428b      	cmp	r3, r1
1000046c:	d863      	bhi.n	10000536 <__udivmoddi4+0xd8>
1000046e:	d101      	bne.n	10000474 <__udivmoddi4+0x16>
10000470:	4282      	cmp	r2, r0
10000472:	d860      	bhi.n	10000536 <__udivmoddi4+0xd8>
10000474:	0021      	movs	r1, r4
10000476:	0028      	movs	r0, r5
10000478:	f7ff ffbc 	bl	100003f4 <__clzdi2>
1000047c:	0039      	movs	r1, r7
1000047e:	9000      	str	r0, [sp, #0]
10000480:	0030      	movs	r0, r6
10000482:	f7ff ffb7 	bl	100003f4 <__clzdi2>
10000486:	9b00      	ldr	r3, [sp, #0]
10000488:	0021      	movs	r1, r4
1000048a:	1a1b      	subs	r3, r3, r0
1000048c:	001a      	movs	r2, r3
1000048e:	0028      	movs	r0, r5
10000490:	9303      	str	r3, [sp, #12]
10000492:	f7ff ffa3 	bl	100003dc <__aeabi_llsl>
10000496:	9000      	str	r0, [sp, #0]
10000498:	9101      	str	r1, [sp, #4]
1000049a:	42b9      	cmp	r1, r7
1000049c:	d845      	bhi.n	1000052a <__udivmoddi4+0xcc>
1000049e:	d101      	bne.n	100004a4 <__udivmoddi4+0x46>
100004a0:	42b0      	cmp	r0, r6
100004a2:	d842      	bhi.n	1000052a <__udivmoddi4+0xcc>
100004a4:	9b00      	ldr	r3, [sp, #0]
100004a6:	9c01      	ldr	r4, [sp, #4]
100004a8:	2001      	movs	r0, #1
100004aa:	2100      	movs	r1, #0
100004ac:	9a03      	ldr	r2, [sp, #12]
100004ae:	1af6      	subs	r6, r6, r3
100004b0:	41a7      	sbcs	r7, r4
100004b2:	f7ff ff93 	bl	100003dc <__aeabi_llsl>
100004b6:	0004      	movs	r4, r0
100004b8:	000d      	movs	r5, r1
100004ba:	9b03      	ldr	r3, [sp, #12]
100004bc:	2b00      	cmp	r3, #0
100004be:	d02b      	beq.n	10000518 <__udivmoddi4+0xba>
100004c0:	9b01      	ldr	r3, [sp, #4]
100004c2:	9a00      	ldr	r2, [sp, #0]
100004c4:	07db      	lsls	r3, r3, #31
100004c6:	0850      	lsrs	r0, r2, #1
100004c8:	4318      	orrs	r0, r3
100004ca:	9b01      	ldr	r3, [sp, #4]
100004cc:	0859      	lsrs	r1, r3, #1
100004ce:	9b03      	ldr	r3, [sp, #12]
100004d0:	469c      	mov	ip, r3
100004d2:	42b9      	cmp	r1, r7
100004d4:	d82c      	bhi.n	10000530 <__udivmoddi4+0xd2>
100004d6:	d101      	bne.n	100004dc <__udivmoddi4+0x7e>
100004d8:	42b0      	cmp	r0, r6
100004da:	d829      	bhi.n	10000530 <__udivmoddi4+0xd2>
100004dc:	0032      	movs	r2, r6
100004de:	003b      	movs	r3, r7
100004e0:	1a12      	subs	r2, r2, r0
100004e2:	418b      	sbcs	r3, r1
100004e4:	2601      	movs	r6, #1
100004e6:	1892      	adds	r2, r2, r2
100004e8:	415b      	adcs	r3, r3
100004ea:	2700      	movs	r7, #0
100004ec:	18b6      	adds	r6, r6, r2
100004ee:	415f      	adcs	r7, r3
100004f0:	2301      	movs	r3, #1
100004f2:	425b      	negs	r3, r3
100004f4:	449c      	add	ip, r3
100004f6:	4663      	mov	r3, ip
100004f8:	2b00      	cmp	r3, #0
100004fa:	d1ea      	bne.n	100004d2 <__udivmoddi4+0x74>
100004fc:	0030      	movs	r0, r6
100004fe:	0039      	movs	r1, r7
10000500:	9a03      	ldr	r2, [sp, #12]
10000502:	f7ff ff5f 	bl	100003c4 <__aeabi_llsr>
10000506:	9a03      	ldr	r2, [sp, #12]
10000508:	19a4      	adds	r4, r4, r6
1000050a:	417d      	adcs	r5, r7
1000050c:	0006      	movs	r6, r0
1000050e:	000f      	movs	r7, r1
10000510:	f7ff ff64 	bl	100003dc <__aeabi_llsl>
10000514:	1a24      	subs	r4, r4, r0
10000516:	418d      	sbcs	r5, r1
10000518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000051a:	2b00      	cmp	r3, #0
1000051c:	d001      	beq.n	10000522 <__udivmoddi4+0xc4>
1000051e:	601e      	str	r6, [r3, #0]
10000520:	605f      	str	r7, [r3, #4]
10000522:	0020      	movs	r0, r4
10000524:	0029      	movs	r1, r5
10000526:	b005      	add	sp, #20
10000528:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000052a:	2400      	movs	r4, #0
1000052c:	2500      	movs	r5, #0
1000052e:	e7c4      	b.n	100004ba <__udivmoddi4+0x5c>
10000530:	19b6      	adds	r6, r6, r6
10000532:	417f      	adcs	r7, r7
10000534:	e7dc      	b.n	100004f0 <__udivmoddi4+0x92>
10000536:	2400      	movs	r4, #0
10000538:	2500      	movs	r5, #0
1000053a:	e7ed      	b.n	10000518 <__udivmoddi4+0xba>

1000053c <GetResistenceNTC>:
		}
		k_sleep(K_MSEC(1000));
	}
}

long GetResistenceNTC(uint32_t adcIn){ 
1000053c:	0003      	movs	r3, r0
1000053e:	b510      	push	{r4, lr}
    //long resistanceNTC = (adcIn * R2) / (1256 - adcIn);
    //long logNTC = ilog2(resistanceNTC); 
    //long temp = 1 / (A + (B * logNTC) + (C * logNTC * logNTC * logNTC)); 
    //temp = temp - KELVINCONSTANT;
	long resistanceNTC = (adcIn * R2) / (1234 - adcIn);
10000540:	4a03      	ldr	r2, [pc, #12]	; (10000550 <GetResistenceNTC+0x14>)
10000542:	4904      	ldr	r1, [pc, #16]	; (10000554 <GetResistenceNTC+0x18>)
10000544:	6810      	ldr	r0, [r2, #0]
10000546:	1ac9      	subs	r1, r1, r3
10000548:	4358      	muls	r0, r3
1000054a:	f7ff fe41 	bl	100001d0 <__udivsi3>
	//long logNTC = log(resistanceNTC); 

    return resistanceNTC; 
}
1000054e:	bd10      	pop	{r4, pc}
10000550:	200000b8 	.word	0x200000b8
10000554:	000004d2 	.word	0x000004d2

10000558 <AdcToCelsius>:

int AdcToCelsius(long resistanceNTC){
	int temp; 
	if (resistanceNTC <= 321240 && resistanceNTC >= 227764)
10000558:	4a23      	ldr	r2, [pc, #140]	; (100005e8 <AdcToCelsius+0x90>)
int AdcToCelsius(long resistanceNTC){
1000055a:	0003      	movs	r3, r0
	if (resistanceNTC <= 321240 && resistanceNTC >= 227764)
1000055c:	1881      	adds	r1, r0, r2
1000055e:	4a23      	ldr	r2, [pc, #140]	; (100005ec <AdcToCelsius+0x94>)
	{
		temp = 5; 
10000560:	2005      	movs	r0, #5
	if (resistanceNTC <= 321240 && resistanceNTC >= 227764)
10000562:	4291      	cmp	r1, r2
10000564:	d93f      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 227764&& resistanceNTC >= 179724)
10000566:	4a22      	ldr	r2, [pc, #136]	; (100005f0 <AdcToCelsius+0x98>)
10000568:	4922      	ldr	r1, [pc, #136]	; (100005f4 <AdcToCelsius+0x9c>)
1000056a:	189a      	adds	r2, r3, r2
	{
		temp = 10; 
1000056c:	1800      	adds	r0, r0, r0
	}else if (resistanceNTC < 227764&& resistanceNTC >= 179724)
1000056e:	428a      	cmp	r2, r1
10000570:	d939      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 179724 && resistanceNTC >= 142748)
10000572:	4a21      	ldr	r2, [pc, #132]	; (100005f8 <AdcToCelsius+0xa0>)
10000574:	4921      	ldr	r1, [pc, #132]	; (100005fc <AdcToCelsius+0xa4>)
10000576:	189a      	adds	r2, r3, r2
	{
		temp = 15; 
10000578:	3005      	adds	r0, #5
	}else if (resistanceNTC < 179724 && resistanceNTC >= 142748)
1000057a:	428a      	cmp	r2, r1
1000057c:	d933      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 142748 && resistanceNTC >= 109152)
1000057e:	4a20      	ldr	r2, [pc, #128]	; (10000600 <AdcToCelsius+0xa8>)
10000580:	4920      	ldr	r1, [pc, #128]	; (10000604 <AdcToCelsius+0xac>)
10000582:	189a      	adds	r2, r3, r2
	{
		temp = 20;
10000584:	3005      	adds	r0, #5
	}else if (resistanceNTC < 142748 && resistanceNTC >= 109152)
10000586:	428a      	cmp	r2, r1
10000588:	d92d      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 109152 && resistanceNTC >= 91697)
1000058a:	4a1f      	ldr	r2, [pc, #124]	; (10000608 <AdcToCelsius+0xb0>)
1000058c:	491f      	ldr	r1, [pc, #124]	; (1000060c <AdcToCelsius+0xb4>)
1000058e:	189a      	adds	r2, r3, r2
	{
		temp = 25;
10000590:	3005      	adds	r0, #5
	}else if (resistanceNTC < 109152 && resistanceNTC >= 91697)
10000592:	428a      	cmp	r2, r1
10000594:	d927      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 91697 && resistanceNTC >= 74115)
10000596:	4a1e      	ldr	r2, [pc, #120]	; (10000610 <AdcToCelsius+0xb8>)
10000598:	491e      	ldr	r1, [pc, #120]	; (10000614 <AdcToCelsius+0xbc>)
1000059a:	189a      	adds	r2, r3, r2
	{
		temp = 30;
1000059c:	3005      	adds	r0, #5
	}else if (resistanceNTC < 91697 && resistanceNTC >= 74115)
1000059e:	428a      	cmp	r2, r1
100005a0:	d921      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 74115 && resistanceNTC >= 60222)
100005a2:	4a1d      	ldr	r2, [pc, #116]	; (10000618 <AdcToCelsius+0xc0>)
100005a4:	491d      	ldr	r1, [pc, #116]	; (1000061c <AdcToCelsius+0xc4>)
100005a6:	189a      	adds	r2, r3, r2
	{
		temp = 35;
100005a8:	3005      	adds	r0, #5
	}else if (resistanceNTC < 74115 && resistanceNTC >= 60222)
100005aa:	428a      	cmp	r2, r1
100005ac:	d91b      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 60222 && resistanceNTC >= 49183)
100005ae:	4a1c      	ldr	r2, [pc, #112]	; (10000620 <AdcToCelsius+0xc8>)
100005b0:	491c      	ldr	r1, [pc, #112]	; (10000624 <AdcToCelsius+0xcc>)
100005b2:	189a      	adds	r2, r3, r2
	{
		temp = 40;
100005b4:	3005      	adds	r0, #5
	}else if (resistanceNTC < 60222 && resistanceNTC >= 49183)
100005b6:	428a      	cmp	r2, r1
100005b8:	d915      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 49183 && resistanceNTC >= 40364)
100005ba:	4a1b      	ldr	r2, [pc, #108]	; (10000628 <AdcToCelsius+0xd0>)
100005bc:	491b      	ldr	r1, [pc, #108]	; (1000062c <AdcToCelsius+0xd4>)
100005be:	189a      	adds	r2, r3, r2
	{
		temp = 45;
100005c0:	3005      	adds	r0, #5
	}else if (resistanceNTC < 49183 && resistanceNTC >= 40364)
100005c2:	428a      	cmp	r2, r1
100005c4:	d90f      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 40364 && resistanceNTC >= 33284)
100005c6:	4a1a      	ldr	r2, [pc, #104]	; (10000630 <AdcToCelsius+0xd8>)
100005c8:	491a      	ldr	r1, [pc, #104]	; (10000634 <AdcToCelsius+0xdc>)
100005ca:	189a      	adds	r2, r3, r2
	{
		temp = 50;
100005cc:	3005      	adds	r0, #5
	}else if (resistanceNTC < 40364 && resistanceNTC >= 33284)
100005ce:	428a      	cmp	r2, r1
100005d0:	d909      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 33284 && resistanceNTC >= 27573)
100005d2:	4a19      	ldr	r2, [pc, #100]	; (10000638 <AdcToCelsius+0xe0>)
100005d4:	4919      	ldr	r1, [pc, #100]	; (1000063c <AdcToCelsius+0xe4>)
100005d6:	189a      	adds	r2, r3, r2
	{
		temp = 55;
100005d8:	3005      	adds	r0, #5
	}else if (resistanceNTC < 33284 && resistanceNTC >= 27573)
100005da:	428a      	cmp	r2, r1
100005dc:	d903      	bls.n	100005e6 <AdcToCelsius+0x8e>
	}else if (resistanceNTC < 27573)
100005de:	4a18      	ldr	r2, [pc, #96]	; (10000640 <AdcToCelsius+0xe8>)
100005e0:	4293      	cmp	r3, r2
100005e2:	dc00      	bgt.n	100005e6 <AdcToCelsius+0x8e>
	{
		temp = 60;
100005e4:	3005      	adds	r0, #5
	}
	
	return temp; 
}
100005e6:	4770      	bx	lr
100005e8:	fffc864c 	.word	0xfffc864c
100005ec:	00016d24 	.word	0x00016d24
100005f0:	fffd41f4 	.word	0xfffd41f4
100005f4:	0000bba7 	.word	0x0000bba7
100005f8:	fffdd264 	.word	0xfffdd264
100005fc:	0000906f 	.word	0x0000906f
10000600:	fffe55a0 	.word	0xfffe55a0
10000604:	0000833b 	.word	0x0000833b
10000608:	fffe99cf 	.word	0xfffe99cf
1000060c:	0000442e 	.word	0x0000442e
10000610:	fffede7d 	.word	0xfffede7d
10000614:	000044ad 	.word	0x000044ad
10000618:	ffff14c2 	.word	0xffff14c2
1000061c:	00003644 	.word	0x00003644
10000620:	ffff3fe1 	.word	0xffff3fe1
10000624:	00002b1e 	.word	0x00002b1e
10000628:	ffff6254 	.word	0xffff6254
1000062c:	00002272 	.word	0x00002272
10000630:	ffff7dfc 	.word	0xffff7dfc
10000634:	00001ba7 	.word	0x00001ba7
10000638:	ffff944b 	.word	0xffff944b
1000063c:	0000164e 	.word	0x0000164e
10000640:	00006bb4 	.word	0x00006bb4

10000644 <main>:
{
10000644:	b5f0      	push	{r4, r5, r6, r7, lr}
10000646:	b08b      	sub	sp, #44	; 0x2c
	struct adc_sequence sequence = {
10000648:	ac05      	add	r4, sp, #20
1000064a:	2214      	movs	r2, #20
1000064c:	2100      	movs	r1, #0
1000064e:	0020      	movs	r0, r4
10000650:	f003 fc5f 	bl	10003f12 <memset>
10000654:	ab02      	add	r3, sp, #8
10000656:	1d9f      	adds	r7, r3, #6
10000658:	2302      	movs	r3, #2
1000065a:	60a7      	str	r7, [r4, #8]
1000065c:	60e3      	str	r3, [r4, #12]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
1000065e:	4d2f      	ldr	r5, [pc, #188]	; (1000071c <main+0xd8>)
10000660:	0028      	movs	r0, r5
10000662:	f003 ff59 	bl	10004518 <z_device_is_ready>
		if (!device_is_ready(adc_channels[i].dev)) {
10000666:	2800      	cmp	r0, #0
10000668:	d043      	beq.n	100006f2 <main+0xae>
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
1000066a:	68ab      	ldr	r3, [r5, #8]
1000066c:	0028      	movs	r0, r5
1000066e:	492c      	ldr	r1, [pc, #176]	; (10000720 <main+0xdc>)
10000670:	681b      	ldr	r3, [r3, #0]
10000672:	4798      	blx	r3
10000674:	1e02      	subs	r2, r0, #0
		if (err < 0) {
10000676:	db41      	blt.n	100006fc <main+0xb8>
		printk("ADC reading:\n");
10000678:	482a      	ldr	r0, [pc, #168]	; (10000724 <main+0xe0>)
1000067a:	f003 fb0b 	bl	10003c94 <printk>
			printk("- %s, channel %d: ",
1000067e:	2200      	movs	r2, #0
10000680:	4829      	ldr	r0, [pc, #164]	; (10000728 <main+0xe4>)
10000682:	6829      	ldr	r1, [r5, #0]
10000684:	f003 fb06 	bl	10003c94 <printk>
{
	if (!spec->channel_cfg_dt_node_exists) {
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
10000688:	2301      	movs	r3, #1
1000068a:	6063      	str	r3, [r4, #4]
	seq->resolution = spec->resolution;
1000068c:	330b      	adds	r3, #11
1000068e:	8223      	strh	r3, [r4, #16]
	const struct adc_driver_api *api =
10000690:	68ab      	ldr	r3, [r5, #8]
	return api->read(dev, sequence);
10000692:	0021      	movs	r1, r4
	const struct adc_driver_api *api =
10000694:	9301      	str	r3, [sp, #4]
	return api->read(dev, sequence);
10000696:	0028      	movs	r0, r5
10000698:	685b      	ldr	r3, [r3, #4]
1000069a:	4798      	blx	r3
1000069c:	1e01      	subs	r1, r0, #0
				printk("Could not read (%d)\n", err);
1000069e:	4823      	ldr	r0, [pc, #140]	; (1000072c <main+0xe8>)
			if (err < 0) {
100006a0:	db24      	blt.n	100006ec <main+0xa8>
				printk("%"PRIu16, buf);
100006a2:	8839      	ldrh	r1, [r7, #0]
100006a4:	4822      	ldr	r0, [pc, #136]	; (10000730 <main+0xec>)
100006a6:	f003 faf5 	bl	10003c94 <printk>
			prueba = buf; 
100006aa:	8838      	ldrh	r0, [r7, #0]
			long resistance = GetResistenceNTC(prueba);
100006ac:	f7ff ff46 	bl	1000053c <GetResistenceNTC>
			long avgResistence = AverageResis(resistance);
100006b0:	f003 fab9 	bl	10003c26 <AverageResis>
100006b4:	0006      	movs	r6, r0
			printk(" = Resistencia NTC %ld", avgResistence);
100006b6:	481f      	ldr	r0, [pc, #124]	; (10000734 <main+0xf0>)
100006b8:	0031      	movs	r1, r6
100006ba:	f003 faeb 	bl	10003c94 <printk>
			int temp = AdcToCelsius(avgResistence); 
100006be:	0030      	movs	r0, r6
100006c0:	f7ff ff4a 	bl	10000558 <AdcToCelsius>
			printk(" = Temp %d", temp);
100006c4:	4b1c      	ldr	r3, [pc, #112]	; (10000738 <main+0xf4>)
			int temp = AdcToCelsius(avgResistence); 
100006c6:	0001      	movs	r1, r0
			printk(" = Temp %d", temp);
100006c8:	0018      	movs	r0, r3
100006ca:	f003 fae3 	bl	10003c94 <printk>
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
100006ce:	9b01      	ldr	r3, [sp, #4]
			val_mv = buf;
100006d0:	883e      	ldrh	r6, [r7, #0]
100006d2:	899b      	ldrh	r3, [r3, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
100006d4:	2008      	movs	r0, #8
	int32_t adc_mv = *valp * ref_mv;
100006d6:	4373      	muls	r3, r6
	int ret = adc_gain_invert(gain, &adc_mv);
100006d8:	a904      	add	r1, sp, #16
	int32_t adc_mv = *valp * ref_mv;
100006da:	9304      	str	r3, [sp, #16]
	int ret = adc_gain_invert(gain, &adc_mv);
100006dc:	f001 fb4c 	bl	10001d78 <adc_gain_invert>
	if (ret == 0) {
100006e0:	2800      	cmp	r0, #0
100006e2:	d110      	bne.n	10000706 <main+0xc2>
		*valp = (adc_mv >> resolution);
100006e4:	9e04      	ldr	r6, [sp, #16]
100006e6:	1336      	asrs	r6, r6, #12
				printk(" = %"PRId32" mV\n", val_mv);
100006e8:	0031      	movs	r1, r6
100006ea:	4814      	ldr	r0, [pc, #80]	; (1000073c <main+0xf8>)
100006ec:	f003 fad2 	bl	10003c94 <printk>
100006f0:	e00e      	b.n	10000710 <main+0xcc>
			printk("ADC controller device not ready\n");
100006f2:	4813      	ldr	r0, [pc, #76]	; (10000740 <main+0xfc>)
100006f4:	f003 face 	bl	10003c94 <printk>
}
100006f8:	b00b      	add	sp, #44	; 0x2c
100006fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printk("Could not setup channel #%d (%d)\n", i, err);
100006fc:	2100      	movs	r1, #0
100006fe:	4811      	ldr	r0, [pc, #68]	; (10000744 <main+0x100>)
10000700:	f003 fac8 	bl	10003c94 <printk>
			return;
10000704:	e7f8      	b.n	100006f8 <main+0xb4>
			if (err < 0) {
10000706:	2800      	cmp	r0, #0
10000708:	daee      	bge.n	100006e8 <main+0xa4>
				printk(" (value in mV not available)\n");
1000070a:	480f      	ldr	r0, [pc, #60]	; (10000748 <main+0x104>)
1000070c:	f003 fac2 	bl	10003c94 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
10000710:	2100      	movs	r1, #0
10000712:	480e      	ldr	r0, [pc, #56]	; (1000074c <main+0x108>)
10000714:	f002 fe20 	bl	10003358 <z_impl_k_sleep>
	while (1) {
10000718:	e7ae      	b.n	10000678 <main+0x34>
1000071a:	46c0      	nop			; (mov r8, r8)
1000071c:	10004928 	.word	0x10004928
10000720:	10004a7e 	.word	0x10004a7e
10000724:	10004c2b 	.word	0x10004c2b
10000728:	10004c39 	.word	0x10004c39
1000072c:	10004c4c 	.word	0x10004c4c
10000730:	10004c61 	.word	0x10004c61
10000734:	10004c64 	.word	0x10004c64
10000738:	10004c7b 	.word	0x10004c7b
1000073c:	10004ca4 	.word	0x10004ca4
10000740:	10004be8 	.word	0x10004be8
10000744:	10004c09 	.word	0x10004c09
10000748:	10004c86 	.word	0x10004c86
1000074c:	00002710 	.word	0x00002710

10000750 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
10000750:	b5f0      	push	{r4, r5, r6, r7, lr}
10000752:	b095      	sub	sp, #84	; 0x54
10000754:	9304      	str	r3, [sp, #16]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
10000756:	2304      	movs	r3, #4
{
10000758:	9209      	str	r2, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000075a:	401a      	ands	r2, r3
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000075c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
1000075e:	9208      	str	r2, [sp, #32]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
10000760:	08da      	lsrs	r2, r3, #3
10000762:	2307      	movs	r3, #7
10000764:	401a      	ands	r2, r3
10000766:	3201      	adds	r2, #1
{
10000768:	0007      	movs	r7, r0
1000076a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
1000076c:	9102      	str	r1, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
1000076e:	920b      	str	r2, [sp, #44]	; 0x2c
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
10000770:	0782      	lsls	r2, r0, #30
10000772:	d000      	beq.n	10000776 <cbvprintf_package+0x26>
10000774:	e1d2      	b.n	10000b1c <cbvprintf_package+0x3cc>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
10000776:	1d02      	adds	r2, r0, #4
10000778:	9200      	str	r2, [sp, #0]
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
1000077a:	2800      	cmp	r0, #0
1000077c:	d004      	beq.n	10000788 <cbvprintf_package+0x38>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
1000077e:	2907      	cmp	r1, #7
10000780:	d80a      	bhi.n	10000798 <cbvprintf_package+0x48>
		return -ENOSPC;
10000782:	201c      	movs	r0, #28
		return -EFAULT;
10000784:	4240      	negs	r0, r0
10000786:	e154      	b.n	10000a32 <cbvprintf_package+0x2e2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
10000788:	9a02      	ldr	r2, [sp, #8]
1000078a:	401a      	ands	r2, r3
1000078c:	0013      	movs	r3, r2
1000078e:	3204      	adds	r2, #4
10000790:	9200      	str	r2, [sp, #0]
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
10000792:	2208      	movs	r2, #8
10000794:	1ad3      	subs	r3, r2, r3
10000796:	9302      	str	r3, [sp, #8]
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
10000798:	2504      	movs	r5, #4
	s = fmt--;
1000079a:	9b04      	ldr	r3, [sp, #16]
	size = sizeof(char *);
1000079c:	002e      	movs	r6, r5
	s = fmt--;
1000079e:	3b01      	subs	r3, #1
100007a0:	9305      	str	r3, [sp, #20]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
100007a2:	2300      	movs	r3, #0
100007a4:	9307      	str	r3, [sp, #28]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
100007a6:	930a      	str	r3, [sp, #40]	; 0x28
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
100007a8:	9303      	str	r3, [sp, #12]
	bool parsing = false;
100007aa:	9301      	str	r3, [sp, #4]
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
100007ac:	3b01      	subs	r3, #1
100007ae:	9306      	str	r3, [sp, #24]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
100007b0:	2f00      	cmp	r7, #0
100007b2:	d002      	beq.n	100007ba <cbvprintf_package+0x6a>
				*(const char **)buf = s;
100007b4:	9b00      	ldr	r3, [sp, #0]
100007b6:	9a04      	ldr	r2, [sp, #16]
100007b8:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100007ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100007bc:	2b00      	cmp	r3, #0
100007be:	dd00      	ble.n	100007c2 <cbvprintf_package+0x72>
100007c0:	e0eb      	b.n	1000099a <cbvprintf_package+0x24a>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
100007c2:	4b9d      	ldr	r3, [pc, #628]	; (10000a38 <cbvprintf_package+0x2e8>)
100007c4:	9a04      	ldr	r2, [sp, #16]
100007c6:	429a      	cmp	r2, r3
100007c8:	d303      	bcc.n	100007d2 <cbvprintf_package+0x82>
100007ca:	4b9c      	ldr	r3, [pc, #624]	; (10000a3c <cbvprintf_package+0x2ec>)
100007cc:	429a      	cmp	r2, r3
100007ce:	d200      	bcs.n	100007d2 <cbvprintf_package+0x82>
100007d0:	e0e3      	b.n	1000099a <cbvprintf_package+0x24a>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100007d2:	9b00      	ldr	r3, [sp, #0]
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100007d4:	9909      	ldr	r1, [sp, #36]	; 0x24
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100007d6:	1bda      	subs	r2, r3, r7
100007d8:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100007da:	0789      	lsls	r1, r1, #30
100007dc:	d500      	bpl.n	100007e0 <cbvprintf_package+0x90>
100007de:	e109      	b.n	100009f4 <cbvprintf_package+0x2a4>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
100007e0:	9a03      	ldr	r2, [sp, #12]
100007e2:	2a0f      	cmp	r2, #15
100007e4:	d900      	bls.n	100007e8 <cbvprintf_package+0x98>
100007e6:	e0b4      	b.n	10000952 <cbvprintf_package+0x202>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
100007e8:	2f00      	cmp	r7, #0
100007ea:	d100      	bne.n	100007ee <cbvprintf_package+0x9e>
100007ec:	e10a      	b.n	10000a04 <cbvprintf_package+0x2b4>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
100007ee:	9903      	ldr	r1, [sp, #12]
100007f0:	aa0c      	add	r2, sp, #48	; 0x30
100007f2:	5453      	strb	r3, [r2, r1]
					str_ptr_arg[s_idx] = arg_idx;
100007f4:	000a      	movs	r2, r1
100007f6:	9906      	ldr	r1, [sp, #24]
100007f8:	ab10      	add	r3, sp, #64	; 0x40
100007fa:	5499      	strb	r1, [r3, r2]
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
100007fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100007fe:	3301      	adds	r3, #1
10000800:	930a      	str	r3, [sp, #40]	; 0x28
10000802:	e0ee      	b.n	100009e2 <cbvprintf_package+0x292>
			switch (*fmt) {
10000804:	287a      	cmp	r0, #122	; 0x7a
10000806:	d861      	bhi.n	100008cc <cbvprintf_package+0x17c>
10000808:	284b      	cmp	r0, #75	; 0x4b
1000080a:	d80e      	bhi.n	1000082a <cbvprintf_package+0xda>
1000080c:	2847      	cmp	r0, #71	; 0x47
1000080e:	d85d      	bhi.n	100008cc <cbvprintf_package+0x17c>
10000810:	2829      	cmp	r0, #41	; 0x29
10000812:	d82b      	bhi.n	1000086c <cbvprintf_package+0x11c>
10000814:	2825      	cmp	r0, #37	; 0x25
10000816:	d056      	beq.n	100008c6 <cbvprintf_package+0x176>
10000818:	d858      	bhi.n	100008cc <cbvprintf_package+0x17c>
1000081a:	2820      	cmp	r0, #32
1000081c:	d07f      	beq.n	1000091e <cbvprintf_package+0x1ce>
1000081e:	3823      	subs	r0, #35	; 0x23
10000820:	4243      	negs	r3, r0
10000822:	4158      	adcs	r0, r3
10000824:	b2c3      	uxtb	r3, r0
				parsing = false;
10000826:	9301      	str	r3, [sp, #4]
				continue;
10000828:	e079      	b.n	1000091e <cbvprintf_package+0x1ce>
			switch (*fmt) {
1000082a:	384c      	subs	r0, #76	; 0x4c
1000082c:	282e      	cmp	r0, #46	; 0x2e
1000082e:	d84d      	bhi.n	100008cc <cbvprintf_package+0x17c>
10000830:	f7ff fcba 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000834:	4c4c4c75 	.word	0x4c4c4c75
10000838:	4c4c4c4c 	.word	0x4c4c4c4c
1000083c:	4c4c4c4c 	.word	0x4c4c4c4c
10000840:	4c4c4c4e 	.word	0x4c4c4c4e
10000844:	4c4c4c4c 	.word	0x4c4c4c4c
10000848:	4e4c5d4c 	.word	0x4e4c5d4c
1000084c:	5d5d5d4e 	.word	0x5d5d5d4e
10000850:	4c734e75 	.word	0x4c734e75
10000854:	4e184c75 	.word	0x4e184c75
10000858:	894c4c18 	.word	0x894c4c18
1000085c:	4c4c4e87 	.word	0x4c4c4e87
10000860:	4c4e      	.short	0x4c4e
10000862:	87          	.byte	0x87
10000863:	00          	.byte	0x00
10000864:	2300      	movs	r3, #0
				parsing = false;
10000866:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
10000868:	2504      	movs	r5, #4
1000086a:	e03e      	b.n	100008ea <cbvprintf_package+0x19a>
1000086c:	2101      	movs	r1, #1
1000086e:	000a      	movs	r2, r1
10000870:	382a      	subs	r0, #42	; 0x2a
10000872:	b2c0      	uxtb	r0, r0
10000874:	4082      	lsls	r2, r0
10000876:	4b72      	ldr	r3, [pc, #456]	; (10000a40 <cbvprintf_package+0x2f0>)
10000878:	421a      	tst	r2, r3
1000087a:	d150      	bne.n	1000091e <cbvprintf_package+0x1ce>
1000087c:	20e2      	movs	r0, #226	; 0xe2
1000087e:	0013      	movs	r3, r2
10000880:	0580      	lsls	r0, r0, #22
10000882:	4003      	ands	r3, r0
10000884:	4202      	tst	r2, r0
10000886:	d132      	bne.n	100008ee <cbvprintf_package+0x19e>
10000888:	0010      	movs	r0, r2
1000088a:	4008      	ands	r0, r1
1000088c:	9001      	str	r0, [sp, #4]
1000088e:	420a      	tst	r2, r1
10000890:	d045      	beq.n	1000091e <cbvprintf_package+0x1ce>
		buf = (void *) ROUND_UP(buf, align);
10000892:	9a00      	ldr	r2, [sp, #0]
10000894:	4269      	negs	r1, r5
10000896:	3a01      	subs	r2, #1
10000898:	1952      	adds	r2, r2, r5
1000089a:	4011      	ands	r1, r2
1000089c:	9100      	str	r1, [sp, #0]
		if (buf0 != NULL && BUF_OFFSET + size > len) {
1000089e:	2f00      	cmp	r7, #0
100008a0:	d065      	beq.n	1000096e <cbvprintf_package+0x21e>
100008a2:	1bf2      	subs	r2, r6, r7
100008a4:	1852      	adds	r2, r2, r1
100008a6:	9902      	ldr	r1, [sp, #8]
100008a8:	428a      	cmp	r2, r1
100008aa:	d900      	bls.n	100008ae <cbvprintf_package+0x15e>
100008ac:	e769      	b.n	10000782 <cbvprintf_package+0x32>
		if (is_str_arg) {
100008ae:	2b00      	cmp	r3, #0
100008b0:	d16a      	bne.n	10000988 <cbvprintf_package+0x238>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
100008b2:	2e04      	cmp	r6, #4
100008b4:	d14b      	bne.n	1000094e <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
100008b6:	cc08      	ldmia	r4!, {r3}

			if (buf0 != NULL) {
				*(int *)buf = v;
100008b8:	9a00      	ldr	r2, [sp, #0]
100008ba:	6013      	str	r3, [r2, #0]
			}
			buf += sizeof(int);
100008bc:	9b00      	ldr	r3, [sp, #0]
100008be:	2604      	movs	r6, #4
100008c0:	3304      	adds	r3, #4
100008c2:	9300      	str	r3, [sp, #0]
100008c4:	e02b      	b.n	1000091e <cbvprintf_package+0x1ce>
				arg_idx--;
100008c6:	9b06      	ldr	r3, [sp, #24]
100008c8:	3b01      	subs	r3, #1
100008ca:	9306      	str	r3, [sp, #24]
				parsing = false;
100008cc:	2300      	movs	r3, #0
100008ce:	e7aa      	b.n	10000826 <cbvprintf_package+0xd6>
				if (fmt[-1] == 'l') {
100008d0:	9b05      	ldr	r3, [sp, #20]
100008d2:	785a      	ldrb	r2, [r3, #1]
100008d4:	2300      	movs	r3, #0
				parsing = false;
100008d6:	9301      	str	r3, [sp, #4]
				if (fmt[-1] == 'l') {
100008d8:	2a6c      	cmp	r2, #108	; 0x6c
100008da:	d1da      	bne.n	10000892 <cbvprintf_package+0x142>
				align = VA_STACK_ALIGN(void *);
100008dc:	2504      	movs	r5, #4
					if (fmt[-2] == 'l') {
100008de:	9a05      	ldr	r2, [sp, #20]
				size = sizeof(void *);
100008e0:	002e      	movs	r6, r5
					if (fmt[-2] == 'l') {
100008e2:	7812      	ldrb	r2, [r2, #0]
100008e4:	2a6c      	cmp	r2, #108	; 0x6c
100008e6:	d1d4      	bne.n	10000892 <cbvprintf_package+0x142>
						align = VA_STACK_ALIGN(long long);
100008e8:	196d      	adds	r5, r5, r5
			switch (*fmt) {
100008ea:	002e      	movs	r6, r5
100008ec:	e7d1      	b.n	10000892 <cbvprintf_package+0x142>
					v.ld = va_arg(ap, long double);
100008ee:	2507      	movs	r5, #7
				buf = (void *) ROUND_UP(buf, align);
100008f0:	9900      	ldr	r1, [sp, #0]
					v.ld = va_arg(ap, long double);
100008f2:	3407      	adds	r4, #7
100008f4:	43ac      	bics	r4, r5
				buf = (void *) ROUND_UP(buf, align);
100008f6:	1949      	adds	r1, r1, r5
100008f8:	43a9      	bics	r1, r5
					v.ld = va_arg(ap, long double);
100008fa:	cc0c      	ldmia	r4!, {r2, r3}
				if (buf0 != NULL) {
100008fc:	2f00      	cmp	r7, #0
100008fe:	d008      	beq.n	10000912 <cbvprintf_package+0x1c2>
					if (BUF_OFFSET + size > len) {
10000900:	3501      	adds	r5, #1
10000902:	1bed      	subs	r5, r5, r7
10000904:	9e02      	ldr	r6, [sp, #8]
10000906:	186d      	adds	r5, r5, r1
10000908:	42b5      	cmp	r5, r6
1000090a:	d900      	bls.n	1000090e <cbvprintf_package+0x1be>
1000090c:	e739      	b.n	10000782 <cbvprintf_package+0x32>
						*(long double *)buf = v.ld;
1000090e:	600a      	str	r2, [r1, #0]
10000910:	604b      	str	r3, [r1, #4]
				parsing = false;
10000912:	2300      	movs	r3, #0
				buf += size;
10000914:	3108      	adds	r1, #8
10000916:	9100      	str	r1, [sp, #0]
				parsing = false;
10000918:	9301      	str	r3, [sp, #4]
			switch (*fmt) {
1000091a:	2508      	movs	r5, #8
1000091c:	002e      	movs	r6, r5
1000091e:	9b05      	ldr	r3, [sp, #20]
10000920:	3301      	adds	r3, #1
10000922:	9305      	str	r3, [sp, #20]
			if (*++fmt == '\0') {
10000924:	9b05      	ldr	r3, [sp, #20]
10000926:	7898      	ldrb	r0, [r3, #2]
10000928:	2800      	cmp	r0, #0
1000092a:	d077      	beq.n	10000a1c <cbvprintf_package+0x2cc>
			if (!parsing) {
1000092c:	9b01      	ldr	r3, [sp, #4]
1000092e:	2b00      	cmp	r3, #0
10000930:	d000      	beq.n	10000934 <cbvprintf_package+0x1e4>
10000932:	e767      	b.n	10000804 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
10000934:	2825      	cmp	r0, #37	; 0x25
10000936:	d1f2      	bne.n	1000091e <cbvprintf_package+0x1ce>
					arg_idx++;
10000938:	9b06      	ldr	r3, [sp, #24]
1000093a:	3301      	adds	r3, #1
1000093c:	9306      	str	r3, [sp, #24]
					parsing = true;
1000093e:	2301      	movs	r3, #1
10000940:	9301      	str	r3, [sp, #4]
				align = VA_STACK_ALIGN(size_t);
10000942:	2504      	movs	r5, #4
10000944:	e7ea      	b.n	1000091c <cbvprintf_package+0x1cc>
			switch (*fmt) {
10000946:	2200      	movs	r2, #0
10000948:	9b01      	ldr	r3, [sp, #4]
1000094a:	9201      	str	r2, [sp, #4]
1000094c:	e78c      	b.n	10000868 <cbvprintf_package+0x118>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
1000094e:	2e08      	cmp	r6, #8
10000950:	d001      	beq.n	10000956 <cbvprintf_package+0x206>
					return -EINVAL;
10000952:	2016      	movs	r0, #22
10000954:	e716      	b.n	10000784 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
10000956:	2307      	movs	r3, #7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
10000958:	9900      	ldr	r1, [sp, #0]
			long long v = va_arg(ap, long long);
1000095a:	3407      	adds	r4, #7
1000095c:	439c      	bics	r4, r3
1000095e:	cc0c      	ldmia	r4!, {r2, r3}
					*(long long *)buf = v;
10000960:	600a      	str	r2, [r1, #0]
10000962:	604b      	str	r3, [r1, #4]
				}
			}
			buf += sizeof(long long);
10000964:	9b00      	ldr	r3, [sp, #0]
10000966:	2608      	movs	r6, #8
10000968:	3308      	adds	r3, #8
1000096a:	9300      	str	r3, [sp, #0]
1000096c:	e7d7      	b.n	1000091e <cbvprintf_package+0x1ce>
		if (is_str_arg) {
1000096e:	2b00      	cmp	r3, #0
10000970:	d10a      	bne.n	10000988 <cbvprintf_package+0x238>
		} else if (size == sizeof(int)) {
10000972:	2e04      	cmp	r6, #4
10000974:	d101      	bne.n	1000097a <cbvprintf_package+0x22a>
			int v = va_arg(ap, int);
10000976:	3404      	adds	r4, #4
			if (buf0 != NULL) {
10000978:	e7a0      	b.n	100008bc <cbvprintf_package+0x16c>
		} else if (size == sizeof(long long)) {
1000097a:	2e08      	cmp	r6, #8
1000097c:	d1e9      	bne.n	10000952 <cbvprintf_package+0x202>
			long long v = va_arg(ap, long long);
1000097e:	2307      	movs	r3, #7
10000980:	3407      	adds	r4, #7
10000982:	439c      	bics	r4, r3
10000984:	3408      	adds	r4, #8
			if (buf0 != NULL) {
10000986:	e7ed      	b.n	10000964 <cbvprintf_package+0x214>
			if (*++fmt == '\0') {
10000988:	9b05      	ldr	r3, [sp, #20]
1000098a:	3302      	adds	r3, #2
1000098c:	9305      	str	r3, [sp, #20]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
1000098e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10000990:	3b01      	subs	r3, #1
10000992:	930b      	str	r3, [sp, #44]	; 0x2c
			s = va_arg(ap, char *);
10000994:	cc08      	ldmia	r4!, {r3}
10000996:	9304      	str	r3, [sp, #16]
10000998:	e70a      	b.n	100007b0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
1000099a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000099c:	079b      	lsls	r3, r3, #30
1000099e:	d523      	bpl.n	100009e8 <cbvprintf_package+0x298>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100009a0:	2101      	movs	r1, #1
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
100009a2:	9b00      	ldr	r3, [sp, #0]
100009a4:	1bda      	subs	r2, r3, r7
100009a6:	0893      	lsrs	r3, r2, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
100009a8:	2080      	movs	r0, #128	; 0x80
100009aa:	0080      	lsls	r0, r0, #2
100009ac:	4282      	cmp	r2, r0
100009ae:	d2d0      	bcs.n	10000952 <cbvprintf_package+0x202>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
100009b0:	9a03      	ldr	r2, [sp, #12]
100009b2:	2a0f      	cmp	r2, #15
100009b4:	d8cd      	bhi.n	10000952 <cbvprintf_package+0x202>
				if (buf0 != NULL) {
100009b6:	2f00      	cmp	r7, #0
100009b8:	d01e      	beq.n	100009f8 <cbvprintf_package+0x2a8>
					str_ptr_pos[s_idx] = s_ptr_idx;
100009ba:	9803      	ldr	r0, [sp, #12]
100009bc:	b2db      	uxtb	r3, r3
100009be:	aa0c      	add	r2, sp, #48	; 0x30
100009c0:	5413      	strb	r3, [r2, r0]
100009c2:	469c      	mov	ip, r3
					str_ptr_arg[s_idx] = arg_idx;
100009c4:	9b06      	ldr	r3, [sp, #24]
100009c6:	aa10      	add	r2, sp, #64	; 0x40
100009c8:	5413      	strb	r3, [r2, r0]
					if (is_ro) {
100009ca:	2900      	cmp	r1, #0
100009cc:	d100      	bne.n	100009d0 <cbvprintf_package+0x280>
100009ce:	e715      	b.n	100007fc <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
100009d0:	2280      	movs	r2, #128	; 0x80
100009d2:	4663      	mov	r3, ip
100009d4:	4252      	negs	r2, r2
100009d6:	4313      	orrs	r3, r2
100009d8:	aa0c      	add	r2, sp, #48	; 0x30
100009da:	5413      	strb	r3, [r2, r0]
						s_ro_cnt++;
100009dc:	9b07      	ldr	r3, [sp, #28]
100009de:	3301      	adds	r3, #1
100009e0:	9307      	str	r3, [sp, #28]
				s_idx++;
100009e2:	9b03      	ldr	r3, [sp, #12]
100009e4:	3301      	adds	r3, #1
100009e6:	9303      	str	r3, [sp, #12]
			buf += sizeof(char *);
100009e8:	9b00      	ldr	r3, [sp, #0]
100009ea:	3304      	adds	r3, #4
100009ec:	9300      	str	r3, [sp, #0]
			is_str_arg = false;
100009ee:	9b05      	ldr	r3, [sp, #20]
100009f0:	3b01      	subs	r3, #1
100009f2:	e796      	b.n	10000922 <cbvprintf_package+0x1d2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
100009f4:	2100      	movs	r1, #0
100009f6:	e7d7      	b.n	100009a8 <cbvprintf_package+0x258>
				} else if (is_ro) {
100009f8:	2900      	cmp	r1, #0
100009fa:	d003      	beq.n	10000a04 <cbvprintf_package+0x2b4>
					len += 1;
100009fc:	9b02      	ldr	r3, [sp, #8]
100009fe:	3301      	adds	r3, #1
					len += strlen(s) + 1 + 1;
10000a00:	9302      	str	r3, [sp, #8]
10000a02:	e7ee      	b.n	100009e2 <cbvprintf_package+0x292>
					len += 2;
10000a04:	9b02      	ldr	r3, [sp, #8]
10000a06:	3302      	adds	r3, #2
10000a08:	9302      	str	r3, [sp, #8]
				} else if (rws_pos_en) {
10000a0a:	9b08      	ldr	r3, [sp, #32]
10000a0c:	2b00      	cmp	r3, #0
10000a0e:	d1e8      	bne.n	100009e2 <cbvprintf_package+0x292>
					len += strlen(s) + 1 + 1;
10000a10:	9804      	ldr	r0, [sp, #16]
10000a12:	f003 fa63 	bl	10003edc <strlen>
10000a16:	9b02      	ldr	r3, [sp, #8]
10000a18:	181b      	adds	r3, r3, r0
10000a1a:	e7f1      	b.n	10000a00 <cbvprintf_package+0x2b0>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
10000a1c:	2280      	movs	r2, #128	; 0x80
10000a1e:	9b00      	ldr	r3, [sp, #0]
10000a20:	00d2      	lsls	r2, r2, #3
10000a22:	1bdb      	subs	r3, r3, r7
10000a24:	4293      	cmp	r3, r2
10000a26:	d294      	bcs.n	10000952 <cbvprintf_package+0x202>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
10000a28:	2f00      	cmp	r7, #0
10000a2a:	d10b      	bne.n	10000a44 <cbvprintf_package+0x2f4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
10000a2c:	9802      	ldr	r0, [sp, #8]
10000a2e:	3808      	subs	r0, #8
10000a30:	18c0      	adds	r0, r0, r3
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
10000a32:	b015      	add	sp, #84	; 0x54
10000a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10000a36:	46c0      	nop			; (mov r8, r8)
10000a38:	10004898 	.word	0x10004898
10000a3c:	100050f4 	.word	0x100050f4
10000a40:	0000ffda 	.word	0x0000ffda
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10000a44:	089b      	lsrs	r3, r3, #2
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000a46:	2228      	movs	r2, #40	; 0x28
	*(char **)buf0 = NULL;
10000a48:	6038      	str	r0, [r7, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
10000a4a:	703b      	strb	r3, [r7, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000a4c:	466b      	mov	r3, sp
10000a4e:	189b      	adds	r3, r3, r2
	if (rws_pos_en) {
10000a50:	9a08      	ldr	r2, [sp, #32]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000a52:	781b      	ldrb	r3, [r3, #0]
	if (rws_pos_en) {
10000a54:	2a00      	cmp	r2, #0
10000a56:	d00c      	beq.n	10000a72 <cbvprintf_package+0x322>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
10000a58:	70fb      	strb	r3, [r7, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
10000a5a:	9b07      	ldr	r3, [sp, #28]
10000a5c:	70bb      	strb	r3, [r7, #2]
	if (s_ro_cnt) {
10000a5e:	2b00      	cmp	r3, #0
10000a60:	d120      	bne.n	10000aa4 <cbvprintf_package+0x354>
			*buf++ = str_ptr_arg[i];
10000a62:	2600      	movs	r6, #0
10000a64:	ad0c      	add	r5, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
10000a66:	9b03      	ldr	r3, [sp, #12]
10000a68:	42b3      	cmp	r3, r6
10000a6a:	d120      	bne.n	10000aae <cbvprintf_package+0x35e>
	return BUF_OFFSET;
10000a6c:	9b00      	ldr	r3, [sp, #0]
10000a6e:	1bd8      	subs	r0, r3, r7
10000a70:	e7df      	b.n	10000a32 <cbvprintf_package+0x2e2>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
10000a72:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
10000a74:	e7f1      	b.n	10000a5a <cbvprintf_package+0x30a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
10000a76:	ac0c      	add	r4, sp, #48	; 0x30
10000a78:	56e4      	ldrsb	r4, [r4, r3]
10000a7a:	a90c      	add	r1, sp, #48	; 0x30
10000a7c:	5c59      	ldrb	r1, [r3, r1]
10000a7e:	2c00      	cmp	r4, #0
10000a80:	da0b      	bge.n	10000a9a <cbvprintf_package+0x34a>
			if (BUF_OFFSET + 1 > len) {
10000a82:	9c00      	ldr	r4, [sp, #0]
10000a84:	9d02      	ldr	r5, [sp, #8]
10000a86:	18a4      	adds	r4, r4, r2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10000a88:	4001      	ands	r1, r0
			if (BUF_OFFSET + 1 > len) {
10000a8a:	42ac      	cmp	r4, r5
10000a8c:	d900      	bls.n	10000a90 <cbvprintf_package+0x340>
10000a8e:	e678      	b.n	10000782 <cbvprintf_package+0x32>
			*buf++ = pos;
10000a90:	9c00      	ldr	r4, [sp, #0]
10000a92:	7021      	strb	r1, [r4, #0]
10000a94:	0021      	movs	r1, r4
10000a96:	3101      	adds	r1, #1
10000a98:	9100      	str	r1, [sp, #0]
		for (i = 0; i < s_idx; i++) {
10000a9a:	3301      	adds	r3, #1
10000a9c:	9903      	ldr	r1, [sp, #12]
10000a9e:	4299      	cmp	r1, r3
10000aa0:	d1e9      	bne.n	10000a76 <cbvprintf_package+0x326>
10000aa2:	e7de      	b.n	10000a62 <cbvprintf_package+0x312>
			if (BUF_OFFSET + 1 > len) {
10000aa4:	2201      	movs	r2, #1
		for (i = 0; i < s_idx; i++) {
10000aa6:	2300      	movs	r3, #0
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
10000aa8:	207f      	movs	r0, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
10000aaa:	1bd2      	subs	r2, r2, r7
10000aac:	e7f6      	b.n	10000a9c <cbvprintf_package+0x34c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
10000aae:	9b07      	ldr	r3, [sp, #28]
10000ab0:	2b00      	cmp	r3, #0
10000ab2:	d002      	beq.n	10000aba <cbvprintf_package+0x36a>
10000ab4:	782b      	ldrb	r3, [r5, #0]
10000ab6:	2b7f      	cmp	r3, #127	; 0x7f
10000ab8:	d821      	bhi.n	10000afe <cbvprintf_package+0x3ae>
		if (rws_pos_en) {
10000aba:	9b08      	ldr	r3, [sp, #32]
10000abc:	2b00      	cmp	r3, #0
10000abe:	d021      	beq.n	10000b04 <cbvprintf_package+0x3b4>
			*buf++ = str_ptr_arg[i];
10000ac0:	ab10      	add	r3, sp, #64	; 0x40
10000ac2:	9a00      	ldr	r2, [sp, #0]
10000ac4:	5cf3      	ldrb	r3, [r6, r3]
			size = 0;
10000ac6:	2400      	movs	r4, #0
			*buf++ = str_ptr_arg[i];
10000ac8:	7013      	strb	r3, [r2, #0]
10000aca:	0013      	movs	r3, r2
10000acc:	3301      	adds	r3, #1
10000ace:	9300      	str	r3, [sp, #0]
		if (BUF_OFFSET + 1 + size > len) {
10000ad0:	2301      	movs	r3, #1
10000ad2:	9a00      	ldr	r2, [sp, #0]
10000ad4:	1bdb      	subs	r3, r3, r7
10000ad6:	191b      	adds	r3, r3, r4
10000ad8:	18d3      	adds	r3, r2, r3
10000ada:	9a02      	ldr	r2, [sp, #8]
10000adc:	4293      	cmp	r3, r2
10000ade:	d900      	bls.n	10000ae2 <cbvprintf_package+0x392>
10000ae0:	e64f      	b.n	10000782 <cbvprintf_package+0x32>
		*buf++ = str_ptr_pos[i];
10000ae2:	9b00      	ldr	r3, [sp, #0]
10000ae4:	9a00      	ldr	r2, [sp, #0]
10000ae6:	3301      	adds	r3, #1
10000ae8:	9301      	str	r3, [sp, #4]
10000aea:	782b      	ldrb	r3, [r5, #0]
		memcpy(buf, s, size);
10000aec:	9904      	ldr	r1, [sp, #16]
		*buf++ = str_ptr_pos[i];
10000aee:	7013      	strb	r3, [r2, #0]
		memcpy(buf, s, size);
10000af0:	9801      	ldr	r0, [sp, #4]
10000af2:	0022      	movs	r2, r4
10000af4:	f003 fa04 	bl	10003f00 <memcpy>
		buf += size;
10000af8:	9b01      	ldr	r3, [sp, #4]
10000afa:	191b      	adds	r3, r3, r4
10000afc:	9300      	str	r3, [sp, #0]
	for (i = 0; i < s_idx; i++) {
10000afe:	3601      	adds	r6, #1
10000b00:	3501      	adds	r5, #1
10000b02:	e7b0      	b.n	10000a66 <cbvprintf_package+0x316>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
10000b04:	782b      	ldrb	r3, [r5, #0]
10000b06:	009b      	lsls	r3, r3, #2
10000b08:	18fb      	adds	r3, r7, r3
10000b0a:	681a      	ldr	r2, [r3, #0]
10000b0c:	9204      	str	r2, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10000b0e:	9a08      	ldr	r2, [sp, #32]
			size = strlen(s) + 1;
10000b10:	9804      	ldr	r0, [sp, #16]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
10000b12:	601a      	str	r2, [r3, #0]
			size = strlen(s) + 1;
10000b14:	f003 f9e2 	bl	10003edc <strlen>
10000b18:	1c44      	adds	r4, r0, #1
10000b1a:	e7d9      	b.n	10000ad0 <cbvprintf_package+0x380>
		return -EFAULT;
10000b1c:	200e      	movs	r0, #14
10000b1e:	e631      	b.n	10000784 <cbvprintf_package+0x34>

10000b20 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
10000b20:	4b01      	ldr	r3, [pc, #4]	; (10000b28 <__printk_hook_install+0x8>)
10000b22:	6018      	str	r0, [r3, #0]
}
10000b24:	4770      	bx	lr
10000b26:	46c0      	nop			; (mov r8, r8)
10000b28:	200000bc 	.word	0x200000bc

10000b2c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
10000b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10000b2e:	001c      	movs	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
10000b30:	2700      	movs	r7, #0
{
10000b32:	b099      	sub	sp, #100	; 0x64
10000b34:	9004      	str	r0, [sp, #16]
10000b36:	9105      	str	r1, [sp, #20]
10000b38:	9208      	str	r2, [sp, #32]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
10000b3a:	9b08      	ldr	r3, [sp, #32]
10000b3c:	7818      	ldrb	r0, [r3, #0]
10000b3e:	2800      	cmp	r0, #0
10000b40:	d101      	bne.n	10000b46 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
10000b42:	0038      	movs	r0, r7
10000b44:	e327      	b.n	10001196 <z_cbvprintf_impl+0x66a>
			OUTC(*fp++);
10000b46:	9b08      	ldr	r3, [sp, #32]
10000b48:	3301      	adds	r3, #1
10000b4a:	9307      	str	r3, [sp, #28]
		if (*fp != '%') {
10000b4c:	2825      	cmp	r0, #37	; 0x25
10000b4e:	d007      	beq.n	10000b60 <z_cbvprintf_impl+0x34>
			OUTC('%');
10000b50:	9905      	ldr	r1, [sp, #20]
10000b52:	9b04      	ldr	r3, [sp, #16]
10000b54:	4798      	blx	r3
10000b56:	2800      	cmp	r0, #0
10000b58:	da00      	bge.n	10000b5c <z_cbvprintf_impl+0x30>
10000b5a:	e31c      	b.n	10001196 <z_cbvprintf_impl+0x66a>
10000b5c:	3701      	adds	r7, #1
		if (bps == NULL) {
10000b5e:	e1e3      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
		} state = {
10000b60:	ad12      	add	r5, sp, #72	; 0x48
10000b62:	2218      	movs	r2, #24
10000b64:	2100      	movs	r1, #0
10000b66:	0028      	movs	r0, r5
10000b68:	f003 f9d3 	bl	10003f12 <memset>
	if (*sp == '%') {
10000b6c:	9b08      	ldr	r3, [sp, #32]
10000b6e:	785b      	ldrb	r3, [r3, #1]
10000b70:	2b25      	cmp	r3, #37	; 0x25
10000b72:	d114      	bne.n	10000b9e <z_cbvprintf_impl+0x72>
		conv->specifier = *sp++;
10000b74:	9a08      	ldr	r2, [sp, #32]
10000b76:	72eb      	strb	r3, [r5, #11]
10000b78:	3202      	adds	r2, #2
10000b7a:	9207      	str	r2, [sp, #28]
		if (conv->width_star) {
10000b7c:	ab12      	add	r3, sp, #72	; 0x48
10000b7e:	7a5a      	ldrb	r2, [r3, #9]
10000b80:	07d1      	lsls	r1, r2, #31
10000b82:	d400      	bmi.n	10000b86 <z_cbvprintf_impl+0x5a>
10000b84:	e17f      	b.n	10000e86 <z_cbvprintf_impl+0x35a>
			width = va_arg(ap, int);
10000b86:	cc02      	ldmia	r4!, {r1}
10000b88:	9103      	str	r1, [sp, #12]
			if (width < 0) {
10000b8a:	2900      	cmp	r1, #0
10000b8c:	db00      	blt.n	10000b90 <z_cbvprintf_impl+0x64>
10000b8e:	e17f      	b.n	10000e90 <z_cbvprintf_impl+0x364>
				conv->flag_dash = true;
10000b90:	2104      	movs	r1, #4
10000b92:	7a18      	ldrb	r0, [r3, #8]
10000b94:	4301      	orrs	r1, r0
10000b96:	7219      	strb	r1, [r3, #8]
				width = -width;
10000b98:	9b03      	ldr	r3, [sp, #12]
		int width = -1;
10000b9a:	425b      	negs	r3, r3
10000b9c:	e177      	b.n	10000e8e <z_cbvprintf_impl+0x362>
10000b9e:	2200      	movs	r2, #0
		switch (*sp) {
10000ba0:	2601      	movs	r6, #1
10000ba2:	0015      	movs	r5, r2
10000ba4:	0010      	movs	r0, r2
10000ba6:	4694      	mov	ip, r2
10000ba8:	9203      	str	r2, [sp, #12]
10000baa:	9b07      	ldr	r3, [sp, #28]
10000bac:	781b      	ldrb	r3, [r3, #0]
10000bae:	2b2b      	cmp	r3, #43	; 0x2b
10000bb0:	d06f      	beq.n	10000c92 <z_cbvprintf_impl+0x166>
10000bb2:	d868      	bhi.n	10000c86 <z_cbvprintf_impl+0x15a>
10000bb4:	2b20      	cmp	r3, #32
10000bb6:	d071      	beq.n	10000c9c <z_cbvprintf_impl+0x170>
10000bb8:	2b23      	cmp	r3, #35	; 0x23
10000bba:	d071      	beq.n	10000ca0 <z_cbvprintf_impl+0x174>
10000bbc:	2a00      	cmp	r2, #0
10000bbe:	d005      	beq.n	10000bcc <z_cbvprintf_impl+0xa0>
10000bc0:	ae12      	add	r6, sp, #72	; 0x48
10000bc2:	7a32      	ldrb	r2, [r6, #8]
10000bc4:	0011      	movs	r1, r2
10000bc6:	2240      	movs	r2, #64	; 0x40
10000bc8:	430a      	orrs	r2, r1
10000bca:	7232      	strb	r2, [r6, #8]
10000bcc:	2d00      	cmp	r5, #0
10000bce:	d004      	beq.n	10000bda <z_cbvprintf_impl+0xae>
10000bd0:	2220      	movs	r2, #32
10000bd2:	ad12      	add	r5, sp, #72	; 0x48
10000bd4:	7a2e      	ldrb	r6, [r5, #8]
10000bd6:	4332      	orrs	r2, r6
10000bd8:	722a      	strb	r2, [r5, #8]
10000bda:	2800      	cmp	r0, #0
10000bdc:	d004      	beq.n	10000be8 <z_cbvprintf_impl+0xbc>
10000bde:	2210      	movs	r2, #16
10000be0:	a812      	add	r0, sp, #72	; 0x48
10000be2:	7a05      	ldrb	r5, [r0, #8]
10000be4:	432a      	orrs	r2, r5
10000be6:	7202      	strb	r2, [r0, #8]
10000be8:	9a03      	ldr	r2, [sp, #12]
10000bea:	2a00      	cmp	r2, #0
10000bec:	d004      	beq.n	10000bf8 <z_cbvprintf_impl+0xcc>
10000bee:	2208      	movs	r2, #8
10000bf0:	a912      	add	r1, sp, #72	; 0x48
10000bf2:	7a08      	ldrb	r0, [r1, #8]
10000bf4:	4302      	orrs	r2, r0
10000bf6:	720a      	strb	r2, [r1, #8]
10000bf8:	4662      	mov	r2, ip
10000bfa:	2a00      	cmp	r2, #0
10000bfc:	d004      	beq.n	10000c08 <z_cbvprintf_impl+0xdc>
10000bfe:	2204      	movs	r2, #4
10000c00:	a912      	add	r1, sp, #72	; 0x48
10000c02:	7a08      	ldrb	r0, [r1, #8]
10000c04:	4302      	orrs	r2, r0
10000c06:	720a      	strb	r2, [r1, #8]
	if (conv->flag_zero && conv->flag_dash) {
10000c08:	2144      	movs	r1, #68	; 0x44
10000c0a:	a812      	add	r0, sp, #72	; 0x48
10000c0c:	7a02      	ldrb	r2, [r0, #8]
10000c0e:	4011      	ands	r1, r2
10000c10:	2944      	cmp	r1, #68	; 0x44
10000c12:	d102      	bne.n	10000c1a <z_cbvprintf_impl+0xee>
		conv->flag_zero = false;
10000c14:	2140      	movs	r1, #64	; 0x40
10000c16:	438a      	bics	r2, r1
10000c18:	7202      	strb	r2, [r0, #8]
	conv->width_present = true;
10000c1a:	2280      	movs	r2, #128	; 0x80
10000c1c:	7a01      	ldrb	r1, [r0, #8]
10000c1e:	4252      	negs	r2, r2
10000c20:	430a      	orrs	r2, r1
10000c22:	7202      	strb	r2, [r0, #8]
	size_t val = 0;
10000c24:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
10000c26:	250a      	movs	r5, #10
10000c28:	9a07      	ldr	r2, [sp, #28]
	if (*sp == '*') {
10000c2a:	2b2a      	cmp	r3, #42	; 0x2a
10000c2c:	d140      	bne.n	10000cb0 <z_cbvprintf_impl+0x184>
		conv->width_star = true;
10000c2e:	7a41      	ldrb	r1, [r0, #9]
10000c30:	3b29      	subs	r3, #41	; 0x29
10000c32:	430b      	orrs	r3, r1
		return ++sp;
10000c34:	3201      	adds	r2, #1
		conv->width_star = true;
10000c36:	7243      	strb	r3, [r0, #9]
	conv->prec_present = (*sp == '.');
10000c38:	7815      	ldrb	r5, [r2, #0]
10000c3a:	2602      	movs	r6, #2
10000c3c:	0029      	movs	r1, r5
10000c3e:	392e      	subs	r1, #46	; 0x2e
10000c40:	424b      	negs	r3, r1
10000c42:	4159      	adcs	r1, r3
10000c44:	a812      	add	r0, sp, #72	; 0x48
10000c46:	7a43      	ldrb	r3, [r0, #9]
10000c48:	0049      	lsls	r1, r1, #1
10000c4a:	43b3      	bics	r3, r6
10000c4c:	430b      	orrs	r3, r1
10000c4e:	7243      	strb	r3, [r0, #9]
	if (!conv->prec_present) {
10000c50:	2d2e      	cmp	r5, #46	; 0x2e
10000c52:	d145      	bne.n	10000ce0 <z_cbvprintf_impl+0x1b4>
	if (*sp == '*') {
10000c54:	7853      	ldrb	r3, [r2, #1]
10000c56:	2b2a      	cmp	r3, #42	; 0x2a
10000c58:	d03d      	beq.n	10000cd6 <z_cbvprintf_impl+0x1aa>
	size_t val = 0;
10000c5a:	2300      	movs	r3, #0
	++sp;
10000c5c:	3201      	adds	r2, #1
		val = 10U * val + *sp++ - '0';
10000c5e:	3608      	adds	r6, #8
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
10000c60:	7811      	ldrb	r1, [r2, #0]
10000c62:	1c55      	adds	r5, r2, #1
10000c64:	0008      	movs	r0, r1
10000c66:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000c68:	2809      	cmp	r0, #9
10000c6a:	d963      	bls.n	10000d34 <z_cbvprintf_impl+0x208>
	conv->prec_value = prec;
10000c6c:	a912      	add	r1, sp, #72	; 0x48
10000c6e:	9316      	str	r3, [sp, #88]	; 0x58
	conv->unsupported |= ((conv->prec_value < 0)
10000c70:	7a0d      	ldrb	r5, [r1, #8]
10000c72:	07a8      	lsls	r0, r5, #30
10000c74:	4318      	orrs	r0, r3
10000c76:	2302      	movs	r3, #2
10000c78:	439d      	bics	r5, r3
10000c7a:	002b      	movs	r3, r5
10000c7c:	0fc0      	lsrs	r0, r0, #31
10000c7e:	0040      	lsls	r0, r0, #1
10000c80:	4303      	orrs	r3, r0
10000c82:	720b      	strb	r3, [r1, #8]
	return sp;
10000c84:	e02c      	b.n	10000ce0 <z_cbvprintf_impl+0x1b4>
		switch (*sp) {
10000c86:	2b2d      	cmp	r3, #45	; 0x2d
10000c88:	d00c      	beq.n	10000ca4 <z_cbvprintf_impl+0x178>
10000c8a:	2b30      	cmp	r3, #48	; 0x30
10000c8c:	d196      	bne.n	10000bbc <z_cbvprintf_impl+0x90>
10000c8e:	0032      	movs	r2, r6
10000c90:	e000      	b.n	10000c94 <z_cbvprintf_impl+0x168>
10000c92:	9603      	str	r6, [sp, #12]
			++sp;
10000c94:	9b07      	ldr	r3, [sp, #28]
10000c96:	3301      	adds	r3, #1
10000c98:	9307      	str	r3, [sp, #28]
	} while (loop);
10000c9a:	e786      	b.n	10000baa <z_cbvprintf_impl+0x7e>
		switch (*sp) {
10000c9c:	0030      	movs	r0, r6
10000c9e:	e7f9      	b.n	10000c94 <z_cbvprintf_impl+0x168>
10000ca0:	0035      	movs	r5, r6
10000ca2:	e7f7      	b.n	10000c94 <z_cbvprintf_impl+0x168>
10000ca4:	46b4      	mov	ip, r6
10000ca6:	e7f5      	b.n	10000c94 <z_cbvprintf_impl+0x168>
		val = 10U * val + *sp++ - '0';
10000ca8:	0032      	movs	r2, r6
10000caa:	4369      	muls	r1, r5
10000cac:	3930      	subs	r1, #48	; 0x30
10000cae:	1859      	adds	r1, r3, r1
10000cb0:	7813      	ldrb	r3, [r2, #0]
10000cb2:	1c56      	adds	r6, r2, #1
10000cb4:	0018      	movs	r0, r3
10000cb6:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
10000cb8:	2809      	cmp	r0, #9
10000cba:	d9f5      	bls.n	10000ca8 <z_cbvprintf_impl+0x17c>
	if (sp != wp) {
10000cbc:	9b07      	ldr	r3, [sp, #28]
10000cbe:	4293      	cmp	r3, r2
10000cc0:	d0ba      	beq.n	10000c38 <z_cbvprintf_impl+0x10c>
		conv->unsupported |= ((conv->width_value < 0)
10000cc2:	2502      	movs	r5, #2
		conv->width_value = width;
10000cc4:	ab12      	add	r3, sp, #72	; 0x48
		conv->unsupported |= ((conv->width_value < 0)
10000cc6:	7a18      	ldrb	r0, [r3, #8]
		conv->width_value = width;
10000cc8:	9115      	str	r1, [sp, #84]	; 0x54
		conv->unsupported |= ((conv->width_value < 0)
10000cca:	0fc9      	lsrs	r1, r1, #31
10000ccc:	0049      	lsls	r1, r1, #1
10000cce:	43a8      	bics	r0, r5
10000cd0:	4301      	orrs	r1, r0
10000cd2:	7219      	strb	r1, [r3, #8]
10000cd4:	e7b0      	b.n	10000c38 <z_cbvprintf_impl+0x10c>
		conv->prec_star = true;
10000cd6:	2304      	movs	r3, #4
10000cd8:	7a41      	ldrb	r1, [r0, #9]
		return ++sp;
10000cda:	3202      	adds	r2, #2
		conv->prec_star = true;
10000cdc:	430b      	orrs	r3, r1
10000cde:	7243      	strb	r3, [r0, #9]
	switch (*sp) {
10000ce0:	7811      	ldrb	r1, [r2, #0]
10000ce2:	ab12      	add	r3, sp, #72	; 0x48
10000ce4:	296c      	cmp	r1, #108	; 0x6c
10000ce6:	d045      	beq.n	10000d74 <z_cbvprintf_impl+0x248>
10000ce8:	d829      	bhi.n	10000d3e <z_cbvprintf_impl+0x212>
10000cea:	2968      	cmp	r1, #104	; 0x68
10000cec:	d030      	beq.n	10000d50 <z_cbvprintf_impl+0x224>
10000cee:	296a      	cmp	r1, #106	; 0x6a
10000cf0:	d04c      	beq.n	10000d8c <z_cbvprintf_impl+0x260>
10000cf2:	294c      	cmp	r1, #76	; 0x4c
10000cf4:	d054      	beq.n	10000da0 <z_cbvprintf_impl+0x274>
	conv->specifier = *sp++;
10000cf6:	7811      	ldrb	r1, [r2, #0]
10000cf8:	1c53      	adds	r3, r2, #1
10000cfa:	aa12      	add	r2, sp, #72	; 0x48
10000cfc:	9307      	str	r3, [sp, #28]
10000cfe:	72d1      	strb	r1, [r2, #11]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000d00:	7a53      	ldrb	r3, [r2, #9]
	switch (conv->specifier) {
10000d02:	2978      	cmp	r1, #120	; 0x78
10000d04:	d900      	bls.n	10000d08 <z_cbvprintf_impl+0x1dc>
10000d06:	e0b9      	b.n	10000e7c <z_cbvprintf_impl+0x350>
10000d08:	296d      	cmp	r1, #109	; 0x6d
10000d0a:	d850      	bhi.n	10000dae <z_cbvprintf_impl+0x282>
10000d0c:	2969      	cmp	r1, #105	; 0x69
10000d0e:	d900      	bls.n	10000d12 <z_cbvprintf_impl+0x1e6>
10000d10:	e0b4      	b.n	10000e7c <z_cbvprintf_impl+0x350>
10000d12:	2957      	cmp	r1, #87	; 0x57
10000d14:	d866      	bhi.n	10000de4 <z_cbvprintf_impl+0x2b8>
10000d16:	2941      	cmp	r1, #65	; 0x41
10000d18:	d003      	beq.n	10000d22 <z_cbvprintf_impl+0x1f6>
10000d1a:	3945      	subs	r1, #69	; 0x45
10000d1c:	2902      	cmp	r1, #2
10000d1e:	d900      	bls.n	10000d22 <z_cbvprintf_impl+0x1f6>
10000d20:	e0ac      	b.n	10000e7c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_FP;
10000d22:	2307      	movs	r3, #7
10000d24:	a912      	add	r1, sp, #72	; 0x48
10000d26:	7a8a      	ldrb	r2, [r1, #10]
10000d28:	439a      	bics	r2, r3
10000d2a:	3b03      	subs	r3, #3
10000d2c:	4313      	orrs	r3, r2
10000d2e:	728b      	strb	r3, [r1, #10]
			unsupported = true;
10000d30:	2301      	movs	r3, #1
			break;
10000d32:	e073      	b.n	10000e1c <z_cbvprintf_impl+0x2f0>
		val = 10U * val + *sp++ - '0';
10000d34:	4373      	muls	r3, r6
10000d36:	3b30      	subs	r3, #48	; 0x30
10000d38:	002a      	movs	r2, r5
10000d3a:	185b      	adds	r3, r3, r1
10000d3c:	e790      	b.n	10000c60 <z_cbvprintf_impl+0x134>
	switch (*sp) {
10000d3e:	2974      	cmp	r1, #116	; 0x74
10000d40:	d029      	beq.n	10000d96 <z_cbvprintf_impl+0x26a>
10000d42:	297a      	cmp	r1, #122	; 0x7a
10000d44:	d1d7      	bne.n	10000cf6 <z_cbvprintf_impl+0x1ca>
		conv->length_mod = LENGTH_Z;
10000d46:	2178      	movs	r1, #120	; 0x78
10000d48:	7a58      	ldrb	r0, [r3, #9]
10000d4a:	4388      	bics	r0, r1
10000d4c:	3948      	subs	r1, #72	; 0x48
10000d4e:	e00d      	b.n	10000d6c <z_cbvprintf_impl+0x240>
		if (*++sp == 'h') {
10000d50:	7850      	ldrb	r0, [r2, #1]
10000d52:	2178      	movs	r1, #120	; 0x78
10000d54:	2868      	cmp	r0, #104	; 0x68
10000d56:	d106      	bne.n	10000d66 <z_cbvprintf_impl+0x23a>
			conv->length_mod = LENGTH_HH;
10000d58:	7a58      	ldrb	r0, [r3, #9]
10000d5a:	4388      	bics	r0, r1
10000d5c:	3970      	subs	r1, #112	; 0x70
			conv->length_mod = LENGTH_LL;
10000d5e:	4301      	orrs	r1, r0
10000d60:	7259      	strb	r1, [r3, #9]
			++sp;
10000d62:	3202      	adds	r2, #2
10000d64:	e7c7      	b.n	10000cf6 <z_cbvprintf_impl+0x1ca>
			conv->length_mod = LENGTH_H;
10000d66:	7a58      	ldrb	r0, [r3, #9]
10000d68:	4388      	bics	r0, r1
10000d6a:	2110      	movs	r1, #16
10000d6c:	4301      	orrs	r1, r0
10000d6e:	7259      	strb	r1, [r3, #9]
		if (*++sp == 'h') {
10000d70:	3201      	adds	r2, #1
10000d72:	e7c0      	b.n	10000cf6 <z_cbvprintf_impl+0x1ca>
		if (*++sp == 'l') {
10000d74:	7850      	ldrb	r0, [r2, #1]
10000d76:	2178      	movs	r1, #120	; 0x78
10000d78:	286c      	cmp	r0, #108	; 0x6c
10000d7a:	d103      	bne.n	10000d84 <z_cbvprintf_impl+0x258>
			conv->length_mod = LENGTH_LL;
10000d7c:	7a58      	ldrb	r0, [r3, #9]
10000d7e:	4388      	bics	r0, r1
10000d80:	3958      	subs	r1, #88	; 0x58
10000d82:	e7ec      	b.n	10000d5e <z_cbvprintf_impl+0x232>
			conv->length_mod = LENGTH_L;
10000d84:	7a58      	ldrb	r0, [r3, #9]
10000d86:	4388      	bics	r0, r1
10000d88:	2118      	movs	r1, #24
10000d8a:	e7ef      	b.n	10000d6c <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_J;
10000d8c:	2178      	movs	r1, #120	; 0x78
10000d8e:	7a58      	ldrb	r0, [r3, #9]
10000d90:	4388      	bics	r0, r1
10000d92:	3950      	subs	r1, #80	; 0x50
10000d94:	e7ea      	b.n	10000d6c <z_cbvprintf_impl+0x240>
		conv->length_mod = LENGTH_T;
10000d96:	2178      	movs	r1, #120	; 0x78
10000d98:	7a58      	ldrb	r0, [r3, #9]
10000d9a:	4388      	bics	r0, r1
10000d9c:	3940      	subs	r1, #64	; 0x40
10000d9e:	e7e5      	b.n	10000d6c <z_cbvprintf_impl+0x240>
		conv->unsupported = true;
10000da0:	8918      	ldrh	r0, [r3, #8]
10000da2:	49a5      	ldr	r1, [pc, #660]	; (10001038 <z_cbvprintf_impl+0x50c>)
10000da4:	4008      	ands	r0, r1
10000da6:	49a5      	ldr	r1, [pc, #660]	; (1000103c <z_cbvprintf_impl+0x510>)
10000da8:	4301      	orrs	r1, r0
10000daa:	8119      	strh	r1, [r3, #8]
		break;
10000dac:	e7e0      	b.n	10000d70 <z_cbvprintf_impl+0x244>
10000dae:	2001      	movs	r0, #1
10000db0:	0005      	movs	r5, r0
	switch (conv->specifier) {
10000db2:	396e      	subs	r1, #110	; 0x6e
10000db4:	b2c9      	uxtb	r1, r1
10000db6:	408d      	lsls	r5, r1
10000db8:	0029      	movs	r1, r5
10000dba:	4da1      	ldr	r5, [pc, #644]	; (10001040 <z_cbvprintf_impl+0x514>)
10000dbc:	4229      	tst	r1, r5
10000dbe:	d138      	bne.n	10000e32 <z_cbvprintf_impl+0x306>
10000dc0:	2524      	movs	r5, #36	; 0x24
10000dc2:	4229      	tst	r1, r5
10000dc4:	d151      	bne.n	10000e6a <z_cbvprintf_impl+0x33e>
10000dc6:	4201      	tst	r1, r0
10000dc8:	d058      	beq.n	10000e7c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_PTR;
10000dca:	2107      	movs	r1, #7
10000dcc:	7a90      	ldrb	r0, [r2, #10]
10000dce:	4388      	bics	r0, r1
10000dd0:	3904      	subs	r1, #4
10000dd2:	4301      	orrs	r1, r0
10000dd4:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000dd6:	2278      	movs	r2, #120	; 0x78
10000dd8:	4013      	ands	r3, r2
10000dda:	3b40      	subs	r3, #64	; 0x40
10000ddc:	425a      	negs	r2, r3
10000dde:	4153      	adcs	r3, r2
		if (conv->length_mod != LENGTH_NONE) {
10000de0:	b2db      	uxtb	r3, r3
10000de2:	e01b      	b.n	10000e1c <z_cbvprintf_impl+0x2f0>
10000de4:	2001      	movs	r0, #1
	switch (conv->specifier) {
10000de6:	000d      	movs	r5, r1
10000de8:	0006      	movs	r6, r0
10000dea:	3d58      	subs	r5, #88	; 0x58
10000dec:	b2ed      	uxtb	r5, r5
10000dee:	40ae      	lsls	r6, r5
10000df0:	0035      	movs	r5, r6
10000df2:	26e2      	movs	r6, #226	; 0xe2
10000df4:	0236      	lsls	r6, r6, #8
10000df6:	4235      	tst	r5, r6
10000df8:	d193      	bne.n	10000d22 <z_cbvprintf_impl+0x1f6>
10000dfa:	4e92      	ldr	r6, [pc, #584]	; (10001044 <z_cbvprintf_impl+0x518>)
10000dfc:	4235      	tst	r5, r6
10000dfe:	d122      	bne.n	10000e46 <z_cbvprintf_impl+0x31a>
10000e00:	2184      	movs	r1, #132	; 0x84
10000e02:	0289      	lsls	r1, r1, #10
10000e04:	420d      	tst	r5, r1
10000e06:	d039      	beq.n	10000e7c <z_cbvprintf_impl+0x350>
		conv->specifier_cat = SPECIFIER_SINT;
10000e08:	2507      	movs	r5, #7
10000e0a:	7a91      	ldrb	r1, [r2, #10]
10000e0c:	43a9      	bics	r1, r5
10000e0e:	4301      	orrs	r1, r0
10000e10:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000e12:	2178      	movs	r1, #120	; 0x78
10000e14:	400b      	ands	r3, r1
10000e16:	2b40      	cmp	r3, #64	; 0x40
10000e18:	d011      	beq.n	10000e3e <z_cbvprintf_impl+0x312>
	bool unsupported = false;
10000e1a:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
10000e1c:	aa12      	add	r2, sp, #72	; 0x48
10000e1e:	7a11      	ldrb	r1, [r2, #8]
10000e20:	0788      	lsls	r0, r1, #30
10000e22:	0fc0      	lsrs	r0, r0, #31
10000e24:	4303      	orrs	r3, r0
10000e26:	2002      	movs	r0, #2
10000e28:	005b      	lsls	r3, r3, #1
10000e2a:	4381      	bics	r1, r0
10000e2c:	4319      	orrs	r1, r3
10000e2e:	7211      	strb	r1, [r2, #8]
	return sp;
10000e30:	e6a4      	b.n	10000b7c <z_cbvprintf_impl+0x50>
		conv->specifier_cat = SPECIFIER_UINT;
10000e32:	2107      	movs	r1, #7
10000e34:	7a95      	ldrb	r5, [r2, #10]
10000e36:	438d      	bics	r5, r1
10000e38:	3905      	subs	r1, #5
10000e3a:	4329      	orrs	r1, r5
10000e3c:	e7e8      	b.n	10000e10 <z_cbvprintf_impl+0x2e4>
			conv->invalid = true;
10000e3e:	7a13      	ldrb	r3, [r2, #8]
10000e40:	4303      	orrs	r3, r0
		conv->invalid = true;
10000e42:	7213      	strb	r3, [r2, #8]
		break;
10000e44:	e7e9      	b.n	10000e1a <z_cbvprintf_impl+0x2ee>
		conv->specifier_cat = SPECIFIER_UINT;
10000e46:	2507      	movs	r5, #7
10000e48:	7a96      	ldrb	r6, [r2, #10]
10000e4a:	43ae      	bics	r6, r5
10000e4c:	3d05      	subs	r5, #5
10000e4e:	4335      	orrs	r5, r6
10000e50:	7295      	strb	r5, [r2, #10]
		if (conv->length_mod == LENGTH_UPPER_L) {
10000e52:	2578      	movs	r5, #120	; 0x78
10000e54:	402b      	ands	r3, r5
10000e56:	2b40      	cmp	r3, #64	; 0x40
10000e58:	d102      	bne.n	10000e60 <z_cbvprintf_impl+0x334>
			conv->invalid = true;
10000e5a:	7a15      	ldrb	r5, [r2, #8]
10000e5c:	4328      	orrs	r0, r5
10000e5e:	7210      	strb	r0, [r2, #8]
		if (conv->specifier == 'c') {
10000e60:	2963      	cmp	r1, #99	; 0x63
10000e62:	d1da      	bne.n	10000e1a <z_cbvprintf_impl+0x2ee>
		if (conv->length_mod != LENGTH_NONE) {
10000e64:	1e5a      	subs	r2, r3, #1
10000e66:	4193      	sbcs	r3, r2
10000e68:	e7ba      	b.n	10000de0 <z_cbvprintf_impl+0x2b4>
		conv->specifier_cat = SPECIFIER_PTR;
10000e6a:	2107      	movs	r1, #7
10000e6c:	7a90      	ldrb	r0, [r2, #10]
10000e6e:	4388      	bics	r0, r1
10000e70:	3904      	subs	r1, #4
10000e72:	4301      	orrs	r1, r0
10000e74:	7291      	strb	r1, [r2, #10]
		if (conv->length_mod != LENGTH_NONE) {
10000e76:	2278      	movs	r2, #120	; 0x78
10000e78:	4013      	ands	r3, r2
10000e7a:	e7f3      	b.n	10000e64 <z_cbvprintf_impl+0x338>
		conv->invalid = true;
10000e7c:	2301      	movs	r3, #1
10000e7e:	aa12      	add	r2, sp, #72	; 0x48
10000e80:	7a11      	ldrb	r1, [r2, #8]
10000e82:	430b      	orrs	r3, r1
10000e84:	e7dd      	b.n	10000e42 <z_cbvprintf_impl+0x316>
		} else if (conv->width_present) {
10000e86:	7a19      	ldrb	r1, [r3, #8]
10000e88:	297f      	cmp	r1, #127	; 0x7f
10000e8a:	d90f      	bls.n	10000eac <z_cbvprintf_impl+0x380>
			width = conv->width_value;
10000e8c:	68db      	ldr	r3, [r3, #12]
		int width = -1;
10000e8e:	9303      	str	r3, [sp, #12]
		if (conv->prec_star) {
10000e90:	ab12      	add	r3, sp, #72	; 0x48
10000e92:	0751      	lsls	r1, r2, #29
10000e94:	d50c      	bpl.n	10000eb0 <z_cbvprintf_impl+0x384>
			int arg = va_arg(ap, int);
10000e96:	cc04      	ldmia	r4!, {r2}
10000e98:	9206      	str	r2, [sp, #24]
			if (arg < 0) {
10000e9a:	2a00      	cmp	r2, #0
10000e9c:	da0c      	bge.n	10000eb8 <z_cbvprintf_impl+0x38c>
				conv->prec_present = false;
10000e9e:	2102      	movs	r1, #2
10000ea0:	7a5a      	ldrb	r2, [r3, #9]
10000ea2:	438a      	bics	r2, r1
10000ea4:	725a      	strb	r2, [r3, #9]
		int precision = -1;
10000ea6:	2301      	movs	r3, #1
10000ea8:	425b      	negs	r3, r3
10000eaa:	e004      	b.n	10000eb6 <z_cbvprintf_impl+0x38a>
		int width = -1;
10000eac:	2301      	movs	r3, #1
10000eae:	e674      	b.n	10000b9a <z_cbvprintf_impl+0x6e>
		} else if (conv->prec_present) {
10000eb0:	0792      	lsls	r2, r2, #30
10000eb2:	d5f8      	bpl.n	10000ea6 <z_cbvprintf_impl+0x37a>
			precision = conv->prec_value;
10000eb4:	691b      	ldr	r3, [r3, #16]
		int precision = -1;
10000eb6:	9306      	str	r3, [sp, #24]
		conv->pad0_value = 0;
10000eb8:	2500      	movs	r5, #0
10000eba:	a912      	add	r1, sp, #72	; 0x48
			= (enum specifier_cat_enum)conv->specifier_cat;
10000ebc:	7a8b      	ldrb	r3, [r1, #10]
			= (enum length_mod_enum)conv->length_mod;
10000ebe:	7a4a      	ldrb	r2, [r1, #9]
			= (enum specifier_cat_enum)conv->specifier_cat;
10000ec0:	075b      	lsls	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000ec2:	0652      	lsls	r2, r2, #25
		enum specifier_cat_enum specifier_cat
10000ec4:	0f5b      	lsrs	r3, r3, #29
			= (enum length_mod_enum)conv->length_mod;
10000ec6:	0f12      	lsrs	r2, r2, #28
		conv->pad0_value = 0;
10000ec8:	60cd      	str	r5, [r1, #12]
		conv->pad0_pre_exp = 0;
10000eca:	610d      	str	r5, [r1, #16]
		if (specifier_cat == SPECIFIER_SINT) {
10000ecc:	2b01      	cmp	r3, #1
10000ece:	d130      	bne.n	10000f32 <z_cbvprintf_impl+0x406>
			switch (length_mod) {
10000ed0:	1ed0      	subs	r0, r2, #3
10000ed2:	2804      	cmp	r0, #4
10000ed4:	d804      	bhi.n	10000ee0 <z_cbvprintf_impl+0x3b4>
10000ed6:	f7ff f967 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000eda:	450e      	.short	0x450e
10000edc:	0e45      	.short	0x0e45
10000ede:	0e          	.byte	0x0e
10000edf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
10000ee0:	6823      	ldr	r3, [r4, #0]
10000ee2:	17d8      	asrs	r0, r3, #31
10000ee4:	9312      	str	r3, [sp, #72]	; 0x48
10000ee6:	6048      	str	r0, [r1, #4]
			if (length_mod == LENGTH_HH) {
10000ee8:	2a01      	cmp	r2, #1
10000eea:	d109      	bne.n	10000f00 <z_cbvprintf_impl+0x3d4>
				value->sint = (signed char)value->sint;
10000eec:	b25b      	sxtb	r3, r3
				value->sint = (short)value->sint;
10000eee:	9312      	str	r3, [sp, #72]	; 0x48
10000ef0:	17db      	asrs	r3, r3, #31
10000ef2:	604b      	str	r3, [r1, #4]
10000ef4:	e006      	b.n	10000f04 <z_cbvprintf_impl+0x3d8>
					(sint_value_type)va_arg(ap, ptrdiff_t);
10000ef6:	cc08      	ldmia	r4!, {r3}
10000ef8:	9312      	str	r3, [sp, #72]	; 0x48
10000efa:	17db      	asrs	r3, r3, #31
					(uint_value_type)va_arg(ap, size_t);
10000efc:	604b      	str	r3, [r1, #4]
			} else if (length_mod == LENGTH_H) {
10000efe:	e002      	b.n	10000f06 <z_cbvprintf_impl+0x3da>
			} else if (length_mod == LENGTH_H) {
10000f00:	2a02      	cmp	r2, #2
10000f02:	d014      	beq.n	10000f2e <z_cbvprintf_impl+0x402>
				value->sint = va_arg(ap, int);
10000f04:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
10000f06:	a912      	add	r1, sp, #72	; 0x48
10000f08:	7a0b      	ldrb	r3, [r1, #8]
10000f0a:	2003      	movs	r0, #3
10000f0c:	001d      	movs	r5, r3
10000f0e:	4005      	ands	r5, r0
10000f10:	4203      	tst	r3, r0
10000f12:	d045      	beq.n	10000fa0 <z_cbvprintf_impl+0x474>
			OUTS(sp, fp);
10000f14:	9b07      	ldr	r3, [sp, #28]
10000f16:	9a08      	ldr	r2, [sp, #32]
10000f18:	9905      	ldr	r1, [sp, #20]
10000f1a:	9804      	ldr	r0, [sp, #16]
10000f1c:	f002 ff1c 	bl	10003d58 <outs>
10000f20:	2800      	cmp	r0, #0
10000f22:	da00      	bge.n	10000f26 <z_cbvprintf_impl+0x3fa>
10000f24:	e137      	b.n	10001196 <z_cbvprintf_impl+0x66a>
10000f26:	183f      	adds	r7, r7, r0
			continue;
10000f28:	9b07      	ldr	r3, [sp, #28]
10000f2a:	9308      	str	r3, [sp, #32]
10000f2c:	e605      	b.n	10000b3a <z_cbvprintf_impl+0xe>
				value->sint = (short)value->sint;
10000f2e:	b21b      	sxth	r3, r3
10000f30:	e7dd      	b.n	10000eee <z_cbvprintf_impl+0x3c2>
		} else if (specifier_cat == SPECIFIER_UINT) {
10000f32:	2b02      	cmp	r3, #2
10000f34:	d125      	bne.n	10000f82 <z_cbvprintf_impl+0x456>
			switch (length_mod) {
10000f36:	1ed0      	subs	r0, r2, #3
10000f38:	2804      	cmp	r0, #4
10000f3a:	d804      	bhi.n	10000f46 <z_cbvprintf_impl+0x41a>
10000f3c:	f7ff f934 	bl	100001a8 <__gnu_thumb1_case_uqi>
10000f40:	1912120d 	.word	0x1912120d
10000f44:	19          	.byte	0x19
10000f45:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
10000f46:	cc08      	ldmia	r4!, {r3}
			if (length_mod == LENGTH_HH) {
10000f48:	2a01      	cmp	r2, #1
10000f4a:	d016      	beq.n	10000f7a <z_cbvprintf_impl+0x44e>
				value->uint = va_arg(ap, unsigned int);
10000f4c:	9312      	str	r3, [sp, #72]	; 0x48
10000f4e:	604d      	str	r5, [r1, #4]
				value->uint = (unsigned short)value->uint;
10000f50:	b29b      	uxth	r3, r3
			} else if (length_mod == LENGTH_H) {
10000f52:	2a02      	cmp	r2, #2
10000f54:	d1d7      	bne.n	10000f06 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000f56:	9312      	str	r3, [sp, #72]	; 0x48
10000f58:	e7d5      	b.n	10000f06 <z_cbvprintf_impl+0x3da>
					value->uint = (wchar_t)va_arg(ap,
10000f5a:	cc08      	ldmia	r4!, {r3}
10000f5c:	9312      	str	r3, [sp, #72]	; 0x48
10000f5e:	2300      	movs	r3, #0
10000f60:	9313      	str	r3, [sp, #76]	; 0x4c
10000f62:	e7d0      	b.n	10000f06 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap,
10000f64:	2307      	movs	r3, #7
10000f66:	3407      	adds	r4, #7
10000f68:	439c      	bics	r4, r3
				value->uint =
10000f6a:	cc03      	ldmia	r4!, {r0, r1}
10000f6c:	9012      	str	r0, [sp, #72]	; 0x48
10000f6e:	9113      	str	r1, [sp, #76]	; 0x4c
			if (length_mod == LENGTH_HH) {
10000f70:	e7c9      	b.n	10000f06 <z_cbvprintf_impl+0x3da>
					(uint_value_type)va_arg(ap, size_t);
10000f72:	cc08      	ldmia	r4!, {r3}
10000f74:	9312      	str	r3, [sp, #72]	; 0x48
10000f76:	2300      	movs	r3, #0
10000f78:	e7c0      	b.n	10000efc <z_cbvprintf_impl+0x3d0>
				value->uint = (unsigned char)value->uint;
10000f7a:	b2db      	uxtb	r3, r3
10000f7c:	9312      	str	r3, [sp, #72]	; 0x48
10000f7e:	604d      	str	r5, [r1, #4]
10000f80:	e7c1      	b.n	10000f06 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_FP) {
10000f82:	2b04      	cmp	r3, #4
10000f84:	d108      	bne.n	10000f98 <z_cbvprintf_impl+0x46c>
					(sint_value_type)va_arg(ap, long long);
10000f86:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
10000f88:	3303      	adds	r3, #3
10000f8a:	439c      	bics	r4, r3
10000f8c:	6820      	ldr	r0, [r4, #0]
10000f8e:	6861      	ldr	r1, [r4, #4]
10000f90:	3408      	adds	r4, #8
10000f92:	9012      	str	r0, [sp, #72]	; 0x48
10000f94:	9113      	str	r1, [sp, #76]	; 0x4c
10000f96:	e7b6      	b.n	10000f06 <z_cbvprintf_impl+0x3da>
		} else if (specifier_cat == SPECIFIER_PTR) {
10000f98:	2b03      	cmp	r3, #3
10000f9a:	d1b4      	bne.n	10000f06 <z_cbvprintf_impl+0x3da>
			value->ptr = va_arg(ap, void *);
10000f9c:	cc08      	ldmia	r4!, {r3}
10000f9e:	e7da      	b.n	10000f56 <z_cbvprintf_impl+0x42a>
		switch (conv->specifier) {
10000fa0:	7ac8      	ldrb	r0, [r1, #11]
10000fa2:	2878      	cmp	r0, #120	; 0x78
10000fa4:	d8c0      	bhi.n	10000f28 <z_cbvprintf_impl+0x3fc>
10000fa6:	2862      	cmp	r0, #98	; 0x62
10000fa8:	d82b      	bhi.n	10001002 <z_cbvprintf_impl+0x4d6>
10000faa:	2825      	cmp	r0, #37	; 0x25
10000fac:	d100      	bne.n	10000fb0 <z_cbvprintf_impl+0x484>
10000fae:	e5cf      	b.n	10000b50 <z_cbvprintf_impl+0x24>
10000fb0:	2858      	cmp	r0, #88	; 0x58
10000fb2:	d1b9      	bne.n	10000f28 <z_cbvprintf_impl+0x3fc>
			bps = encode_uint(value->uint, conv, buf, bpe);
10000fb4:	9812      	ldr	r0, [sp, #72]	; 0x48
10000fb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
10000fb8:	231e      	movs	r3, #30
10000fba:	aa0a      	add	r2, sp, #40	; 0x28
10000fbc:	189b      	adds	r3, r3, r2
10000fbe:	9300      	str	r3, [sp, #0]
10000fc0:	aa14      	add	r2, sp, #80	; 0x50
10000fc2:	ab0c      	add	r3, sp, #48	; 0x30
10000fc4:	f002 fe7b 	bl	10003cbe <encode_uint>
			if (precision >= 0) {
10000fc8:	9b06      	ldr	r3, [sp, #24]
			bps = encode_uint(value->uint, conv, buf, bpe);
10000fca:	0006      	movs	r6, r0
			if (precision >= 0) {
10000fcc:	2b00      	cmp	r3, #0
10000fce:	db0d      	blt.n	10000fec <z_cbvprintf_impl+0x4c0>
				size_t len = bpe - bps;
10000fd0:	231e      	movs	r3, #30
				conv->flag_zero = false;
10000fd2:	2040      	movs	r0, #64	; 0x40
				size_t len = bpe - bps;
10000fd4:	aa0a      	add	r2, sp, #40	; 0x28
10000fd6:	189b      	adds	r3, r3, r2
				conv->flag_zero = false;
10000fd8:	aa12      	add	r2, sp, #72	; 0x48
10000fda:	7a11      	ldrb	r1, [r2, #8]
				size_t len = bpe - bps;
10000fdc:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
10000fde:	4381      	bics	r1, r0
10000fe0:	7211      	strb	r1, [r2, #8]
				if (len < (size_t)precision) {
10000fe2:	9906      	ldr	r1, [sp, #24]
10000fe4:	4299      	cmp	r1, r3
10000fe6:	d901      	bls.n	10000fec <z_cbvprintf_impl+0x4c0>
					conv->pad0_value = precision - (int)len;
10000fe8:	1acb      	subs	r3, r1, r3
10000fea:	9315      	str	r3, [sp, #84]	; 0x54
		if (bps == NULL) {
10000fec:	2e00      	cmp	r6, #0
10000fee:	d09b      	beq.n	10000f28 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
10000ff0:	231e      	movs	r3, #30
10000ff2:	aa0a      	add	r2, sp, #40	; 0x28
10000ff4:	189b      	adds	r3, r3, r2
10000ff6:	1b98      	subs	r0, r3, r6
		if (sign != 0) {
10000ff8:	9306      	str	r3, [sp, #24]
10000ffa:	2d00      	cmp	r5, #0
10000ffc:	d032      	beq.n	10001064 <z_cbvprintf_impl+0x538>
			nj_len += 1U;
10000ffe:	3001      	adds	r0, #1
10001000:	e030      	b.n	10001064 <z_cbvprintf_impl+0x538>
		switch (conv->specifier) {
10001002:	3863      	subs	r0, #99	; 0x63
10001004:	2815      	cmp	r0, #21
10001006:	d88f      	bhi.n	10000f28 <z_cbvprintf_impl+0x3fc>
10001008:	f7ff f8d8 	bl	100001bc <__gnu_thumb1_case_shi>
1000100c:	0068005e 	.word	0x0068005e
10001010:	ff8eff8e 	.word	0xff8eff8e
10001014:	ff8eff8e 	.word	0xff8eff8e
10001018:	ff8e0068 	.word	0xff8e0068
1000101c:	ff8eff8e 	.word	0xff8eff8e
10001020:	00a0ff8e 	.word	0x00a0ff8e
10001024:	007c007a 	.word	0x007c007a
10001028:	ff8eff8e 	.word	0xff8eff8e
1000102c:	ff8e001e 	.word	0xff8e001e
10001030:	ff8e007a 	.word	0xff8e007a
10001034:	007aff8e 	.word	0x007aff8e
10001038:	ffff87fd 	.word	0xffff87fd
1000103c:	00004002 	.word	0x00004002
10001040:	00000482 	.word	0x00000482
10001044:	00000801 	.word	0x00000801
			if (precision >= 0) {
10001048:	9b06      	ldr	r3, [sp, #24]
			bps = (const char *)value->ptr;
1000104a:	9e12      	ldr	r6, [sp, #72]	; 0x48
			if (precision >= 0) {
1000104c:	2b00      	cmp	r3, #0
1000104e:	db37      	blt.n	100010c0 <z_cbvprintf_impl+0x594>
				len = strnlen(bps, precision);
10001050:	0019      	movs	r1, r3
10001052:	0030      	movs	r0, r6
10001054:	f002 ff4a 	bl	10003eec <strnlen>
			bpe = bps + len;
10001058:	1833      	adds	r3, r6, r0
		char sign = 0;
1000105a:	2500      	movs	r5, #0
			bpe = bps + len;
1000105c:	9306      	str	r3, [sp, #24]
		if (bps == NULL) {
1000105e:	2e00      	cmp	r6, #0
10001060:	d100      	bne.n	10001064 <z_cbvprintf_impl+0x538>
10001062:	e761      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
		if (conv->altform_0c) {
10001064:	ab12      	add	r3, sp, #72	; 0x48
10001066:	7a9b      	ldrb	r3, [r3, #10]
10001068:	2210      	movs	r2, #16
1000106a:	0019      	movs	r1, r3
1000106c:	4011      	ands	r1, r2
1000106e:	910b      	str	r1, [sp, #44]	; 0x2c
10001070:	4213      	tst	r3, r2
10001072:	d100      	bne.n	10001076 <z_cbvprintf_impl+0x54a>
10001074:	e085      	b.n	10001182 <z_cbvprintf_impl+0x656>
			nj_len += 2U;
10001076:	3002      	adds	r0, #2
		nj_len += conv->pad0_value;
10001078:	9a15      	ldr	r2, [sp, #84]	; 0x54
1000107a:	920a      	str	r2, [sp, #40]	; 0x28
1000107c:	1880      	adds	r0, r0, r2
		if (conv->pad_fp) {
1000107e:	065b      	lsls	r3, r3, #25
10001080:	d501      	bpl.n	10001086 <z_cbvprintf_impl+0x55a>
			nj_len += conv->pad0_pre_exp;
10001082:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001084:	18c0      	adds	r0, r0, r3
		if (width > 0) {
10001086:	9b03      	ldr	r3, [sp, #12]
10001088:	2b00      	cmp	r3, #0
1000108a:	dc00      	bgt.n	1000108e <z_cbvprintf_impl+0x562>
1000108c:	e094      	b.n	100011b8 <z_cbvprintf_impl+0x68c>
			width -= (int)nj_len;
1000108e:	1a1b      	subs	r3, r3, r0
10001090:	9303      	str	r3, [sp, #12]
			if (!conv->flag_dash) {
10001092:	ab12      	add	r3, sp, #72	; 0x48
10001094:	7a1b      	ldrb	r3, [r3, #8]
10001096:	075a      	lsls	r2, r3, #29
10001098:	0fd1      	lsrs	r1, r2, #31
1000109a:	9108      	str	r1, [sp, #32]
1000109c:	2a00      	cmp	r2, #0
1000109e:	da00      	bge.n	100010a2 <z_cbvprintf_impl+0x576>
100010a0:	e08a      	b.n	100011b8 <z_cbvprintf_impl+0x68c>
				if (conv->flag_zero) {
100010a2:	065b      	lsls	r3, r3, #25
100010a4:	d400      	bmi.n	100010a8 <z_cbvprintf_impl+0x57c>
100010a6:	e078      	b.n	1000119a <z_cbvprintf_impl+0x66e>
					if (sign != 0) {
100010a8:	2d00      	cmp	r5, #0
100010aa:	d007      	beq.n	100010bc <z_cbvprintf_impl+0x590>
						OUTC(sign);
100010ac:	0028      	movs	r0, r5
100010ae:	9905      	ldr	r1, [sp, #20]
100010b0:	9b04      	ldr	r3, [sp, #16]
100010b2:	4798      	blx	r3
100010b4:	2800      	cmp	r0, #0
100010b6:	db6e      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
100010b8:	9d08      	ldr	r5, [sp, #32]
100010ba:	3701      	adds	r7, #1
					pad = '0';
100010bc:	2330      	movs	r3, #48	; 0x30
100010be:	e06d      	b.n	1000119c <z_cbvprintf_impl+0x670>
				len = strlen(bps);
100010c0:	0030      	movs	r0, r6
100010c2:	f002 ff0b 	bl	10003edc <strlen>
100010c6:	e7c7      	b.n	10001058 <z_cbvprintf_impl+0x52c>
			bpe = buf + 1;
100010c8:	2309      	movs	r3, #9
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
100010ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
100010cc:	ae0c      	add	r6, sp, #48	; 0x30
100010ce:	7032      	strb	r2, [r6, #0]
			bpe = buf + 1;
100010d0:	aa0a      	add	r2, sp, #40	; 0x28
100010d2:	189b      	adds	r3, r3, r2
		char sign = 0;
100010d4:	2500      	movs	r5, #0
		size_t nj_len = (bpe - bps);
100010d6:	2001      	movs	r0, #1
			bpe = buf + 1;
100010d8:	9306      	str	r3, [sp, #24]
100010da:	e7c3      	b.n	10001064 <z_cbvprintf_impl+0x538>
				sign = '+';
100010dc:	252b      	movs	r5, #43	; 0x2b
			if (conv->flag_plus) {
100010de:	071a      	lsls	r2, r3, #28
100010e0:	d402      	bmi.n	100010e8 <z_cbvprintf_impl+0x5bc>
			} else if (conv->flag_space) {
100010e2:	06db      	lsls	r3, r3, #27
100010e4:	0fdb      	lsrs	r3, r3, #31
100010e6:	015d      	lsls	r5, r3, #5
			sint = value->sint;
100010e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
100010ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
			if (sint < 0) {
100010ec:	2b00      	cmp	r3, #0
100010ee:	db00      	blt.n	100010f2 <z_cbvprintf_impl+0x5c6>
100010f0:	e760      	b.n	10000fb4 <z_cbvprintf_impl+0x488>
				value->uint = (uint_value_type)-sint;
100010f2:	2100      	movs	r1, #0
100010f4:	4250      	negs	r0, r2
100010f6:	4199      	sbcs	r1, r3
				sign = '-';
100010f8:	252d      	movs	r5, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
100010fa:	9012      	str	r0, [sp, #72]	; 0x48
100010fc:	9113      	str	r1, [sp, #76]	; 0x4c
100010fe:	e759      	b.n	10000fb4 <z_cbvprintf_impl+0x488>
		switch (conv->specifier) {
10001100:	2500      	movs	r5, #0
10001102:	e757      	b.n	10000fb4 <z_cbvprintf_impl+0x488>
			if (value->ptr != NULL) {
10001104:	9812      	ldr	r0, [sp, #72]	; 0x48
10001106:	ad12      	add	r5, sp, #72	; 0x48
10001108:	2800      	cmp	r0, #0
1000110a:	d034      	beq.n	10001176 <z_cbvprintf_impl+0x64a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
1000110c:	231e      	movs	r3, #30
1000110e:	aa0a      	add	r2, sp, #40	; 0x28
10001110:	189b      	adds	r3, r3, r2
10001112:	9300      	str	r3, [sp, #0]
10001114:	aa14      	add	r2, sp, #80	; 0x50
10001116:	ab0c      	add	r3, sp, #48	; 0x30
10001118:	2100      	movs	r1, #0
1000111a:	f002 fdd0 	bl	10003cbe <encode_uint>
				conv->altform_0c = true;
1000111e:	23ef      	movs	r3, #239	; 0xef
10001120:	896a      	ldrh	r2, [r5, #10]
				bps = encode_uint((uintptr_t)value->ptr, conv,
10001122:	0006      	movs	r6, r0
				conv->altform_0c = true;
10001124:	401a      	ands	r2, r3
10001126:	4b48      	ldr	r3, [pc, #288]	; (10001248 <z_cbvprintf_impl+0x71c>)
10001128:	4313      	orrs	r3, r2
1000112a:	816b      	strh	r3, [r5, #10]
		char sign = 0;
1000112c:	2500      	movs	r5, #0
			if (precision >= 0) {
1000112e:	9b06      	ldr	r3, [sp, #24]
10001130:	42ab      	cmp	r3, r5
10001132:	db00      	blt.n	10001136 <z_cbvprintf_impl+0x60a>
10001134:	e74c      	b.n	10000fd0 <z_cbvprintf_impl+0x4a4>
		if (bps == NULL) {
10001136:	42a8      	cmp	r0, r5
10001138:	d100      	bne.n	1000113c <z_cbvprintf_impl+0x610>
1000113a:	e6f5      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
		size_t nj_len = (bpe - bps);
1000113c:	231e      	movs	r3, #30
1000113e:	aa0a      	add	r2, sp, #40	; 0x28
10001140:	189b      	adds	r3, r3, r2
10001142:	1a18      	subs	r0, r3, r0
10001144:	231e      	movs	r3, #30
10001146:	189b      	adds	r3, r3, r2
10001148:	9306      	str	r3, [sp, #24]
1000114a:	e78b      	b.n	10001064 <z_cbvprintf_impl+0x538>
				store_count(conv, value->ptr, count);
1000114c:	9b12      	ldr	r3, [sp, #72]	; 0x48
	switch ((enum length_mod_enum)conv->length_mod) {
1000114e:	2a07      	cmp	r2, #7
10001150:	d900      	bls.n	10001154 <z_cbvprintf_impl+0x628>
10001152:	e6e9      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
10001154:	0010      	movs	r0, r2
10001156:	f7ff f827 	bl	100001a8 <__gnu_thumb1_case_uqi>
1000115a:	040c      	.short	0x040c
1000115c:	08080c06 	.word	0x08080c06
10001160:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
10001162:	701f      	strb	r7, [r3, #0]
		if (bps == NULL) {
10001164:	e6e0      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
		*(short *)dp = (short)count;
10001166:	801f      	strh	r7, [r3, #0]
		if (bps == NULL) {
10001168:	e6de      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
		*(intmax_t *)dp = (intmax_t)count;
1000116a:	17fa      	asrs	r2, r7, #31
1000116c:	601f      	str	r7, [r3, #0]
1000116e:	605a      	str	r2, [r3, #4]
		if (bps == NULL) {
10001170:	e6da      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
10001172:	601f      	str	r7, [r3, #0]
		if (bps == NULL) {
10001174:	e6d8      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
			bpe = bps + 5;
10001176:	4b35      	ldr	r3, [pc, #212]	; (1000124c <z_cbvprintf_impl+0x720>)
		char sign = 0;
10001178:	0005      	movs	r5, r0
1000117a:	4e35      	ldr	r6, [pc, #212]	; (10001250 <z_cbvprintf_impl+0x724>)
		size_t nj_len = (bpe - bps);
1000117c:	2005      	movs	r0, #5
			bpe = bps + 5;
1000117e:	9306      	str	r3, [sp, #24]
10001180:	e770      	b.n	10001064 <z_cbvprintf_impl+0x538>
		} else if (conv->altform_0) {
10001182:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
10001184:	0fd2      	lsrs	r2, r2, #31
10001186:	1880      	adds	r0, r0, r2
10001188:	e776      	b.n	10001078 <z_cbvprintf_impl+0x54c>
					OUTC(pad);
1000118a:	9905      	ldr	r1, [sp, #20]
1000118c:	9809      	ldr	r0, [sp, #36]	; 0x24
1000118e:	9b04      	ldr	r3, [sp, #16]
10001190:	4798      	blx	r3
10001192:	2800      	cmp	r0, #0
10001194:	da05      	bge.n	100011a2 <z_cbvprintf_impl+0x676>
#undef OUTS
#undef OUTC
}
10001196:	b019      	add	sp, #100	; 0x64
10001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
				char pad = ' ';
1000119a:	2320      	movs	r3, #32
					pad = '0';
1000119c:	9309      	str	r3, [sp, #36]	; 0x24
1000119e:	9b03      	ldr	r3, [sp, #12]
100011a0:	9308      	str	r3, [sp, #32]
				while (width-- > 0) {
100011a2:	9b08      	ldr	r3, [sp, #32]
100011a4:	001a      	movs	r2, r3
100011a6:	3a01      	subs	r2, #1
100011a8:	9208      	str	r2, [sp, #32]
100011aa:	2b00      	cmp	r3, #0
100011ac:	dced      	bgt.n	1000118a <z_cbvprintf_impl+0x65e>
100011ae:	9a03      	ldr	r2, [sp, #12]
100011b0:	19d7      	adds	r7, r2, r7
100011b2:	1aff      	subs	r7, r7, r3
100011b4:	9b08      	ldr	r3, [sp, #32]
100011b6:	9303      	str	r3, [sp, #12]
		if (sign != 0) {
100011b8:	2d00      	cmp	r5, #0
100011ba:	d006      	beq.n	100011ca <z_cbvprintf_impl+0x69e>
			OUTC(sign);
100011bc:	0028      	movs	r0, r5
100011be:	9905      	ldr	r1, [sp, #20]
100011c0:	9b04      	ldr	r3, [sp, #16]
100011c2:	4798      	blx	r3
100011c4:	2800      	cmp	r0, #0
100011c6:	dbe6      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
100011c8:	3701      	adds	r7, #1
			if (conv->altform_0c | conv->altform_0) {
100011ca:	ab12      	add	r3, sp, #72	; 0x48
100011cc:	7a9b      	ldrb	r3, [r3, #10]
100011ce:	06da      	lsls	r2, r3, #27
100011d0:	d401      	bmi.n	100011d6 <z_cbvprintf_impl+0x6aa>
100011d2:	071b      	lsls	r3, r3, #28
100011d4:	d506      	bpl.n	100011e4 <z_cbvprintf_impl+0x6b8>
				OUTC('0');
100011d6:	2030      	movs	r0, #48	; 0x30
100011d8:	9905      	ldr	r1, [sp, #20]
100011da:	9b04      	ldr	r3, [sp, #16]
100011dc:	4798      	blx	r3
100011de:	2800      	cmp	r0, #0
100011e0:	dbd9      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
100011e2:	3701      	adds	r7, #1
			if (conv->altform_0c) {
100011e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100011e6:	2b00      	cmp	r3, #0
100011e8:	d007      	beq.n	100011fa <z_cbvprintf_impl+0x6ce>
				OUTC(conv->specifier);
100011ea:	ab12      	add	r3, sp, #72	; 0x48
100011ec:	7ad8      	ldrb	r0, [r3, #11]
100011ee:	9905      	ldr	r1, [sp, #20]
100011f0:	9b04      	ldr	r3, [sp, #16]
100011f2:	4798      	blx	r3
100011f4:	2800      	cmp	r0, #0
100011f6:	dbce      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
100011f8:	3701      	adds	r7, #1
				while (width-- > 0) {
100011fa:	003d      	movs	r5, r7
100011fc:	e006      	b.n	1000120c <z_cbvprintf_impl+0x6e0>
				OUTC('0');
100011fe:	2030      	movs	r0, #48	; 0x30
10001200:	9905      	ldr	r1, [sp, #20]
10001202:	9b04      	ldr	r3, [sp, #16]
10001204:	4798      	blx	r3
10001206:	2800      	cmp	r0, #0
10001208:	dbc5      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
1000120a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
1000120c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000120e:	19db      	adds	r3, r3, r7
10001210:	1b5b      	subs	r3, r3, r5
10001212:	2b00      	cmp	r3, #0
10001214:	dcf3      	bgt.n	100011fe <z_cbvprintf_impl+0x6d2>
			OUTS(bps, bpe);
10001216:	0032      	movs	r2, r6
10001218:	9b06      	ldr	r3, [sp, #24]
1000121a:	9905      	ldr	r1, [sp, #20]
1000121c:	9804      	ldr	r0, [sp, #16]
1000121e:	f002 fd9b 	bl	10003d58 <outs>
10001222:	2800      	cmp	r0, #0
10001224:	dbb7      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
10001226:	1947      	adds	r7, r0, r5
10001228:	003d      	movs	r5, r7
		while (width > 0) {
1000122a:	9b03      	ldr	r3, [sp, #12]
1000122c:	195b      	adds	r3, r3, r5
1000122e:	1bdb      	subs	r3, r3, r7
10001230:	2b00      	cmp	r3, #0
10001232:	dc00      	bgt.n	10001236 <z_cbvprintf_impl+0x70a>
10001234:	e678      	b.n	10000f28 <z_cbvprintf_impl+0x3fc>
			OUTC(' ');
10001236:	2020      	movs	r0, #32
10001238:	9905      	ldr	r1, [sp, #20]
1000123a:	9b04      	ldr	r3, [sp, #16]
1000123c:	4798      	blx	r3
1000123e:	2800      	cmp	r0, #0
10001240:	dba9      	blt.n	10001196 <z_cbvprintf_impl+0x66a>
10001242:	3701      	adds	r7, #1
			--width;
10001244:	e7f1      	b.n	1000122a <z_cbvprintf_impl+0x6fe>
10001246:	46c0      	nop			; (mov r8, r8)
10001248:	00007810 	.word	0x00007810
1000124c:	10004cc4 	.word	0x10004cc4
10001250:	10004cbf 	.word	0x10004cbf

10001254 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
10001254:	b5f0      	push	{r4, r5, r6, r7, lr}
10001256:	b085      	sub	sp, #20
10001258:	9001      	str	r0, [sp, #4]
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
1000125a:	482f      	ldr	r0, [pc, #188]	; (10001318 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
1000125c:	9103      	str	r1, [sp, #12]
	if (atomic_inc(&initialized) != 0) {
1000125e:	f002 fd9c 	bl	10003d9a <atomic_inc>
10001262:	1e06      	subs	r6, r0, #0
10001264:	d10a      	bne.n	1000127c <z_log_init.isra.0+0x28>
	uint32_t mask = 0;
10001266:	0004      	movs	r4, r0
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
10001268:	2701      	movs	r7, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
1000126a:	4d2c      	ldr	r5, [pc, #176]	; (1000131c <z_log_init.isra.0+0xc8>)
1000126c:	4b2c      	ldr	r3, [pc, #176]	; (10001320 <z_log_init.isra.0+0xcc>)
1000126e:	429d      	cmp	r5, r3
10001270:	d306      	bcc.n	10001280 <z_log_init.isra.0+0x2c>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
10001272:	9b01      	ldr	r3, [sp, #4]
10001274:	2b00      	cmp	r3, #0
10001276:	d001      	beq.n	1000127c <z_log_init.isra.0+0x28>
		while (mask) {
10001278:	2c00      	cmp	r4, #0
1000127a:	d11f      	bne.n	100012bc <z_log_init.isra.0+0x68>
			}
		}
	}

	return mask;
}
1000127c:	b005      	add	sp, #20
1000127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (backend->autostart) {
10001280:	7b2b      	ldrb	r3, [r5, #12]
10001282:	2b00      	cmp	r3, #0
10001284:	d010      	beq.n	100012a8 <z_log_init.isra.0+0x54>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
10001286:	682b      	ldr	r3, [r5, #0]
10001288:	68db      	ldr	r3, [r3, #12]
1000128a:	2b00      	cmp	r3, #0
1000128c:	d001      	beq.n	10001292 <z_log_init.isra.0+0x3e>
		backend->api->init(backend);
1000128e:	0028      	movs	r0, r5
10001290:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
10001292:	682b      	ldr	r3, [r5, #0]
10001294:	691b      	ldr	r3, [r3, #16]
10001296:	2b00      	cmp	r3, #0
10001298:	d108      	bne.n	100012ac <z_log_init.isra.0+0x58>
				log_backend_enable(backend,
1000129a:	686b      	ldr	r3, [r5, #4]
1000129c:	2204      	movs	r2, #4
1000129e:	0028      	movs	r0, r5
100012a0:	6819      	ldr	r1, [r3, #0]
100012a2:	f000 f8c5 	bl	10001430 <log_backend_enable>
			i++;
100012a6:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100012a8:	3510      	adds	r5, #16
100012aa:	e7df      	b.n	1000126c <z_log_init.isra.0+0x18>
		return backend->api->is_ready(backend);
100012ac:	0028      	movs	r0, r5
100012ae:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
100012b0:	2800      	cmp	r0, #0
100012b2:	d0f2      	beq.n	1000129a <z_log_init.isra.0+0x46>
				mask |= BIT(i);
100012b4:	003b      	movs	r3, r7
100012b6:	40b3      	lsls	r3, r6
100012b8:	431c      	orrs	r4, r3
100012ba:	e7f4      	b.n	100012a6 <z_log_init.isra.0+0x52>
100012bc:	0027      	movs	r7, r4
		uint32_t i = __builtin_ctz(mask_cpy);
100012be:	0020      	movs	r0, r4
100012c0:	f7ff f840 	bl	10000344 <__ctzsi2>
		mask_cpy &= ~BIT(i);
100012c4:	2301      	movs	r3, #1
100012c6:	4083      	lsls	r3, r0
100012c8:	43da      	mvns	r2, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100012ca:	4e14      	ldr	r6, [pc, #80]	; (1000131c <z_log_init.isra.0+0xc8>)
100012cc:	0105      	lsls	r5, r0, #4
		mask_cpy &= ~BIT(i);
100012ce:	439c      	bics	r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100012d0:	1973      	adds	r3, r6, r5
100012d2:	9301      	str	r3, [sp, #4]
100012d4:	7b1b      	ldrb	r3, [r3, #12]
		mask_cpy &= ~BIT(i);
100012d6:	9202      	str	r2, [sp, #8]
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
100012d8:	2b00      	cmp	r3, #0
100012da:	d00c      	beq.n	100012f6 <z_log_init.isra.0+0xa2>
	if (backend->api->is_ready != NULL) {
100012dc:	59ab      	ldr	r3, [r5, r6]
100012de:	691b      	ldr	r3, [r3, #16]
100012e0:	2b00      	cmp	r3, #0
100012e2:	d113      	bne.n	1000130c <z_log_init.isra.0+0xb8>
			mask &= ~BIT(i);
100012e4:	9b02      	ldr	r3, [sp, #8]
					   backend->cb->ctx,
100012e6:	1976      	adds	r6, r6, r5
			mask &= ~BIT(i);
100012e8:	401f      	ands	r7, r3
			log_backend_enable(backend,
100012ea:	6873      	ldr	r3, [r6, #4]
100012ec:	2204      	movs	r2, #4
100012ee:	6819      	ldr	r1, [r3, #0]
100012f0:	9801      	ldr	r0, [sp, #4]
100012f2:	f000 f89d 	bl	10001430 <log_backend_enable>
	while (mask_cpy) {
100012f6:	2c00      	cmp	r4, #0
100012f8:	d1e1      	bne.n	100012be <z_log_init.isra.0+0x6a>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
100012fa:	9b03      	ldr	r3, [sp, #12]
100012fc:	2b00      	cmp	r3, #0
100012fe:	d003      	beq.n	10001308 <z_log_init.isra.0+0xb4>
10001300:	2064      	movs	r0, #100	; 0x64
10001302:	2100      	movs	r1, #0
10001304:	f002 f828 	bl	10003358 <z_impl_k_sleep>
10001308:	003c      	movs	r4, r7
1000130a:	e7b5      	b.n	10001278 <z_log_init.isra.0+0x24>
		return backend->api->is_ready(backend);
1000130c:	9801      	ldr	r0, [sp, #4]
1000130e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
10001310:	2800      	cmp	r0, #0
10001312:	d1f0      	bne.n	100012f6 <z_log_init.isra.0+0xa2>
10001314:	e7e6      	b.n	100012e4 <z_log_init.isra.0+0x90>
10001316:	46c0      	nop			; (mov r8, r8)
10001318:	200002b0 	.word	0x200002b0
1000131c:	10004a68 	.word	0x10004a68
10001320:	10004a78 	.word	0x10004a78

10001324 <log_format_func_t_get>:
	return format_table[log_type];
10001324:	4b01      	ldr	r3, [pc, #4]	; (1000132c <log_format_func_t_get+0x8>)
10001326:	0080      	lsls	r0, r0, #2
10001328:	58c0      	ldr	r0, [r0, r3]
}
1000132a:	4770      	bx	lr
1000132c:	10004a88 	.word	0x10004a88

10001330 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
10001330:	0003      	movs	r3, r0
10001332:	b510      	push	{r4, lr}
10001334:	0008      	movs	r0, r1
	if (timestamp_getter == NULL) {
10001336:	2b00      	cmp	r3, #0
10001338:	d005      	beq.n	10001346 <log_set_timestamp_func+0x16>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
1000133a:	4a04      	ldr	r2, [pc, #16]	; (1000134c <log_set_timestamp_func+0x1c>)
1000133c:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
1000133e:	f000 fa75 	bl	1000182c <log_output_timestamp_freq_set>
	}

	return 0;
10001342:	2000      	movs	r0, #0
}
10001344:	bd10      	pop	{r4, pc}
		return -EINVAL;
10001346:	2016      	movs	r0, #22
10001348:	4240      	negs	r0, r0
1000134a:	e7fb      	b.n	10001344 <log_set_timestamp_func+0x14>
1000134c:	200000c0 	.word	0x200000c0

10001350 <log_core_init>:
	panic_mode = false;
10001350:	2300      	movs	r3, #0
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10001352:	21fa      	movs	r1, #250	; 0xfa
	panic_mode = false;
10001354:	4a05      	ldr	r2, [pc, #20]	; (1000136c <log_core_init+0x1c>)
{
10001356:	b510      	push	{r4, lr}
	panic_mode = false;
10001358:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
1000135a:	4a05      	ldr	r2, [pc, #20]	; (10001370 <log_core_init+0x20>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
1000135c:	4805      	ldr	r0, [pc, #20]	; (10001374 <log_core_init+0x24>)
	dropped_cnt = 0;
1000135e:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
10001360:	4a05      	ldr	r2, [pc, #20]	; (10001378 <log_core_init+0x28>)
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10001362:	0089      	lsls	r1, r1, #2
	buffered_cnt = 0;
10001364:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_lf_get_timestamp, 1000U);
10001366:	f7ff ffe3 	bl	10001330 <log_set_timestamp_func>
}
1000136a:	bd10      	pop	{r4, pc}
1000136c:	20000360 	.word	0x20000360
10001370:	200002a8 	.word	0x200002a8
10001374:	10003d8b 	.word	0x10003d8b
10001378:	200002ac 	.word	0x200002ac

1000137c <z_impl_log_panic>:

void z_impl_log_panic(void)
{
1000137c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
1000137e:	4d0c      	ldr	r5, [pc, #48]	; (100013b0 <z_impl_log_panic+0x34>)
10001380:	7829      	ldrb	r1, [r5, #0]
10001382:	2900      	cmp	r1, #0
10001384:	d108      	bne.n	10001398 <z_impl_log_panic+0x1c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
10001386:	2001      	movs	r0, #1
10001388:	f7ff ff64 	bl	10001254 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
1000138c:	4c09      	ldr	r4, [pc, #36]	; (100013b4 <z_impl_log_panic+0x38>)
1000138e:	4b0a      	ldr	r3, [pc, #40]	; (100013b8 <z_impl_log_panic+0x3c>)
10001390:	429c      	cmp	r4, r3
10001392:	d302      	bcc.n	1000139a <z_impl_log_panic+0x1e>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
10001394:	2301      	movs	r3, #1
10001396:	702b      	strb	r3, [r5, #0]
}
10001398:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
1000139a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
1000139c:	795b      	ldrb	r3, [r3, #5]
1000139e:	2b00      	cmp	r3, #0
100013a0:	d003      	beq.n	100013aa <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
100013a2:	6823      	ldr	r3, [r4, #0]
100013a4:	0020      	movs	r0, r4
100013a6:	689b      	ldr	r3, [r3, #8]
100013a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100013aa:	3410      	adds	r4, #16
100013ac:	e7ef      	b.n	1000138e <z_impl_log_panic+0x12>
100013ae:	46c0      	nop			; (mov r8, r8)
100013b0:	20000360 	.word	0x20000360
100013b4:	10004a68 	.word	0x10004a68
100013b8:	10004a78 	.word	0x10004a78

100013bc <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
100013bc:	b510      	push	{r4, lr}
100013be:	0004      	movs	r4, r0
	atomic_inc(&dropped_cnt);
100013c0:	4804      	ldr	r0, [pc, #16]	; (100013d4 <z_log_dropped+0x18>)
100013c2:	f002 fcea 	bl	10003d9a <atomic_inc>
	if (buffered) {
100013c6:	2c00      	cmp	r4, #0
100013c8:	d003      	beq.n	100013d2 <z_log_dropped+0x16>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SUB);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_sub(target, value);
100013ca:	2101      	movs	r1, #1
100013cc:	4802      	ldr	r0, [pc, #8]	; (100013d8 <z_log_dropped+0x1c>)
100013ce:	f003 fa13 	bl	100047f8 <z_impl_atomic_sub>
		atomic_dec(&buffered_cnt);
	}
}
100013d2:	bd10      	pop	{r4, pc}
100013d4:	200002a8 	.word	0x200002a8
100013d8:	200002ac 	.word	0x200002ac

100013dc <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
100013dc:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
100013de:	4b0a      	ldr	r3, [pc, #40]	; (10001408 <z_log_msg_commit+0x2c>)
{
100013e0:	0005      	movs	r5, r0
	msg->hdr.timestamp = timestamp_func();
100013e2:	681b      	ldr	r3, [r3, #0]
100013e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100013e6:	4c09      	ldr	r4, [pc, #36]	; (1000140c <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
100013e8:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
100013ea:	4b09      	ldr	r3, [pc, #36]	; (10001410 <z_log_msg_commit+0x34>)
100013ec:	429c      	cmp	r4, r3
100013ee:	d300      	bcc.n	100013f2 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
100013f0:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
100013f2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
100013f4:	795b      	ldrb	r3, [r3, #5]
100013f6:	2b00      	cmp	r3, #0
100013f8:	d004      	beq.n	10001404 <z_log_msg_commit+0x28>
	backend->api->process(backend, msg);
100013fa:	6823      	ldr	r3, [r4, #0]
100013fc:	0029      	movs	r1, r5
100013fe:	0020      	movs	r0, r4
10001400:	681b      	ldr	r3, [r3, #0]
10001402:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
10001404:	3410      	adds	r4, #16
10001406:	e7f0      	b.n	100013ea <z_log_msg_commit+0xe>
10001408:	200000c0 	.word	0x200000c0
1000140c:	10004a68 	.word	0x10004a68
10001410:	10004a78 	.word	0x10004a78

10001414 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
10001414:	4b04      	ldr	r3, [pc, #16]	; (10001428 <log_source_name_get+0x14>)
10001416:	4a05      	ldr	r2, [pc, #20]	; (1000142c <log_source_name_get+0x18>)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
			return __log_const_start[source_id].name;
		} else {
			return NULL;
10001418:	2000      	movs	r0, #0
1000141a:	1a9b      	subs	r3, r3, r2
1000141c:	08db      	lsrs	r3, r3, #3
		if (source_id < log_src_cnt_get(domain_id)) {
1000141e:	4299      	cmp	r1, r3
10001420:	d201      	bcs.n	10001426 <log_source_name_get+0x12>
			return __log_const_start[source_id].name;
10001422:	00c9      	lsls	r1, r1, #3
10001424:	5888      	ldr	r0, [r1, r2]
		}
	}

	return link_source_name_get(domain_id, source_id);
}
10001426:	4770      	bx	lr
10001428:	10004a68 	.word	0x10004a68
1000142c:	10004a30 	.word	0x10004a30

10001430 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
10001430:	4b08      	ldr	r3, [pc, #32]	; (10001454 <log_backend_enable+0x24>)
{
10001432:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
10001434:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
10001436:	6844      	ldr	r4, [r0, #4]
10001438:	111b      	asrs	r3, r3, #4
1000143a:	3301      	adds	r3, #1
1000143c:	7123      	strb	r3, [r4, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
1000143e:	6843      	ldr	r3, [r0, #4]
10001440:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
10001442:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
10001444:	6843      	ldr	r3, [r0, #4]
10001446:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
10001448:	6843      	ldr	r3, [r0, #4]
1000144a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
1000144c:	f002 fcbe 	bl	10003dcc <z_log_notify_backend_enabled>
}
10001450:	bd10      	pop	{r4, pc}
10001452:	46c0      	nop			; (mov r8, r8)
10001454:	10004a68 	.word	0x10004a68

10001458 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
10001458:	b5f0      	push	{r4, r5, r6, r7, lr}
1000145a:	0004      	movs	r4, r0
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
1000145c:	2000      	movs	r0, #0
{
1000145e:	b087      	sub	sp, #28
10001460:	af02      	add	r7, sp, #8
10001462:	607b      	str	r3, [r7, #4]
	if (fmt) {
10001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
{
10001466:	000e      	movs	r6, r1
10001468:	0015      	movs	r5, r2
	if (fmt) {
1000146a:	4283      	cmp	r3, r0
1000146c:	d007      	beq.n	1000147e <z_impl_z_log_msg_runtime_vcreate+0x26>
		va_copy(ap2, ap);
1000146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10001470:	2110      	movs	r1, #16
		va_copy(ap2, ap);
10001472:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
10001474:	9300      	str	r3, [sp, #0]
10001476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10001478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
1000147a:	f7ff f969 	bl	10000750 <cbvprintf_package>
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
1000147e:	2207      	movs	r2, #7
10001480:	0023      	movs	r3, r4
10001482:	4015      	ands	r5, r2
10001484:	4013      	ands	r3, r2
10001486:	00db      	lsls	r3, r3, #3
10001488:	4915      	ldr	r1, [pc, #84]	; (100014e0 <z_impl_z_log_msg_runtime_vcreate+0x88>)
1000148a:	01ad      	lsls	r5, r5, #6
1000148c:	431d      	orrs	r5, r3
1000148e:	0243      	lsls	r3, r0, #9
10001490:	400b      	ands	r3, r1
10001492:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001494:	6abc      	ldr	r4, [r7, #40]	; 0x28
	struct log_msg_desc desc =
10001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
10001498:	3417      	adds	r4, #23
	struct log_msg_desc desc =
1000149a:	051b      	lsls	r3, r3, #20
1000149c:	431d      	orrs	r5, r3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
1000149e:	1823      	adds	r3, r4, r0
100014a0:	4393      	bics	r3, r2
100014a2:	3303      	adds	r3, #3
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
100014a4:	3a04      	subs	r2, #4
100014a6:	4393      	bics	r3, r2
100014a8:	3307      	adds	r3, #7
100014aa:	40d3      	lsrs	r3, r2
100014ac:	4093      	lsls	r3, r2
100014ae:	466a      	mov	r2, sp
100014b0:	1ad3      	subs	r3, r2, r3
100014b2:	469d      	mov	sp, r3
		pkg = msg->data;
	}

	if (pkg && fmt) {
100014b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		msg = alloca(msg_wlen * sizeof(int));
100014b6:	ac02      	add	r4, sp, #8
	if (pkg && fmt) {
100014b8:	2b00      	cmp	r3, #0
100014ba:	d008      	beq.n	100014ce <z_impl_z_log_msg_runtime_vcreate+0x76>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
100014bc:	0001      	movs	r1, r0
100014be:	0020      	movs	r0, r4
100014c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100014c2:	3010      	adds	r0, #16
100014c4:	9300      	str	r3, [sp, #0]
100014c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100014c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100014ca:	f7ff f941 	bl	10000750 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
100014ce:	002a      	movs	r2, r5
100014d0:	0031      	movs	r1, r6
100014d2:	0020      	movs	r0, r4
100014d4:	687b      	ldr	r3, [r7, #4]
100014d6:	f002 fc7c 	bl	10003dd2 <z_log_msg_finalize>
	}
}
100014da:	46bd      	mov	sp, r7
100014dc:	b005      	add	sp, #20
100014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100014e0:	000ffe00 	.word	0x000ffe00

100014e4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
100014e4:	b40e      	push	{r1, r2, r3}
100014e6:	b517      	push	{r0, r1, r2, r4, lr}
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
100014e8:	4c05      	ldr	r4, [pc, #20]	; (10001500 <print_formatted+0x1c>)
{
100014ea:	ab05      	add	r3, sp, #20
100014ec:	cb04      	ldmia	r3!, {r2}
100014ee:	0001      	movs	r1, r0
	length = cbvprintf(out_func, (void *)output, fmt, args);
100014f0:	0020      	movs	r0, r4
	va_start(args, fmt);
100014f2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
100014f4:	f002 fcae 	bl	10003e54 <cbvprintf>
	va_end(args);

	return length;
}
100014f8:	bc1e      	pop	{r1, r2, r3, r4}
100014fa:	bc08      	pop	{r3}
100014fc:	b003      	add	sp, #12
100014fe:	4718      	bx	r3
10001500:	10003e05 	.word	0x10003e05

10001504 <newline_print>:

	return total;
}

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
10001504:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
10001506:	06cb      	lsls	r3, r1, #27
10001508:	d404      	bmi.n	10001514 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
1000150a:	0689      	lsls	r1, r1, #26
1000150c:	d503      	bpl.n	10001516 <newline_print+0x12>
		print_formatted(ctx, "\n");
1000150e:	4903      	ldr	r1, [pc, #12]	; (1000151c <newline_print+0x18>)
	} else {
		print_formatted(ctx, "\r\n");
10001510:	f7ff ffe8 	bl	100014e4 <print_formatted>
	}
}
10001514:	bd10      	pop	{r4, pc}
		print_formatted(ctx, "\r\n");
10001516:	4902      	ldr	r1, [pc, #8]	; (10001520 <newline_print+0x1c>)
10001518:	e7fa      	b.n	10001510 <newline_print+0xc>
1000151a:	46c0      	nop			; (mov r8, r8)
1000151c:	10004cd3 	.word	0x10004cd3
10001520:	10004cd2 	.word	0x10004cd2

10001524 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
10001524:	b5f0      	push	{r4, r5, r6, r7, lr}
10001526:	b08f      	sub	sp, #60	; 0x3c
10001528:	9306      	str	r3, [sp, #24]
1000152a:	ab14      	add	r3, sp, #80	; 0x50
1000152c:	781b      	ldrb	r3, [r3, #0]
1000152e:	0007      	movs	r7, r0
10001530:	000c      	movs	r4, r1
10001532:	9208      	str	r2, [sp, #32]
10001534:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
10001536:	2b00      	cmp	r3, #0
10001538:	d100      	bne.n	1000153c <log_output_process+0x18>
1000153a:	e09c      	b.n	10001676 <log_output_process+0x152>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
1000153c:	2502      	movs	r5, #2
1000153e:	9b18      	ldr	r3, [sp, #96]	; 0x60
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10001540:	9a18      	ldr	r2, [sp, #96]	; 0x60
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
10001542:	401d      	ands	r5, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
10001544:	2301      	movs	r3, #1
10001546:	401a      	ands	r2, r3
10001548:	920a      	str	r2, [sp, #40]	; 0x28
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
1000154a:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000154c:	3307      	adds	r3, #7
1000154e:	401a      	ands	r2, r3
10001550:	920b      	str	r2, [sp, #44]	; 0x2c
	uint32_t length = 0U;
10001552:	2600      	movs	r6, #0
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
10001554:	f002 fc3b 	bl	10003dce <z_log_get_tag>
10001558:	0002      	movs	r2, r0
	if (tag) {
1000155a:	42b0      	cmp	r0, r6
1000155c:	d004      	beq.n	10001568 <log_output_process+0x44>
		length += print_formatted(output, "%s ", tag);
1000155e:	0038      	movs	r0, r7
10001560:	4983      	ldr	r1, [pc, #524]	; (10001770 <log_output_process+0x24c>)
10001562:	f7ff ffbf 	bl	100014e4 <print_formatted>
10001566:	0006      	movs	r6, r0
	if (stamp) {
10001568:	2d00      	cmp	r5, #0
1000156a:	d009      	beq.n	10001580 <log_output_process+0x5c>
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
1000156c:	2344      	movs	r3, #68	; 0x44
	if (!format) {
1000156e:	9a18      	ldr	r2, [sp, #96]	; 0x60
10001570:	421a      	tst	r2, r3
10001572:	d144      	bne.n	100015fe <log_output_process+0xda>
		length = print_formatted(output, "[%08lu] ", timestamp);
10001574:	0022      	movs	r2, r4
10001576:	0038      	movs	r0, r7
10001578:	497e      	ldr	r1, [pc, #504]	; (10001774 <log_output_process+0x250>)
1000157a:	f7ff ffb3 	bl	100014e4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
1000157e:	1836      	adds	r6, r6, r0
	if (color) {
10001580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10001582:	2b00      	cmp	r3, #0
10001584:	d00a      	beq.n	1000159c <log_output_process+0x78>
		const char *log_color = start && (colors[level] != NULL) ?
10001586:	9a05      	ldr	r2, [sp, #20]
10001588:	4b7b      	ldr	r3, [pc, #492]	; (10001778 <log_output_process+0x254>)
1000158a:	0092      	lsls	r2, r2, #2
1000158c:	58d2      	ldr	r2, [r2, r3]
1000158e:	2a00      	cmp	r2, #0
10001590:	d100      	bne.n	10001594 <log_output_process+0x70>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
10001592:	4a7a      	ldr	r2, [pc, #488]	; (1000177c <log_output_process+0x258>)
		print_formatted(output, "%s", log_color);
10001594:	0038      	movs	r0, r7
10001596:	497a      	ldr	r1, [pc, #488]	; (10001780 <log_output_process+0x25c>)
10001598:	f7ff ffa4 	bl	100014e4 <print_formatted>
	int total = 0;
1000159c:	2400      	movs	r4, #0
	if (level_on) {
1000159e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
100015a0:	42a3      	cmp	r3, r4
100015a2:	d008      	beq.n	100015b6 <log_output_process+0x92>
		total += print_formatted(output, "<%s> ", severity[level]);
100015a4:	9a05      	ldr	r2, [sp, #20]
100015a6:	4b77      	ldr	r3, [pc, #476]	; (10001784 <log_output_process+0x260>)
100015a8:	0092      	lsls	r2, r2, #2
100015aa:	0038      	movs	r0, r7
100015ac:	4976      	ldr	r1, [pc, #472]	; (10001788 <log_output_process+0x264>)
100015ae:	58d2      	ldr	r2, [r2, r3]
100015b0:	f7ff ff98 	bl	100014e4 <print_formatted>
100015b4:	0004      	movs	r4, r0
	if (domain) {
100015b6:	9b08      	ldr	r3, [sp, #32]
100015b8:	2b00      	cmp	r3, #0
100015ba:	d005      	beq.n	100015c8 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
100015bc:	001a      	movs	r2, r3
100015be:	0038      	movs	r0, r7
100015c0:	4972      	ldr	r1, [pc, #456]	; (1000178c <log_output_process+0x268>)
100015c2:	f7ff ff8f 	bl	100014e4 <print_formatted>
100015c6:	1824      	adds	r4, r4, r0
	if (source) {
100015c8:	9b06      	ldr	r3, [sp, #24]
100015ca:	2b00      	cmp	r3, #0
100015cc:	d005      	beq.n	100015da <log_output_process+0xb6>
		total += print_formatted(output,
100015ce:	001a      	movs	r2, r3
100015d0:	0038      	movs	r0, r7
100015d2:	496f      	ldr	r1, [pc, #444]	; (10001790 <log_output_process+0x26c>)
100015d4:	f7ff ff86 	bl	100014e4 <print_formatted>
100015d8:	1824      	adds	r4, r4, r0
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
100015da:	9b15      	ldr	r3, [sp, #84]	; 0x54
		cb = out_func;
100015dc:	486d      	ldr	r0, [pc, #436]	; (10001794 <log_output_process+0x270>)
	length += ids_print(output, level_on, func_on, domain, source, level);
100015de:	19a4      	adds	r4, r4, r6
	if (package) {
100015e0:	2b00      	cmp	r3, #0
100015e2:	d000      	beq.n	100015e6 <log_output_process+0xc2>
100015e4:	e09b      	b.n	1000171e <log_output_process+0x1fa>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
100015e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
100015e8:	2b00      	cmp	r3, #0
100015ea:	d151      	bne.n	10001690 <log_output_process+0x16c>
	if (color) {
100015ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
100015ee:	07db      	lsls	r3, r3, #31
100015f0:	d500      	bpl.n	100015f4 <log_output_process+0xd0>
100015f2:	e0b7      	b.n	10001764 <log_output_process+0x240>
	newline_print(output, flags);
100015f4:	0038      	movs	r0, r7
100015f6:	9918      	ldr	r1, [sp, #96]	; 0x60
100015f8:	f7ff ff84 	bl	10001504 <newline_print>
}
100015fc:	e09b      	b.n	10001736 <log_output_process+0x212>
		length = 0;
100015fe:	2000      	movs	r0, #0
	} else if (freq != 0U) {
10001600:	4b65      	ldr	r3, [pc, #404]	; (10001798 <log_output_process+0x274>)
10001602:	681d      	ldr	r5, [r3, #0]
10001604:	4285      	cmp	r5, r0
10001606:	d0ba      	beq.n	1000157e <log_output_process+0x5a>
		timestamp /= timestamp_div;
10001608:	4b64      	ldr	r3, [pc, #400]	; (1000179c <log_output_process+0x278>)
1000160a:	0020      	movs	r0, r4
1000160c:	6819      	ldr	r1, [r3, #0]
1000160e:	f7fe fddf 	bl	100001d0 <__udivsi3>
10001612:	0029      	movs	r1, r5
10001614:	f7fe fe18 	bl	10000248 <__aeabi_uidivmod>
10001618:	000c      	movs	r4, r1
		seconds -= hours * 3600U;
1000161a:	21e1      	movs	r1, #225	; 0xe1
1000161c:	0109      	lsls	r1, r1, #4
1000161e:	9007      	str	r0, [sp, #28]
10001620:	f7fe fe12 	bl	10000248 <__aeabi_uidivmod>
		ms = (remainder * 1000U) / freq;
10001624:	20fa      	movs	r0, #250	; 0xfa
10001626:	0080      	lsls	r0, r0, #2
10001628:	9109      	str	r1, [sp, #36]	; 0x24
1000162a:	4360      	muls	r0, r4
1000162c:	0029      	movs	r1, r5
1000162e:	f7fe fe0b 	bl	10000248 <__aeabi_uidivmod>
10001632:	000c      	movs	r4, r1
				length = print_formatted(output,
10001634:	900c      	str	r0, [sp, #48]	; 0x30
		mins = seconds / 60U;
10001636:	213c      	movs	r1, #60	; 0x3c
10001638:	9809      	ldr	r0, [sp, #36]	; 0x24
1000163a:	f7fe fdc9 	bl	100001d0 <__udivsi3>
		hours = seconds / 3600U;
1000163e:	21e1      	movs	r1, #225	; 0xe1
		mins = seconds / 60U;
10001640:	900d      	str	r0, [sp, #52]	; 0x34
		hours = seconds / 3600U;
10001642:	0109      	lsls	r1, r1, #4
10001644:	9807      	ldr	r0, [sp, #28]
10001646:	f7fe fdc3 	bl	100001d0 <__udivsi3>
1000164a:	9007      	str	r0, [sp, #28]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
1000164c:	20fa      	movs	r0, #250	; 0xfa
1000164e:	0080      	lsls	r0, r0, #2
10001650:	0029      	movs	r1, r5
10001652:	4360      	muls	r0, r4
10001654:	f7fe fdbc 	bl	100001d0 <__udivsi3>
				length = print_formatted(output,
10001658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000165a:	9002      	str	r0, [sp, #8]
1000165c:	213c      	movs	r1, #60	; 0x3c
1000165e:	9809      	ldr	r0, [sp, #36]	; 0x24
10001660:	9301      	str	r3, [sp, #4]
10001662:	f7fe fdf1 	bl	10000248 <__aeabi_uidivmod>
10001666:	0038      	movs	r0, r7
10001668:	9100      	str	r1, [sp, #0]
1000166a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000166c:	9a07      	ldr	r2, [sp, #28]
1000166e:	494c      	ldr	r1, [pc, #304]	; (100017a0 <log_output_process+0x27c>)
10001670:	f7ff ff38 	bl	100014e4 <print_formatted>
10001674:	e783      	b.n	1000157e <log_output_process+0x5a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
10001676:	9b06      	ldr	r3, [sp, #24]
10001678:	484a      	ldr	r0, [pc, #296]	; (100017a4 <log_output_process+0x280>)
1000167a:	2b01      	cmp	r3, #1
1000167c:	d100      	bne.n	10001680 <log_output_process+0x15c>
1000167e:	4845      	ldr	r0, [pc, #276]	; (10001794 <log_output_process+0x270>)
	if (package) {
10001680:	9b15      	ldr	r3, [sp, #84]	; 0x54
		prefix_offset = 0;
10001682:	9c05      	ldr	r4, [sp, #20]
	if (package) {
10001684:	2b00      	cmp	r3, #0
10001686:	d14a      	bne.n	1000171e <log_output_process+0x1fa>
	if (data_len) {
10001688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000168a:	2b00      	cmp	r3, #0
1000168c:	d053      	beq.n	10001736 <log_output_process+0x212>
		prefix_offset = 0;
1000168e:	2400      	movs	r4, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
10001690:	9e17      	ldr	r6, [sp, #92]	; 0x5c
10001692:	2e10      	cmp	r6, #16
10001694:	d900      	bls.n	10001698 <log_output_process+0x174>
10001696:	2610      	movs	r6, #16
	newline_print(output, flags);
10001698:	0038      	movs	r0, r7
1000169a:	9918      	ldr	r1, [sp, #96]	; 0x60
1000169c:	f7ff ff32 	bl	10001504 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
100016a0:	2500      	movs	r5, #0
100016a2:	42ac      	cmp	r4, r5
100016a4:	dc4c      	bgt.n	10001740 <log_output_process+0x21c>
			print_formatted(output, "%02x ", data[i]);
100016a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
100016a8:	0038      	movs	r0, r7
100016aa:	781a      	ldrb	r2, [r3, #0]
100016ac:	493e      	ldr	r1, [pc, #248]	; (100017a8 <log_output_process+0x284>)
100016ae:	f7ff ff19 	bl	100014e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
100016b2:	2501      	movs	r5, #1
		if (i > 0 && !(i % 8)) {
100016b4:	2307      	movs	r3, #7
100016b6:	421d      	tst	r5, r3
100016b8:	d103      	bne.n	100016c2 <log_output_process+0x19e>
			print_formatted(output, " ");
100016ba:	0038      	movs	r0, r7
100016bc:	493b      	ldr	r1, [pc, #236]	; (100017ac <log_output_process+0x288>)
100016be:	f7ff ff11 	bl	100014e4 <print_formatted>
		if (i < length) {
100016c2:	42ae      	cmp	r6, r5
100016c4:	d942      	bls.n	1000174c <log_output_process+0x228>
			print_formatted(output, "%02x ", data[i]);
100016c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
100016c8:	0038      	movs	r0, r7
100016ca:	5d5a      	ldrb	r2, [r3, r5]
100016cc:	4936      	ldr	r1, [pc, #216]	; (100017a8 <log_output_process+0x284>)
100016ce:	f7ff ff09 	bl	100014e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
100016d2:	3501      	adds	r5, #1
100016d4:	2d10      	cmp	r5, #16
100016d6:	d1ed      	bne.n	100016b4 <log_output_process+0x190>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
100016d8:	2500      	movs	r5, #0
	print_formatted(output, "|");
100016da:	0038      	movs	r0, r7
100016dc:	4934      	ldr	r1, [pc, #208]	; (100017b0 <log_output_process+0x28c>)
100016de:	f7ff ff01 	bl	100014e4 <print_formatted>
		if (i < length) {
100016e2:	002b      	movs	r3, r5
			unsigned char c = (unsigned char)data[i];
100016e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
100016e6:	5cd2      	ldrb	r2, [r2, r3]
	return (int)((((unsigned)c) >= ' ') &&
100016e8:	0013      	movs	r3, r2
100016ea:	3b20      	subs	r3, #32
			print_formatted(output, "%c",
100016ec:	2b5e      	cmp	r3, #94	; 0x5e
100016ee:	d900      	bls.n	100016f2 <log_output_process+0x1ce>
100016f0:	222e      	movs	r2, #46	; 0x2e
100016f2:	0038      	movs	r0, r7
100016f4:	492f      	ldr	r1, [pc, #188]	; (100017b4 <log_output_process+0x290>)
100016f6:	f7ff fef5 	bl	100014e4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
100016fa:	3501      	adds	r5, #1
100016fc:	2d10      	cmp	r5, #16
100016fe:	d02a      	beq.n	10001756 <log_output_process+0x232>
		if (i > 0 && !(i % 8)) {
10001700:	2307      	movs	r3, #7
10001702:	421d      	tst	r5, r3
10001704:	d103      	bne.n	1000170e <log_output_process+0x1ea>
			print_formatted(output, " ");
10001706:	0038      	movs	r0, r7
10001708:	4928      	ldr	r1, [pc, #160]	; (100017ac <log_output_process+0x288>)
1000170a:	f7ff feeb 	bl	100014e4 <print_formatted>
		if (i < length) {
1000170e:	002b      	movs	r3, r5
10001710:	42ae      	cmp	r6, r5
10001712:	d8e7      	bhi.n	100016e4 <log_output_process+0x1c0>
			print_formatted(output, " ");
10001714:	0038      	movs	r0, r7
10001716:	4925      	ldr	r1, [pc, #148]	; (100017ac <log_output_process+0x288>)
10001718:	f7ff fee4 	bl	100014e4 <print_formatted>
1000171c:	e7ed      	b.n	100016fa <log_output_process+0x1d6>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
1000171e:	9b15      	ldr	r3, [sp, #84]	; 0x54
10001720:	003a      	movs	r2, r7
10001722:	4925      	ldr	r1, [pc, #148]	; (100017b8 <log_output_process+0x294>)
10001724:	f002 fa80 	bl	10003c28 <cbpprintf_external>
	if (data_len) {
10001728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
	} while (len);
1000172a:	2b00      	cmp	r3, #0
1000172c:	d1b0      	bne.n	10001690 <log_output_process+0x16c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
1000172e:	9b05      	ldr	r3, [sp, #20]
10001730:	2b00      	cmp	r3, #0
10001732:	d000      	beq.n	10001736 <log_output_process+0x212>
10001734:	e75a      	b.n	100015ec <log_output_process+0xc8>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
10001736:	0038      	movs	r0, r7
10001738:	f002 fb92 	bl	10003e60 <log_output_flush>
}
1000173c:	b00f      	add	sp, #60	; 0x3c
1000173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, " ");
10001740:	0038      	movs	r0, r7
10001742:	491a      	ldr	r1, [pc, #104]	; (100017ac <log_output_process+0x288>)
10001744:	f7ff fece 	bl	100014e4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
10001748:	3501      	adds	r5, #1
1000174a:	e7aa      	b.n	100016a2 <log_output_process+0x17e>
			print_formatted(output, "   ");
1000174c:	0038      	movs	r0, r7
1000174e:	491b      	ldr	r1, [pc, #108]	; (100017bc <log_output_process+0x298>)
10001750:	f7ff fec8 	bl	100014e4 <print_formatted>
10001754:	e7bd      	b.n	100016d2 <log_output_process+0x1ae>
		data += length;
10001756:	9b16      	ldr	r3, [sp, #88]	; 0x58
10001758:	199b      	adds	r3, r3, r6
1000175a:	9316      	str	r3, [sp, #88]	; 0x58
		len -= length;
1000175c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1000175e:	1b9b      	subs	r3, r3, r6
10001760:	9317      	str	r3, [sp, #92]	; 0x5c
10001762:	e7e2      	b.n	1000172a <log_output_process+0x206>
		print_formatted(output, "%s", log_color);
10001764:	0038      	movs	r0, r7
10001766:	4a05      	ldr	r2, [pc, #20]	; (1000177c <log_output_process+0x258>)
10001768:	4905      	ldr	r1, [pc, #20]	; (10001780 <log_output_process+0x25c>)
1000176a:	f7ff febb 	bl	100014e4 <print_formatted>
}
1000176e:	e741      	b.n	100015f4 <log_output_process+0xd0>
10001770:	10004cda 	.word	0x10004cda
10001774:	10004cde 	.word	0x10004cde
10001778:	10004a98 	.word	0x10004a98
1000177c:	10004cd5 	.word	0x10004cd5
10001780:	10004d03 	.word	0x10004d03
10001784:	10004aac 	.word	0x10004aac
10001788:	10004d06 	.word	0x10004d06
1000178c:	10004d0c 	.word	0x10004d0c
10001790:	10004d10 	.word	0x10004d10
10001794:	10003e05 	.word	0x10003e05
10001798:	200002b8 	.word	0x200002b8
1000179c:	200002b4 	.word	0x200002b4
100017a0:	10004ce7 	.word	0x10004ce7
100017a4:	10003e1d 	.word	0x10003e1d
100017a8:	10004d15 	.word	0x10004d15
100017ac:	10004d1d 	.word	0x10004d1d
100017b0:	10004d1f 	.word	0x10004d1f
100017b4:	10004d21 	.word	0x10004d21
100017b8:	10003e55 	.word	0x10003e55
100017bc:	10004d1b 	.word	0x10004d1b

100017c0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
100017c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
100017c2:	880b      	ldrh	r3, [r1, #0]
100017c4:	b089      	sub	sp, #36	; 0x24
100017c6:	05db      	lsls	r3, r3, #23
100017c8:	0f5c      	lsrs	r4, r3, #29
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
100017ca:	684b      	ldr	r3, [r1, #4]
100017cc:	000f      	movs	r7, r1
100017ce:	0015      	movs	r5, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
100017d0:	688e      	ldr	r6, [r1, #8]
100017d2:	9007      	str	r0, [sp, #28]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
100017d4:	2b00      	cmp	r3, #0
100017d6:	d00c      	beq.n	100017f2 <log_output_msg_process+0x32>
100017d8:	4a13      	ldr	r2, [pc, #76]	; (10001828 <log_output_msg_process+0x68>)
100017da:	1a9a      	subs	r2, r3, r2
100017dc:	08d2      	lsrs	r2, r2, #3
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
100017de:	2300      	movs	r3, #0
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
100017e0:	b211      	sxth	r1, r2
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
100017e2:	0412      	lsls	r2, r2, #16
100017e4:	d405      	bmi.n	100017f2 <log_output_msg_process+0x32>
	return msg->hdr.desc.domain;
100017e6:	7838      	ldrb	r0, [r7, #0]
100017e8:	0680      	lsls	r0, r0, #26
100017ea:	0f40      	lsrs	r0, r0, #29
100017ec:	f7ff fe12 	bl	10001414 <log_source_name_get>
100017f0:	0003      	movs	r3, r0
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
100017f2:	003a      	movs	r2, r7
	*len = msg->hdr.desc.package_len;
100017f4:	6839      	ldr	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
100017f6:	8878      	ldrh	r0, [r7, #2]
	*len = msg->hdr.desc.package_len;
100017f8:	0309      	lsls	r1, r1, #12
	*len = msg->hdr.desc.data_len;
100017fa:	0900      	lsrs	r0, r0, #4
	*len = msg->hdr.desc.package_len;
100017fc:	0d49      	lsrs	r1, r1, #21
	return msg->data;
100017fe:	3210      	adds	r2, #16
	*len = msg->hdr.desc.data_len;
10001800:	4684      	mov	ip, r0
	return msg->data + msg->hdr.desc.package_len;
10001802:	1857      	adds	r7, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
10001804:	1e48      	subs	r0, r1, #1
10001806:	4181      	sbcs	r1, r0
10001808:	4249      	negs	r1, r1
1000180a:	400a      	ands	r2, r1
1000180c:	4661      	mov	r1, ip
1000180e:	9201      	str	r2, [sp, #4]
10001810:	9103      	str	r1, [sp, #12]
10001812:	2200      	movs	r2, #0
10001814:	0031      	movs	r1, r6
10001816:	9807      	ldr	r0, [sp, #28]
10001818:	9504      	str	r5, [sp, #16]
1000181a:	9702      	str	r7, [sp, #8]
1000181c:	9400      	str	r4, [sp, #0]
1000181e:	f7ff fe81 	bl	10001524 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
10001822:	b009      	add	sp, #36	; 0x24
10001824:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001826:	46c0      	nop			; (mov r8, r8)
10001828:	10004a30 	.word	0x10004a30

1000182c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
1000182c:	2301      	movs	r3, #1
{
1000182e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
10001830:	2100      	movs	r1, #0
		frequency /= 2U;
		timestamp_div *= 2U;
10001832:	001c      	movs	r4, r3
	while (frequency > 1000000) {
10001834:	4a07      	ldr	r2, [pc, #28]	; (10001854 <log_output_timestamp_freq_set+0x28>)
10001836:	4290      	cmp	r0, r2
10001838:	d807      	bhi.n	1000184a <log_output_timestamp_freq_set+0x1e>
1000183a:	4a07      	ldr	r2, [pc, #28]	; (10001858 <log_output_timestamp_freq_set+0x2c>)
1000183c:	2900      	cmp	r1, #0
1000183e:	d100      	bne.n	10001842 <log_output_timestamp_freq_set+0x16>
	timestamp_div = 1U;
10001840:	2301      	movs	r3, #1
	}

	freq = frequency;
}
10001842:	6013      	str	r3, [r2, #0]
	freq = frequency;
10001844:	4b05      	ldr	r3, [pc, #20]	; (1000185c <log_output_timestamp_freq_set+0x30>)
10001846:	6018      	str	r0, [r3, #0]
}
10001848:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
1000184a:	0021      	movs	r1, r4
		frequency /= 2U;
1000184c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
1000184e:	005b      	lsls	r3, r3, #1
10001850:	e7f1      	b.n	10001836 <log_output_timestamp_freq_set+0xa>
10001852:	46c0      	nop			; (mov r8, r8)
10001854:	000f4240 	.word	0x000f4240
10001858:	200002b4 	.word	0x200002b4
1000185c:	200002b8 	.word	0x200002b8

10001860 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
10001860:	4b01      	ldr	r3, [pc, #4]	; (10001868 <format_set+0x8>)
	return 0;
}
10001862:	2000      	movs	r0, #0
	log_format_current = log_type;
10001864:	6019      	str	r1, [r3, #0]
}
10001866:	4770      	bx	lr
10001868:	200002d0 	.word	0x200002d0

1000186c <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
1000186c:	2201      	movs	r2, #1
{
1000186e:	b510      	push	{r4, lr}
	in_panic = true;
10001870:	4b02      	ldr	r3, [pc, #8]	; (1000187c <panic+0x10>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
10001872:	4803      	ldr	r0, [pc, #12]	; (10001880 <panic+0x14>)
10001874:	701a      	strb	r2, [r3, #0]
10001876:	f002 faf3 	bl	10003e60 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
1000187a:	bd10      	pop	{r4, pc}
1000187c:	20000362 	.word	0x20000362
10001880:	10004adc 	.word	0x10004adc

10001884 <process>:
{
10001884:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10001886:	4b05      	ldr	r3, [pc, #20]	; (1000189c <process+0x18>)
{
10001888:	000c      	movs	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
1000188a:	6818      	ldr	r0, [r3, #0]
1000188c:	f7ff fd4a 	bl	10001324 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
10001890:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
10001892:	0003      	movs	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
10001894:	0021      	movs	r1, r4
10001896:	4802      	ldr	r0, [pc, #8]	; (100018a0 <process+0x1c>)
10001898:	4798      	blx	r3
}
1000189a:	bd10      	pop	{r4, pc}
1000189c:	200002d0 	.word	0x200002d0
100018a0:	10004adc 	.word	0x10004adc

100018a4 <char_out>:
{
100018a4:	b570      	push	{r4, r5, r6, lr}
100018a6:	000d      	movs	r5, r1
100018a8:	0004      	movs	r4, r0
100018aa:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
100018ac:	42b4      	cmp	r4, r6
100018ae:	d101      	bne.n	100018b4 <char_out+0x10>
}
100018b0:	0028      	movs	r0, r5
100018b2:	bd70      	pop	{r4, r5, r6, pc}
			uart_poll_out(uart_dev, data[i]);
100018b4:	7821      	ldrb	r1, [r4, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
100018b6:	4803      	ldr	r0, [pc, #12]	; (100018c4 <char_out+0x20>)
100018b8:	3401      	adds	r4, #1
100018ba:	6883      	ldr	r3, [r0, #8]
100018bc:	685b      	ldr	r3, [r3, #4]
100018be:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
100018c0:	e7f4      	b.n	100018ac <char_out+0x8>
100018c2:	46c0      	nop			; (mov r8, r8)
100018c4:	100048f8 	.word	0x100048f8

100018c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
100018c8:	4901      	ldr	r1, [pc, #4]	; (100018d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
100018ca:	2210      	movs	r2, #16
	str	r2, [r1]
100018cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
100018ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
100018d0:	e000ed10 	.word	0xe000ed10

100018d4 <arch_cpu_idle>:
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
100018d4:	f3bf 8f4f 	dsb	sy
100018d8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
100018da:	b662      	cpsie	i
	isb
100018dc:	f3bf 8f6f 	isb	sy

	bx	lr
100018e0:	4770      	bx	lr
100018e2:	46c0      	nop			; (mov r8, r8)

100018e4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100018e6:	0007      	movs	r7, r0
100018e8:	000d      	movs	r5, r1
100018ea:	b087      	sub	sp, #28

	if (esf != NULL) {
100018ec:	2900      	cmp	r1, #0
100018ee:	d039      	beq.n	10001964 <z_arm_fatal_error+0x80>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
100018f0:	2400      	movs	r4, #0
100018f2:	688b      	ldr	r3, [r1, #8]
100018f4:	4e1e      	ldr	r6, [pc, #120]	; (10001970 <z_arm_fatal_error+0x8c>)
100018f6:	9305      	str	r3, [sp, #20]
100018f8:	684b      	ldr	r3, [r1, #4]
100018fa:	2201      	movs	r2, #1
100018fc:	9304      	str	r3, [sp, #16]
100018fe:	680b      	ldr	r3, [r1, #0]
10001900:	0020      	movs	r0, r4
10001902:	9303      	str	r3, [sp, #12]
10001904:	4b1b      	ldr	r3, [pc, #108]	; (10001974 <z_arm_fatal_error+0x90>)
10001906:	0031      	movs	r1, r6
10001908:	9302      	str	r3, [sp, #8]
1000190a:	9401      	str	r4, [sp, #4]
1000190c:	0023      	movs	r3, r4
1000190e:	9400      	str	r4, [sp, #0]
10001910:	f002 fab3 	bl	10003e7a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
10001914:	696b      	ldr	r3, [r5, #20]
10001916:	2201      	movs	r2, #1
10001918:	9305      	str	r3, [sp, #20]
1000191a:	692b      	ldr	r3, [r5, #16]
1000191c:	0031      	movs	r1, r6
1000191e:	9304      	str	r3, [sp, #16]
10001920:	68eb      	ldr	r3, [r5, #12]
10001922:	0020      	movs	r0, r4
10001924:	9303      	str	r3, [sp, #12]
10001926:	4b14      	ldr	r3, [pc, #80]	; (10001978 <z_arm_fatal_error+0x94>)
10001928:	9401      	str	r4, [sp, #4]
1000192a:	9302      	str	r3, [sp, #8]
1000192c:	9400      	str	r4, [sp, #0]
1000192e:	0023      	movs	r3, r4
10001930:	f002 faa3 	bl	10003e7a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
10001934:	69eb      	ldr	r3, [r5, #28]
10001936:	2201      	movs	r2, #1
10001938:	9303      	str	r3, [sp, #12]
1000193a:	4b10      	ldr	r3, [pc, #64]	; (1000197c <z_arm_fatal_error+0x98>)
1000193c:	0031      	movs	r1, r6
1000193e:	0020      	movs	r0, r4
10001940:	9302      	str	r3, [sp, #8]
10001942:	9401      	str	r4, [sp, #4]
10001944:	0023      	movs	r3, r4
10001946:	9400      	str	r4, [sp, #0]
10001948:	f002 fa97 	bl	10003e7a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
1000194c:	69ab      	ldr	r3, [r5, #24]
1000194e:	2201      	movs	r2, #1
10001950:	9303      	str	r3, [sp, #12]
10001952:	4b0b      	ldr	r3, [pc, #44]	; (10001980 <z_arm_fatal_error+0x9c>)
10001954:	0031      	movs	r1, r6
10001956:	9302      	str	r3, [sp, #8]
10001958:	0020      	movs	r0, r4
1000195a:	0023      	movs	r3, r4
1000195c:	9401      	str	r4, [sp, #4]
1000195e:	9400      	str	r4, [sp, #0]
10001960:	f002 fa8b 	bl	10003e7a <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
10001964:	0029      	movs	r1, r5
10001966:	0038      	movs	r0, r7
10001968:	f001 f844 	bl	100029f4 <z_fatal_error>
}
1000196c:	b007      	add	sp, #28
1000196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001970:	10004a58 	.word	0x10004a58
10001974:	10004d5e 	.word	0x10004d5e
10001978:	10004d8d 	.word	0x10004d8d
1000197c:	10004dbc 	.word	0x10004dbc
10001980:	10004dcb 	.word	0x10004dcb

10001984 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
10001984:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
10001986:	0600      	lsls	r0, r0, #24
10001988:	d405      	bmi.n	10001996 <arch_irq_enable+0x12>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1000198a:	221f      	movs	r2, #31
1000198c:	401a      	ands	r2, r3
1000198e:	2301      	movs	r3, #1
10001990:	4093      	lsls	r3, r2
10001992:	4a01      	ldr	r2, [pc, #4]	; (10001998 <arch_irq_enable+0x14>)
10001994:	6013      	str	r3, [r2, #0]
}
10001996:	4770      	bx	lr
10001998:	e000e100 	.word	0xe000e100

1000199c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
1000199c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1000199e:	25ff      	movs	r5, #255	; 0xff
100019a0:	2203      	movs	r2, #3
100019a2:	000b      	movs	r3, r1
100019a4:	0029      	movs	r1, r5
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
100019a6:	b240      	sxtb	r0, r0
100019a8:	4002      	ands	r2, r0
100019aa:	00d2      	lsls	r2, r2, #3
100019ac:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100019ae:	015b      	lsls	r3, r3, #5
100019b0:	402b      	ands	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100019b2:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100019b4:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
100019b6:	2800      	cmp	r0, #0
100019b8:	db0a      	blt.n	100019d0 <z_arm_irq_priority_set+0x34>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100019ba:	24c0      	movs	r4, #192	; 0xc0
100019bc:	4a0a      	ldr	r2, [pc, #40]	; (100019e8 <z_arm_irq_priority_set+0x4c>)
100019be:	0880      	lsrs	r0, r0, #2
100019c0:	0080      	lsls	r0, r0, #2
100019c2:	1880      	adds	r0, r0, r2
100019c4:	00a4      	lsls	r4, r4, #2
100019c6:	5902      	ldr	r2, [r0, r4]
100019c8:	400a      	ands	r2, r1
100019ca:	4313      	orrs	r3, r2
100019cc:	5103      	str	r3, [r0, r4]
}
100019ce:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100019d0:	220f      	movs	r2, #15
100019d2:	4010      	ands	r0, r2
100019d4:	3808      	subs	r0, #8
100019d6:	4a05      	ldr	r2, [pc, #20]	; (100019ec <z_arm_irq_priority_set+0x50>)
100019d8:	0880      	lsrs	r0, r0, #2
100019da:	0080      	lsls	r0, r0, #2
100019dc:	1880      	adds	r0, r0, r2
100019de:	69c2      	ldr	r2, [r0, #28]
100019e0:	4011      	ands	r1, r2
100019e2:	4319      	orrs	r1, r3
100019e4:	61c1      	str	r1, [r0, #28]
100019e6:	e7f2      	b.n	100019ce <z_arm_irq_priority_set+0x32>
100019e8:	e000e100 	.word	0xe000e100
100019ec:	e000ed00 	.word	0xe000ed00

100019f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
100019f0:	bf30      	wfi
    b z_SysNmiOnReset
100019f2:	e7fd      	b.n	100019f0 <z_SysNmiOnReset>

100019f4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100019f4:	22ff      	movs	r2, #255	; 0xff
100019f6:	4b08      	ldr	r3, [pc, #32]	; (10001a18 <z_arm_prep_c+0x24>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
100019f8:	b510      	push	{r4, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
100019fa:	4393      	bics	r3, r2
100019fc:	4a07      	ldr	r2, [pc, #28]	; (10001a1c <z_arm_prep_c+0x28>)
100019fe:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
10001a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
10001a04:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
10001a08:	f001 f89a 	bl	10002b40 <z_bss_zero>
	z_data_copy();
10001a0c:	f001 fd30 	bl	10003470 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
10001a10:	f000 f93a 	bl	10001c88 <z_arm_interrupt_init>
	z_cstart();
10001a14:	f001 f8d4 	bl	10002bc0 <z_cstart>
10001a18:	10000100 	.word	0x10000100
10001a1c:	e000ed00 	.word	0xe000ed00

10001a20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
10001a20:	4a08      	ldr	r2, [pc, #32]	; (10001a44 <arch_swap+0x24>)
	_current->arch.swap_return_value = _k_neg_eagain;
10001a22:	4909      	ldr	r1, [pc, #36]	; (10001a48 <arch_swap+0x28>)
	_current->arch.basepri = key;
10001a24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
10001a26:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
10001a28:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
10001a2a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10001a2c:	2380      	movs	r3, #128	; 0x80
10001a2e:	4907      	ldr	r1, [pc, #28]	; (10001a4c <arch_swap+0x2c>)
10001a30:	055b      	lsls	r3, r3, #21
10001a32:	6848      	ldr	r0, [r1, #4]
10001a34:	4303      	orrs	r3, r0
10001a36:	604b      	str	r3, [r1, #4]
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	if (key != 0U) {
		return;
	}
	__asm__ volatile(
10001a38:	b662      	cpsie	i
10001a3a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
10001a3e:	6893      	ldr	r3, [r2, #8]
10001a40:	6f18      	ldr	r0, [r3, #112]	; 0x70
}
10001a42:	4770      	bx	lr
10001a44:	20000324 	.word	0x20000324
10001a48:	10004bb8 	.word	0x10004bb8
10001a4c:	e000ed00 	.word	0xe000ed00

10001a50 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
10001a50:	4913      	ldr	r1, [pc, #76]	; (10001aa0 <_thread_irq_disabled+0x1e>)
    ldr r2, [r1, #_kernel_offset_to_current]
10001a52:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
10001a54:	4813      	ldr	r0, [pc, #76]	; (10001aa4 <_thread_irq_disabled+0x22>)
    add r0, r2
10001a56:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
10001a58:	f3ef 8c09 	mrs	ip, PSP
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    /* Store current r4-r7 */
    stmea r0!, {r4-r7}
10001a5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    /* copy r8-r12 into r3-r7 */
    mov r3, r8
10001a5e:	4643      	mov	r3, r8
    mov r4, r9
10001a60:	464c      	mov	r4, r9
    mov r5, r10
10001a62:	4655      	mov	r5, sl
    mov r6, r11
10001a64:	465e      	mov	r6, fp
    mov r7, ip
10001a66:	4667      	mov	r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
10001a68:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10001a6a:	b672      	cpsid	i
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
10001a6c:	4f0e      	ldr	r7, [pc, #56]	; (10001aa8 <_thread_irq_disabled+0x26>)
    ldr v3, =_SCS_ICSR_UNPENDSV
10001a6e:	4e0f      	ldr	r6, [pc, #60]	; (10001aac <_thread_irq_disabled+0x2a>)
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
10001a70:	694a      	ldr	r2, [r1, #20]

    str r2, [r1, #_kernel_offset_to_current]
10001a72:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
10001a74:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
10001a76:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
10001a78:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
10001a7a:	66d3      	str	r3, [r2, #108]	; 0x6c
     * maps to PRIMASK.
     *
     * Only enable interrupts if value is 0, meaning interrupts
     * were enabled before irq_lock was called.
     */
    cmp r0, #0
10001a7c:	2800      	cmp	r0, #0
    bne _thread_irq_disabled
10001a7e:	d100      	bne.n	10001a82 <_thread_irq_disabled>
    cpsie i
10001a80:	b662      	cpsie	i

10001a82 <_thread_irq_disabled>:
     */
    isb

#endif

    ldr r4, =_thread_offset_to_callee_saved
10001a82:	4c08      	ldr	r4, [pc, #32]	; (10001aa4 <_thread_irq_disabled+0x22>)
    adds r0, r2, r4
10001a84:	1910      	adds	r0, r2, r4

    /* restore r4-r12 for new thread */
    /* first restore r8-r12 located after r4-r7 (4*4bytes) */
    adds r0, #16
10001a86:	3010      	adds	r0, #16
    ldmia r0!, {r3-r7}
10001a88:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
    /* move to correct registers */
    mov r8, r3
10001a8a:	4698      	mov	r8, r3
    mov r9, r4
10001a8c:	46a1      	mov	r9, r4
    mov r10, r5
10001a8e:	46aa      	mov	sl, r5
    mov r11, r6
10001a90:	46b3      	mov	fp, r6
    mov ip, r7
10001a92:	46bc      	mov	ip, r7
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
10001a94:	3824      	subs	r0, #36	; 0x24
    ldmia r0!, {r4-r7}
10001a96:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
10001a98:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
10001a9c:	4770      	bx	lr
10001a9e:	0000      	.short	0x0000
    ldr r1, =_kernel
10001aa0:	20000324 	.word	0x20000324
    ldr r0, =_thread_offset_to_callee_saved
10001aa4:	00000030 	.word	0x00000030
    ldr v4, =_SCS_ICSR
10001aa8:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
10001aac:	08000000 	.word	0x08000000

10001ab0 <z_arm_svc>:
SECTION_FUNC(TEXT, z_arm_svc)
  /* Use EXC_RETURN state to find out if stack frame is on the
   * MSP or PSP
   */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
  movs r0, #_EXC_RETURN_SPSEL_Msk
10001ab0:	2004      	movs	r0, #4
  mov r1, lr
10001ab2:	4671      	mov	r1, lr
  tst r1, r0
10001ab4:	4201      	tst	r1, r0
  beq _stack_frame_msp
10001ab6:	d002      	beq.n	10001abe <_stack_frame_msp>
  mrs r0, PSP
10001ab8:	f3ef 8009 	mrs	r0, PSP
  bne _stack_frame_endif
10001abc:	d101      	bne.n	10001ac2 <_stack_frame_endif>

10001abe <_stack_frame_msp>:
_stack_frame_msp:
  mrs r0, MSP
10001abe:	f3ef 8008 	mrs	r0, MSP

10001ac2 <_stack_frame_endif>:
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
10001ac2:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read the
     * SVC number (lower byte of SCV instruction)
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
10001ac4:	3902      	subs	r1, #2
    ldrb r1, [r1]
10001ac6:	7809      	ldrb	r1, [r1, #0]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
10001ac8:	2902      	cmp	r1, #2
    beq _oops
10001aca:	d0ff      	beq.n	10001acc <_oops>

10001acc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
10001acc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
10001ace:	f002 f9e3 	bl	10003e98 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
10001ad2:	bd01      	pop	{r0, pc}

10001ad4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
10001ad4:	b510      	push	{r4, lr}
	iframe->pc = (uint32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
10001ad6:	3a20      	subs	r2, #32
#endif
	iframe->a1 = (uint32_t)entry;
10001ad8:	6013      	str	r3, [r2, #0]
	iframe->a2 = (uint32_t)p1;
10001ada:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
10001adc:	2401      	movs	r4, #1
	iframe->a2 = (uint32_t)p1;
10001ade:	6053      	str	r3, [r2, #4]
	iframe->a3 = (uint32_t)p2;
10001ae0:	9b03      	ldr	r3, [sp, #12]
	iframe->pc &= 0xfffffffe;
10001ae2:	4906      	ldr	r1, [pc, #24]	; (10001afc <arch_new_thread+0x28>)
	iframe->a3 = (uint32_t)p2;
10001ae4:	6093      	str	r3, [r2, #8]
	iframe->a4 = (uint32_t)p3;
10001ae6:	9b04      	ldr	r3, [sp, #16]
	iframe->pc &= 0xfffffffe;
10001ae8:	43a1      	bics	r1, r4
	iframe->a4 = (uint32_t)p3;
10001aea:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
10001aec:	2380      	movs	r3, #128	; 0x80
10001aee:	045b      	lsls	r3, r3, #17
10001af0:	61d3      	str	r3, [r2, #28]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
10001af2:	2300      	movs	r3, #0
	iframe->pc &= 0xfffffffe;
10001af4:	6191      	str	r1, [r2, #24]
	thread->callee_saved.psp = (uint32_t)iframe;
10001af6:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
10001af8:	66c3      	str	r3, [r0, #108]	; 0x6c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
10001afa:	bd10      	pop	{r4, pc}
10001afc:	10003cab 	.word	0x10003cab

10001b00 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
10001b00:	4b06      	ldr	r3, [pc, #24]	; (10001b1c <arch_switch_to_main_thread+0x1c>)
10001b02:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
10001b04:	1c10      	adds	r0, r2, #0
10001b06:	f381 8809 	msr	PSP, r1
10001b0a:	2100      	movs	r1, #0
10001b0c:	b662      	cpsie	i
10001b0e:	f3bf 8f6f 	isb	sy
10001b12:	2200      	movs	r2, #0
10001b14:	2300      	movs	r3, #0
10001b16:	f002 f8c8 	bl	10003caa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
10001b1a:	46c0      	nop			; (mov r8, r8)
10001b1c:	20000324 	.word	0x20000324

10001b20 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
10001b20:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
10001b22:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
10001b26:	4905      	ldr	r1, [pc, #20]	; (10001b3c <_isr_wrapper+0x1c>)
	subs r0, r1	/* get IRQ number */
10001b28:	1a40      	subs	r0, r0, r1
	lsls r0, #3	/* table is 8-byte wide */
10001b2a:	00c0      	lsls	r0, r0, #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
10001b2c:	4904      	ldr	r1, [pc, #16]	; (10001b40 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
10001b2e:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
10001b30:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
10001b32:	4798      	blx	r3
#ifdef CONFIG_TRACING_ISR
	bl sys_trace_isr_exit
#endif

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
10001b34:	bc09      	pop	{r0, r3}
	mov lr, r3
10001b36:	469e      	mov	lr, r3
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
10001b38:	4902      	ldr	r1, [pc, #8]	; (10001b44 <_isr_wrapper+0x24>)
	bx r1
10001b3a:	4708      	bx	r1
	ldr r1, =16
10001b3c:	00000010 	.word	0x00000010
	ldr r1, =_sw_isr_table
10001b40:	10004940 	.word	0x10004940
	ldr r1, =z_arm_int_exit
10001b44:	10001b49 	.word	0x10001b49

10001b48 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
10001b48:	4b04      	ldr	r3, [pc, #16]	; (10001b5c <_EXIT_EXC+0x4>)

	ldr r1, [r3, #_kernel_offset_to_current]
10001b4a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
10001b4c:	6958      	ldr	r0, [r3, #20]
	cmp r0, r1
10001b4e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
10001b50:	d002      	beq.n	10001b58 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
10001b52:	4903      	ldr	r1, [pc, #12]	; (10001b60 <_EXIT_EXC+0x8>)
	ldr r2, =_SCS_ICSR_PENDSV
10001b54:	4a03      	ldr	r2, [pc, #12]	; (10001b64 <_EXIT_EXC+0xc>)
	str r2, [r1]
10001b56:	600a      	str	r2, [r1, #0]

10001b58 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
10001b58:	4770      	bx	lr
10001b5a:	0000      	.short	0x0000
	ldr r3, =_kernel
10001b5c:	20000324 	.word	0x20000324
	ldr r1, =_SCS_ICSR
10001b60:	e000ed04 	.word	0xe000ed04
	ldr r2, =_SCS_ICSR_PENDSV
10001b64:	10000000 	.word	0x10000000

10001b68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
10001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10001b6a:	4b38      	ldr	r3, [pc, #224]	; (10001c4c <z_arm_fault+0xe4>)
{
10001b6c:	b091      	sub	sp, #68	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10001b6e:	685f      	ldr	r7, [r3, #4]
{
10001b70:	0004      	movs	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
10001b72:	05fb      	lsls	r3, r7, #23
10001b74:	0ddb      	lsrs	r3, r3, #23
10001b76:	9307      	str	r3, [sp, #28]
10001b78:	b662      	cpsie	i
10001b7a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
10001b7e:	4e34      	ldr	r6, [pc, #208]	; (10001c50 <z_arm_fault+0xe8>)
10001b80:	0e13      	lsrs	r3, r2, #24
10001b82:	2bff      	cmp	r3, #255	; 0xff
10001b84:	d10d      	bne.n	10001ba2 <z_arm_fault+0x3a>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
10001b86:	3bf3      	subs	r3, #243	; 0xf3
10001b88:	4013      	ands	r3, r2
10001b8a:	2b08      	cmp	r3, #8
10001b8c:	d13f      	bne.n	10001c0e <z_arm_fault+0xa6>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
10001b8e:	2000      	movs	r0, #0
10001b90:	4b30      	ldr	r3, [pc, #192]	; (10001c54 <z_arm_fault+0xec>)
10001b92:	2201      	movs	r2, #1
10001b94:	9302      	str	r3, [sp, #8]
10001b96:	0031      	movs	r1, r6
10001b98:	0003      	movs	r3, r0
10001b9a:	9001      	str	r0, [sp, #4]
10001b9c:	9000      	str	r0, [sp, #0]
10001b9e:	f002 f98d 	bl	10003ebc <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
10001ba2:	2500      	movs	r5, #0
		return NULL;
10001ba4:	002c      	movs	r4, r5
	switch (fault) {
10001ba6:	9b07      	ldr	r3, [sp, #28]
10001ba8:	2b03      	cmp	r3, #3
10001baa:	d136      	bne.n	10001c1a <z_arm_fault+0xb2>
	PR_FAULT_INFO("***** HARD FAULT *****");
10001bac:	2700      	movs	r7, #0
10001bae:	4b2a      	ldr	r3, [pc, #168]	; (10001c58 <z_arm_fault+0xf0>)
10001bb0:	2201      	movs	r2, #1
10001bb2:	9302      	str	r3, [sp, #8]
10001bb4:	0031      	movs	r1, r6
10001bb6:	003b      	movs	r3, r7
10001bb8:	0038      	movs	r0, r7
10001bba:	9701      	str	r7, [sp, #4]
10001bbc:	9700      	str	r7, [sp, #0]
10001bbe:	f002 f97d 	bl	10003ebc <z_log_msg_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
10001bc2:	69a3      	ldr	r3, [r4, #24]
10001bc4:	3b02      	subs	r3, #2
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
10001bc6:	881a      	ldrh	r2, [r3, #0]
10001bc8:	4b24      	ldr	r3, [pc, #144]	; (10001c5c <z_arm_fault+0xf4>)
10001bca:	429a      	cmp	r2, r3
10001bcc:	d139      	bne.n	10001c42 <z_arm_fault+0xda>
		PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
10001bce:	6823      	ldr	r3, [r4, #0]
10001bd0:	0031      	movs	r1, r6
10001bd2:	9303      	str	r3, [sp, #12]
10001bd4:	4b22      	ldr	r3, [pc, #136]	; (10001c60 <z_arm_fault+0xf8>)
10001bd6:	2201      	movs	r2, #1
10001bd8:	9302      	str	r3, [sp, #8]
10001bda:	0038      	movs	r0, r7
10001bdc:	003b      	movs	r3, r7
10001bde:	9701      	str	r7, [sp, #4]
10001be0:	9700      	str	r7, [sp, #0]
10001be2:	f002 f96b 	bl	10003ebc <z_log_msg_runtime_create.constprop.0>
		reason = esf->basic.r0;
10001be6:	6826      	ldr	r6, [r4, #0]
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
10001be8:	2220      	movs	r2, #32
10001bea:	0021      	movs	r1, r4
10001bec:	a808      	add	r0, sp, #32
10001bee:	f002 f987 	bl	10003f00 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
10001bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10001bf4:	2d00      	cmp	r5, #0
10001bf6:	d026      	beq.n	10001c46 <z_arm_fault+0xde>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
10001bf8:	05da      	lsls	r2, r3, #23
10001bfa:	d102      	bne.n	10001c02 <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
10001bfc:	4a19      	ldr	r2, [pc, #100]	; (10001c64 <z_arm_fault+0xfc>)
10001bfe:	4313      	orrs	r3, r2
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10001c00:	930f      	str	r3, [sp, #60]	; 0x3c

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
10001c02:	0030      	movs	r0, r6
10001c04:	a908      	add	r1, sp, #32
10001c06:	f7ff fe6d 	bl	100018e4 <z_arm_fatal_error>
}
10001c0a:	b011      	add	sp, #68	; 0x44
10001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*nested_exc = true;
10001c0e:	2501      	movs	r5, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
10001c10:	0712      	lsls	r2, r2, #28
10001c12:	d5c8      	bpl.n	10001ba6 <z_arm_fault+0x3e>
			ptr_esf =  (z_arch_esf_t *)psp;
10001c14:	000c      	movs	r4, r1
	*nested_exc = false;
10001c16:	2500      	movs	r5, #0
10001c18:	e7c5      	b.n	10001ba6 <z_arm_fault+0x3e>
	PR_FAULT_INFO("***** %s %d) *****",
10001c1a:	23f8      	movs	r3, #248	; 0xf8
10001c1c:	005b      	lsls	r3, r3, #1
10001c1e:	4a12      	ldr	r2, [pc, #72]	; (10001c68 <z_arm_fault+0x100>)
10001c20:	421f      	tst	r7, r3
10001c22:	d000      	beq.n	10001c26 <z_arm_fault+0xbe>
10001c24:	4a11      	ldr	r2, [pc, #68]	; (10001c6c <z_arm_fault+0x104>)
10001c26:	2000      	movs	r0, #0
10001c28:	9b07      	ldr	r3, [sp, #28]
10001c2a:	9203      	str	r2, [sp, #12]
10001c2c:	3b10      	subs	r3, #16
10001c2e:	9304      	str	r3, [sp, #16]
10001c30:	4b0f      	ldr	r3, [pc, #60]	; (10001c70 <z_arm_fault+0x108>)
10001c32:	2201      	movs	r2, #1
10001c34:	9302      	str	r3, [sp, #8]
10001c36:	0031      	movs	r1, r6
10001c38:	0003      	movs	r3, r0
10001c3a:	9001      	str	r0, [sp, #4]
10001c3c:	9000      	str	r0, [sp, #0]
10001c3e:	f002 f93d 	bl	10003ebc <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
10001c42:	2600      	movs	r6, #0
10001c44:	e7d0      	b.n	10001be8 <z_arm_fault+0x80>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
10001c46:	0a5b      	lsrs	r3, r3, #9
10001c48:	025b      	lsls	r3, r3, #9
10001c4a:	e7d9      	b.n	10001c00 <z_arm_fault+0x98>
10001c4c:	e000ed00 	.word	0xe000ed00
10001c50:	10004a58 	.word	0x10004a58
10001c54:	10004e27 	.word	0x10004e27
10001c58:	10004e52 	.word	0x10004e52
10001c5c:	0000df02 	.word	0x0000df02
10001c60:	10004e69 	.word	0x10004e69
10001c64:	000001ff 	.word	0x000001ff
10001c68:	10004df9 	.word	0x10004df9
10001c6c:	10004e0e 	.word	0x10004e0e
10001c70:	10004e85 	.word	0x10004e85

10001c74 <z_arm_exc_spurious>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
10001c74:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
10001c78:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
10001c7c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
10001c7e:	4672      	mov	r2, lr
	bl z_arm_fault
10001c80:	f7ff ff72 	bl	10001b68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
10001c84:	bd01      	pop	{r0, pc}
10001c86:	46c0      	nop			; (mov r8, r8)

10001c88 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
10001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001c8a:	24c0      	movs	r4, #192	; 0xc0
	int irq = 0;
10001c8c:	2200      	movs	r2, #0
10001c8e:	2603      	movs	r6, #3
10001c90:	25ff      	movs	r5, #255	; 0xff
10001c92:	00a4      	lsls	r4, r4, #2
10001c94:	0010      	movs	r0, r2
10001c96:	002f      	movs	r7, r5
10001c98:	4030      	ands	r0, r6
10001c9a:	00c0      	lsls	r0, r0, #3
10001c9c:	4087      	lsls	r7, r0
10001c9e:	4905      	ldr	r1, [pc, #20]	; (10001cb4 <z_arm_interrupt_init+0x2c>)
10001ca0:	0893      	lsrs	r3, r2, #2
10001ca2:	009b      	lsls	r3, r3, #2
10001ca4:	185b      	adds	r3, r3, r1
10001ca6:	5919      	ldr	r1, [r3, r4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
10001ca8:	3201      	adds	r2, #1
10001caa:	43b9      	bics	r1, r7
10001cac:	5119      	str	r1, [r3, r4]
10001cae:	2a1a      	cmp	r2, #26
10001cb0:	d1f0      	bne.n	10001c94 <z_arm_interrupt_init+0xc>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
10001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001cb4:	e000e100 	.word	0xe000e100

10001cb8 <__start>:
    bl z_arm_init_arch_hw_at_boot
#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
10001cb8:	b672      	cpsid	i

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
10001cba:	4807      	ldr	r0, [pc, #28]	; (10001cd8 <__start+0x20>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001cbc:	4907      	ldr	r1, [pc, #28]	; (10001cdc <__start+0x24>)
    adds r0, r0, r1
10001cbe:	1840      	adds	r0, r0, r1
    msr PSP, r0
10001cc0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
10001cc4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
10001cc8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
10001cca:	4308      	orrs	r0, r1
    msr CONTROL, r0
10001ccc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
10001cd0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
10001cd4:	f7ff fe8e 	bl	100019f4 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
10001cd8:	20000368 	.word	0x20000368
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
10001cdc:	00000800 	.word	0x00000800

10001ce0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
10001ce0:	b510      	push	{r4, lr}
	if (_current == thread) {
10001ce2:	4b0a      	ldr	r3, [pc, #40]	; (10001d0c <z_impl_k_thread_abort+0x2c>)
10001ce4:	689b      	ldr	r3, [r3, #8]
10001ce6:	4283      	cmp	r3, r0
10001ce8:	d10d      	bne.n	10001d06 <z_impl_k_thread_abort+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10001cea:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
10001cee:	2b00      	cmp	r3, #0
10001cf0:	d009      	beq.n	10001d06 <z_impl_k_thread_abort+0x26>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
10001cf2:	2280      	movs	r2, #128	; 0x80
10001cf4:	4b06      	ldr	r3, [pc, #24]	; (10001d10 <z_impl_k_thread_abort+0x30>)
10001cf6:	0552      	lsls	r2, r2, #21
10001cf8:	6859      	ldr	r1, [r3, #4]
10001cfa:	430a      	orrs	r2, r1
10001cfc:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
10001cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10001d00:	4904      	ldr	r1, [pc, #16]	; (10001d14 <z_impl_k_thread_abort+0x34>)
10001d02:	400a      	ands	r2, r1
10001d04:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
10001d06:	f001 fb45 	bl	10003394 <z_thread_abort>
}
10001d0a:	bd10      	pop	{r4, pc}
10001d0c:	20000324 	.word	0x20000324
10001d10:	e000ed00 	.word	0xe000ed00
10001d14:	ffff7fff 	.word	0xffff7fff

10001d18 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
10001d18:	4b01      	ldr	r3, [pc, #4]	; (10001d20 <__stdout_hook_install+0x8>)
10001d1a:	6018      	str	r0, [r3, #0]
}
10001d1c:	4770      	bx	lr
10001d1e:	46c0      	nop			; (mov r8, r8)
10001d20:	200000c4 	.word	0x200000c4

10001d24 <rp2040_init>:
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to set
 */
__force_inline static void hw_set_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001d24:	4b0e      	ldr	r3, [pc, #56]	; (10001d60 <rp2040_init+0x3c>)
10001d26:	4a0f      	ldr	r2, [pc, #60]	; (10001d64 <rp2040_init+0x40>)
#endif

LOG_MODULE_REGISTER(soc, CONFIG_SOC_LOG_LEVEL);

static int rp2040_init(const struct device *arg)
{
10001d28:	b570      	push	{r4, r5, r6, lr}
10001d2a:	601a      	str	r2, [r3, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001d2c:	4d0e      	ldr	r5, [pc, #56]	; (10001d68 <rp2040_init+0x44>)
10001d2e:	4b0f      	ldr	r3, [pc, #60]	; (10001d6c <rp2040_init+0x48>)
 *
 * \param bits Bit pattern indicating blocks to unreset. See \ref reset_bitmask
 */
static inline void unreset_block_wait(uint32_t bits) {
    hw_clear_bits(&resets_hw->reset, bits);
    while (~resets_hw->reset_done & bits)
10001d30:	4c0f      	ldr	r4, [pc, #60]	; (10001d70 <rp2040_init+0x4c>)
10001d32:	602b      	str	r3, [r5, #0]
10001d34:	0019      	movs	r1, r3
10001d36:	68a2      	ldr	r2, [r4, #8]
10001d38:	4391      	bics	r1, r2
10001d3a:	d1fb      	bne.n	10001d34 <rp2040_init+0x10>
			   ~(RESETS_RESET_ADC_BITS | RESETS_RESET_RTC_BITS |
			     RESETS_RESET_SPI0_BITS | RESETS_RESET_SPI1_BITS |
			     RESETS_RESET_UART0_BITS | RESETS_RESET_UART1_BITS |
			     RESETS_RESET_USBCTRL_BITS | RESETS_RESET_PWM_BITS));

	clocks_init();
10001d3c:	f000 fc4a 	bl	100025d4 <clocks_init>
10001d40:	4b0c      	ldr	r3, [pc, #48]	; (10001d74 <rp2040_init+0x50>)
10001d42:	602b      	str	r3, [r5, #0]
10001d44:	68a3      	ldr	r3, [r4, #8]
10001d46:	01db      	lsls	r3, r3, #7
10001d48:	3380      	adds	r3, #128	; 0x80
10001d4a:	d1fb      	bne.n	10001d44 <rp2040_init+0x20>
	__asm__ volatile("mrs %0, PRIMASK;"
10001d4c:	f3ef 8310 	mrs	r3, PRIMASK
10001d50:	b672      	cpsid	i
	if (key != 0U) {
10001d52:	2b00      	cmp	r3, #0
10001d54:	d102      	bne.n	10001d5c <rp2040_init+0x38>
	__asm__ volatile(
10001d56:	b662      	cpsie	i
10001d58:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
10001d5c:	2000      	movs	r0, #0
10001d5e:	bd70      	pop	{r4, r5, r6, pc}
10001d60:	4000e000 	.word	0x4000e000
10001d64:	ffffcdbf 	.word	0xffffcdbf
10001d68:	4000f000 	.word	0x4000f000
10001d6c:	003c3ffe 	.word	0x003c3ffe
10001d70:	4000c000 	.word	0x4000c000
10001d74:	01ffffff 	.word	0x01ffffff

10001d78 <adc_gain_invert>:

#include <zephyr/drivers/adc.h>

int adc_gain_invert(enum adc_gain gain,
		    int32_t *value)
{
10001d78:	b570      	push	{r4, r5, r6, lr}
10001d7a:	000c      	movs	r4, r1
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
10001d7c:	2813      	cmp	r0, #19
10001d7e:	d80f      	bhi.n	10001da0 <adc_gain_invert+0x28>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
10001d80:	4a09      	ldr	r2, [pc, #36]	; (10001da8 <adc_gain_invert+0x30>)
10001d82:	0040      	lsls	r0, r0, #1
10001d84:	5c85      	ldrb	r5, [r0, r2]
10001d86:	2d00      	cmp	r5, #0
10001d88:	d00a      	beq.n	10001da0 <adc_gain_invert+0x28>
10001d8a:	1812      	adds	r2, r2, r0
10001d8c:	7851      	ldrb	r1, [r2, #1]
10001d8e:	2900      	cmp	r1, #0
10001d90:	d006      	beq.n	10001da0 <adc_gain_invert+0x28>
			*value = (gdp->mul * *value) / gdp->div;
10001d92:	6820      	ldr	r0, [r4, #0]
10001d94:	4368      	muls	r0, r5
10001d96:	f7fe fa61 	bl	1000025c <__divsi3>
10001d9a:	6020      	str	r0, [r4, #0]
			rv = 0;
10001d9c:	2000      	movs	r0, #0
		}
	}

	return rv;
}
10001d9e:	bd70      	pop	{r4, r5, r6, pc}
	int rv = -EINVAL;
10001da0:	2016      	movs	r0, #22
10001da2:	4240      	negs	r0, r0
	return rv;
10001da4:	e7fb      	b.n	10001d9e <adc_gain_invert+0x26>
10001da6:	46c0      	nop			; (mov r8, r8)
10001da8:	10004e9c 	.word	0x10004e9c

10001dac <adc_rpi_channel_setup>:
		;
}

static int adc_rpi_channel_setup(const struct device *dev,
				 const struct adc_channel_cfg *channel_cfg)
{
10001dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct adc_rpi_config *config = dev->config;

	if (channel_cfg->channel_id >= config->num_channels) {
10001dae:	6840      	ldr	r0, [r0, #4]
10001db0:	790a      	ldrb	r2, [r1, #4]
10001db2:	7800      	ldrb	r0, [r0, #0]
10001db4:	06d3      	lsls	r3, r2, #27
10001db6:	0edb      	lsrs	r3, r3, #27
10001db8:	4298      	cmp	r0, r3
10001dba:	d80e      	bhi.n	10001dda <adc_rpi_channel_setup+0x2e>
		LOG_ERR("unsupported channel id '%d'", channel_cfg->channel_id);
10001dbc:	2000      	movs	r0, #0
10001dbe:	9303      	str	r3, [sp, #12]
10001dc0:	4b1a      	ldr	r3, [pc, #104]	; (10001e2c <adc_rpi_channel_setup+0x80>)
10001dc2:	2201      	movs	r2, #1
10001dc4:	9302      	str	r3, [sp, #8]
10001dc6:	491a      	ldr	r1, [pc, #104]	; (10001e30 <adc_rpi_channel_setup+0x84>)
10001dc8:	0003      	movs	r3, r0
10001dca:	9001      	str	r0, [sp, #4]
10001dcc:	9000      	str	r0, [sp, #0]
10001dce:	f002 f8b6 	bl	10003f3e <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
10001dd2:	2086      	movs	r0, #134	; 0x86
	}

	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
		LOG_ERR("Acquisition time is not valid");
		return -EINVAL;
10001dd4:	4240      	negs	r0, r0
		LOG_ERR("Gain is not valid");
		return -EINVAL;
	}

	return 0;
}
10001dd6:	b004      	add	sp, #16
10001dd8:	bd10      	pop	{r4, pc}
	if (channel_cfg->acquisition_time != ADC_ACQ_TIME_DEFAULT) {
10001dda:	8848      	ldrh	r0, [r1, #2]
10001ddc:	2800      	cmp	r0, #0
10001dde:	d00b      	beq.n	10001df8 <adc_rpi_channel_setup+0x4c>
		LOG_ERR("Acquisition time is not valid");
10001de0:	2000      	movs	r0, #0
10001de2:	4b14      	ldr	r3, [pc, #80]	; (10001e34 <adc_rpi_channel_setup+0x88>)
10001de4:	4912      	ldr	r1, [pc, #72]	; (10001e30 <adc_rpi_channel_setup+0x84>)
10001de6:	9302      	str	r3, [sp, #8]
10001de8:	0003      	movs	r3, r0
10001dea:	9001      	str	r0, [sp, #4]
10001dec:	9000      	str	r0, [sp, #0]
		LOG_ERR("Gain is not valid");
10001dee:	2201      	movs	r2, #1
10001df0:	f002 f8a5 	bl	10003f3e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
10001df4:	2016      	movs	r0, #22
10001df6:	e7ed      	b.n	10001dd4 <adc_rpi_channel_setup+0x28>
	if (channel_cfg->differential) {
10001df8:	2420      	movs	r4, #32
10001dfa:	0013      	movs	r3, r2
10001dfc:	4023      	ands	r3, r4
10001dfe:	4222      	tst	r2, r4
10001e00:	d009      	beq.n	10001e16 <adc_rpi_channel_setup+0x6a>
		LOG_ERR("unsupported differential mode");
10001e02:	4b0d      	ldr	r3, [pc, #52]	; (10001e38 <adc_rpi_channel_setup+0x8c>)
10001e04:	2201      	movs	r2, #1
10001e06:	9302      	str	r3, [sp, #8]
10001e08:	4909      	ldr	r1, [pc, #36]	; (10001e30 <adc_rpi_channel_setup+0x84>)
10001e0a:	0003      	movs	r3, r0
10001e0c:	9001      	str	r0, [sp, #4]
10001e0e:	9000      	str	r0, [sp, #0]
10001e10:	f002 f895 	bl	10003f3e <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
10001e14:	e7dd      	b.n	10001dd2 <adc_rpi_channel_setup+0x26>
	if (channel_cfg->gain != ADC_GAIN_1) {
10001e16:	780a      	ldrb	r2, [r1, #0]
	return 0;
10001e18:	0018      	movs	r0, r3
	if (channel_cfg->gain != ADC_GAIN_1) {
10001e1a:	2a08      	cmp	r2, #8
10001e1c:	d0db      	beq.n	10001dd6 <adc_rpi_channel_setup+0x2a>
		LOG_ERR("Gain is not valid");
10001e1e:	4a07      	ldr	r2, [pc, #28]	; (10001e3c <adc_rpi_channel_setup+0x90>)
10001e20:	4903      	ldr	r1, [pc, #12]	; (10001e30 <adc_rpi_channel_setup+0x84>)
10001e22:	9202      	str	r2, [sp, #8]
10001e24:	9301      	str	r3, [sp, #4]
10001e26:	9300      	str	r3, [sp, #0]
10001e28:	e7e1      	b.n	10001dee <adc_rpi_channel_setup+0x42>
10001e2a:	46c0      	nop			; (mov r8, r8)
10001e2c:	10004ec4 	.word	0x10004ec4
10001e30:	10004a30 	.word	0x10004a30
10001e34:	10004ee0 	.word	0x10004ee0
10001e38:	10004efe 	.word	0x10004efe
10001e3c:	10004f1c 	.word	0x10004f1c

10001e40 <adc_context_start_sampling>:
static void adc_context_start_sampling(struct adc_context *ctx)
{
	struct adc_rpi_data *data = CONTAINER_OF(ctx, struct adc_rpi_data,
						 ctx);

	data->channels = ctx->sequence.channels;
10001e40:	0002      	movs	r2, r0
{
10001e42:	b570      	push	{r4, r5, r6, lr}
	data->channels = ctx->sequence.channels;
10001e44:	1d03      	adds	r3, r0, #4
10001e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
10001e48:	32b4      	adds	r2, #180	; 0xb4
10001e4a:	6013      	str	r3, [r2, #0]
	data->repeat_buf = data->buf;
10001e4c:	0003      	movs	r3, r0
10001e4e:	30ac      	adds	r0, #172	; 0xac
10001e50:	6801      	ldr	r1, [r0, #0]
10001e52:	33b0      	adds	r3, #176	; 0xb0
10001e54:	6019      	str	r1, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001e56:	2180      	movs	r1, #128	; 0x80
10001e58:	4b0c      	ldr	r3, [pc, #48]	; (10001e8c <adc_context_start_sampling+0x4c>)
10001e5a:	0109      	lsls	r1, r1, #4
10001e5c:	6019      	str	r1, [r3, #0]
10001e5e:	2180      	movs	r1, #128	; 0x80
10001e60:	2504      	movs	r5, #4
10001e62:	4c0b      	ldr	r4, [pc, #44]	; (10001e90 <adc_context_start_sampling+0x50>)
10001e64:	00c9      	lsls	r1, r1, #3
10001e66:	6019      	str	r1, [r3, #0]
10001e68:	601d      	str	r5, [r3, #0]
10001e6a:	6021      	str	r1, [r4, #0]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
10001e6c:	6810      	ldr	r0, [r2, #0]
10001e6e:	f7fe faef 	bl	10000450 <__ffssi2>
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10001e72:	4b08      	ldr	r3, [pc, #32]	; (10001e94 <adc_context_start_sampling+0x54>)

	adc_clear_errors();

	/* Find next channel and start conversion */
	adc_select_input(find_lsb_set(data->channels) - 1);
10001e74:	3801      	subs	r0, #1
10001e76:	681b      	ldr	r3, [r3, #0]
 *
 * \param input Input to select.
 */
static inline void adc_select_input(uint input) {
    valid_params_if(ADC, input < NUM_ADC_CHANNELS);
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
10001e78:	0300      	lsls	r0, r0, #12
10001e7a:	4058      	eors	r0, r3
10001e7c:	23e0      	movs	r3, #224	; 0xe0
10001e7e:	01db      	lsls	r3, r3, #7
10001e80:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10001e82:	4b05      	ldr	r3, [pc, #20]	; (10001e98 <adc_context_start_sampling+0x58>)
10001e84:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001e86:	6025      	str	r5, [r4, #0]
	adc_start_once();
}
10001e88:	bd70      	pop	{r4, r5, r6, pc}
10001e8a:	46c0      	nop			; (mov r8, r8)
10001e8c:	4004e008 	.word	0x4004e008
10001e90:	4004e000 	.word	0x4004e000
10001e94:	4004c000 	.word	0x4004c000
10001e98:	4004d000 	.word	0x4004d000

10001e9c <adc_rpi_read_async>:
{
10001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adc_rpi_data *data = dev->data;
10001e9e:	6907      	ldr	r7, [r0, #16]
{
10001ea0:	b087      	sub	sp, #28

static inline void adc_context_lock(struct adc_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal)
{
	k_sem_take(&ctx->lock, K_FOREVER);
10001ea2:	003b      	movs	r3, r7
10001ea4:	3340      	adds	r3, #64	; 0x40
10001ea6:	0004      	movs	r4, r0
10001ea8:	000d      	movs	r5, r1
10001eaa:	0016      	movs	r6, r2
10001eac:	9305      	str	r3, [sp, #20]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
10001eae:	2201      	movs	r2, #1
10001eb0:	4252      	negs	r2, r2
10001eb2:	17d3      	asrs	r3, r2, #31
10001eb4:	9805      	ldr	r0, [sp, #20]
10001eb6:	f000 ff9d 	bl	10002df4 <z_impl_k_sem_take>
	adc_context_lock(&data->ctx, async ? true : false, async);
10001eba:	0033      	movs	r3, r6
10001ebc:	1e5a      	subs	r2, r3, #1
10001ebe:	4193      	sbcs	r3, r2

#ifdef CONFIG_ADC_ASYNC
	ctx->asynchronous = asynchronous;
10001ec0:	003a      	movs	r2, r7
10001ec2:	3278      	adds	r2, #120	; 0x78
10001ec4:	7013      	strb	r3, [r2, #0]
10001ec6:	9204      	str	r2, [sp, #16]
	ctx->signal = signal;
10001ec8:	677e      	str	r6, [r7, #116]	; 0x74
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10001eca:	7c2b      	ldrb	r3, [r5, #16]
	const struct adc_rpi_config *config = dev->config;
10001ecc:	6862      	ldr	r2, [r4, #4]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10001ece:	1e59      	subs	r1, r3, #1
	struct adc_rpi_data *data = dev->data;
10001ed0:	6924      	ldr	r4, [r4, #16]
	if (sequence->resolution > ADC_RPI_MAX_RESOLUTION ||
10001ed2:	290b      	cmp	r1, #11
10001ed4:	d910      	bls.n	10001ef8 <adc_rpi_read_async+0x5c>
		LOG_ERR("unsupported resolution %d", sequence->resolution);
10001ed6:	9303      	str	r3, [sp, #12]
10001ed8:	4949      	ldr	r1, [pc, #292]	; (10002000 <adc_rpi_read_async+0x164>)
10001eda:	4b4a      	ldr	r3, [pc, #296]	; (10002004 <adc_rpi_read_async+0x168>)
10001edc:	2000      	movs	r0, #0
10001ede:	9302      	str	r3, [sp, #8]
10001ee0:	2201      	movs	r2, #1
10001ee2:	0003      	movs	r3, r0
10001ee4:	9001      	str	r0, [sp, #4]
10001ee6:	9000      	str	r0, [sp, #0]
10001ee8:	f002 f829 	bl	10003f3e <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
10001eec:	2486      	movs	r4, #134	; 0x86
		return -ENOMEM;
10001eee:	4264      	negs	r4, r4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
10001ef0:	9805      	ldr	r0, [sp, #20]
10001ef2:	f000 ff5d 	bl	10002db0 <z_impl_k_sem_give>
	return err;
10001ef6:	e06b      	b.n	10001fd0 <adc_rpi_read_async+0x134>
	if (find_msb_set(sequence->channels) > config->num_channels) {
10001ef8:	686f      	ldr	r7, [r5, #4]
10001efa:	7816      	ldrb	r6, [r2, #0]
	if (op == 0) {
10001efc:	2f00      	cmp	r7, #0
10001efe:	d11f      	bne.n	10001f40 <adc_rpi_read_async+0xa4>
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
10001f00:	2201      	movs	r2, #1
10001f02:	3e01      	subs	r6, #1
10001f04:	40b2      	lsls	r2, r6
	uint8_t channels = 0;
10001f06:	2300      	movs	r3, #0
		if (mask & sequence->channels) {
10001f08:	423a      	tst	r2, r7
10001f0a:	d001      	beq.n	10001f10 <adc_rpi_read_async+0x74>
			channels++;
10001f0c:	3301      	adds	r3, #1
10001f0e:	b2db      	uxtb	r3, r3
	for (mask = BIT(config->num_channels - 1); mask != 0; mask >>= 1) {
10001f10:	0852      	lsrs	r2, r2, #1
10001f12:	d1f9      	bne.n	10001f08 <adc_rpi_read_async+0x6c>
	if (sequence->options) {
10001f14:	682a      	ldr	r2, [r5, #0]
	needed = channels * sizeof(uint16_t);
10001f16:	005b      	lsls	r3, r3, #1
	if (sequence->options) {
10001f18:	2a00      	cmp	r2, #0
10001f1a:	d002      	beq.n	10001f22 <adc_rpi_read_async+0x86>
		needed *= (1 + sequence->options->extra_samplings);
10001f1c:	8992      	ldrh	r2, [r2, #12]
10001f1e:	3201      	adds	r2, #1
10001f20:	4353      	muls	r3, r2
	if (sequence->buffer_size < needed) {
10001f22:	68ea      	ldr	r2, [r5, #12]
10001f24:	429a      	cmp	r2, r3
10001f26:	d216      	bcs.n	10001f56 <adc_rpi_read_async+0xba>
		LOG_ERR("buffer size too small");
10001f28:	2000      	movs	r0, #0
10001f2a:	4b37      	ldr	r3, [pc, #220]	; (10002008 <adc_rpi_read_async+0x16c>)
10001f2c:	2201      	movs	r2, #1
10001f2e:	9302      	str	r3, [sp, #8]
10001f30:	4933      	ldr	r1, [pc, #204]	; (10002000 <adc_rpi_read_async+0x164>)
10001f32:	0003      	movs	r3, r0
10001f34:	9001      	str	r0, [sp, #4]
10001f36:	9000      	str	r0, [sp, #0]
10001f38:	f002 f801 	bl	10003f3e <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
10001f3c:	240c      	movs	r4, #12
10001f3e:	e7d6      	b.n	10001eee <adc_rpi_read_async+0x52>
	return 32 - __builtin_clz(op);
10001f40:	0038      	movs	r0, r7
10001f42:	f7fe f9e1 	bl	10000308 <__clzsi2>
10001f46:	2320      	movs	r3, #32
10001f48:	1a1b      	subs	r3, r3, r0
	if (find_msb_set(sequence->channels) > config->num_channels) {
10001f4a:	42b3      	cmp	r3, r6
10001f4c:	d9d8      	bls.n	10001f00 <adc_rpi_read_async+0x64>
		LOG_ERR("unsupported channels in mask: 0x%08x",
10001f4e:	492c      	ldr	r1, [pc, #176]	; (10002000 <adc_rpi_read_async+0x164>)
10001f50:	4b2e      	ldr	r3, [pc, #184]	; (1000200c <adc_rpi_read_async+0x170>)
10001f52:	9703      	str	r7, [sp, #12]
10001f54:	e7c2      	b.n	10001edc <adc_rpi_read_async+0x40>
	data->buf = sequence->buffer;
10001f56:	0023      	movs	r3, r4
10001f58:	68aa      	ldr	r2, [r5, #8]
10001f5a:	33ac      	adds	r3, #172	; 0xac
10001f5c:	601a      	str	r2, [r3, #0]
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
10001f5e:	002a      	movs	r2, r5
10001f60:	3b30      	subs	r3, #48	; 0x30
10001f62:	ca43      	ldmia	r2!, {r0, r1, r6}
10001f64:	c343      	stmia	r3!, {r0, r1, r6}
	ctx->status = 0;
10001f66:	2600      	movs	r6, #0
	ctx->sequence = *sequence;
10001f68:	ca03      	ldmia	r2!, {r0, r1}
10001f6a:	c303      	stmia	r3!, {r0, r1}
	ctx->status = 0;
10001f6c:	6726      	str	r6, [r4, #112]	; 0x70

	if (sequence->options) {
10001f6e:	682b      	ldr	r3, [r5, #0]
10001f70:	42b3      	cmp	r3, r6
10001f72:	d030      	beq.n	10001fd6 <adc_rpi_read_async+0x13a>
		ctx->options = *sequence->options;
10001f74:	0025      	movs	r5, r4
10001f76:	3590      	adds	r5, #144	; 0x90
10001f78:	002a      	movs	r2, r5
10001f7a:	cb83      	ldmia	r3!, {r0, r1, r7}
10001f7c:	c283      	stmia	r2!, {r0, r1, r7}
10001f7e:	681b      	ldr	r3, [r3, #0]
10001f80:	6013      	str	r3, [r2, #0]
		ctx->sequence.options = &ctx->options;
		ctx->sampling_index = 0U;
10001f82:	0023      	movs	r3, r4
10001f84:	33a0      	adds	r3, #160	; 0xa0
		ctx->sequence.options = &ctx->options;
10001f86:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
10001f88:	801e      	strh	r6, [r3, #0]

		if (ctx->options.interval_us != 0U) {
10001f8a:	682b      	ldr	r3, [r5, #0]
10001f8c:	42b3      	cmp	r3, r6
10001f8e:	d022      	beq.n	10001fd6 <adc_rpi_read_async+0x13a>
		union { uintptr_t x; atomic_val_t val; } parm1 = { .val = value };
		return (atomic_val_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ATOMIC_SET);
	}
#endif
	compiler_barrier();
	return z_impl_atomic_set(target, value);
10001f90:	0031      	movs	r1, r6
10001f92:	0020      	movs	r0, r4
10001f94:	f002 fc3d 	bl	10004812 <z_impl_atomic_set>
	k_timer_start(&ctx->timer, K_NO_WAIT, K_USEC(ctx->options.interval_us));
10001f98:	0031      	movs	r1, r6
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
10001f9a:	2263      	movs	r2, #99	; 0x63
10001f9c:	2300      	movs	r3, #0
10001f9e:	6828      	ldr	r0, [r5, #0]
10001fa0:	1880      	adds	r0, r0, r2
10001fa2:	4159      	adcs	r1, r3
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
10001fa4:	2264      	movs	r2, #100	; 0x64
10001fa6:	2300      	movs	r3, #0
10001fa8:	f7fe f9ec 	bl	10000384 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
10001fac:	9000      	str	r0, [sp, #0]
10001fae:	0020      	movs	r0, r4
10001fb0:	2200      	movs	r2, #0
10001fb2:	2300      	movs	r3, #0
10001fb4:	9101      	str	r1, [sp, #4]
10001fb6:	3008      	adds	r0, #8
10001fb8:	f001 fc24 	bl	10003804 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
10001fbc:	0023      	movs	r3, r4
10001fbe:	3378      	adds	r3, #120	; 0x78
10001fc0:	781b      	ldrb	r3, [r3, #0]
10001fc2:	2b00      	cmp	r3, #0
10001fc4:	d00b      	beq.n	10001fde <adc_rpi_read_async+0x142>
	if (ctx->asynchronous && (status == 0)) {
10001fc6:	9b04      	ldr	r3, [sp, #16]
10001fc8:	781c      	ldrb	r4, [r3, #0]
10001fca:	2c00      	cmp	r4, #0
10001fcc:	d090      	beq.n	10001ef0 <adc_rpi_read_async+0x54>
		return 0;
10001fce:	2400      	movs	r4, #0
}
10001fd0:	0020      	movs	r0, r4
10001fd2:	b007      	add	sp, #28
10001fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
10001fd6:	0020      	movs	r0, r4
10001fd8:	f7ff ff32 	bl	10001e40 <adc_context_start_sampling>
10001fdc:	e7ee      	b.n	10001fbc <adc_rpi_read_async+0x120>
	k_sem_take(&ctx->sync, K_FOREVER);
10001fde:	0020      	movs	r0, r4
	return z_impl_k_sem_take(sem, timeout);
10001fe0:	2201      	movs	r2, #1
10001fe2:	4252      	negs	r2, r2
10001fe4:	17d3      	asrs	r3, r2, #31
10001fe6:	3058      	adds	r0, #88	; 0x58
10001fe8:	f000 ff04 	bl	10002df4 <z_impl_k_sem_take>
	if (ctx->asynchronous && (status == 0)) {
10001fec:	9b04      	ldr	r3, [sp, #16]
	return ctx->status;
10001fee:	6f24      	ldr	r4, [r4, #112]	; 0x70
	if (ctx->asynchronous && (status == 0)) {
10001ff0:	781b      	ldrb	r3, [r3, #0]
10001ff2:	2b00      	cmp	r3, #0
10001ff4:	d100      	bne.n	10001ff8 <adc_rpi_read_async+0x15c>
10001ff6:	e77b      	b.n	10001ef0 <adc_rpi_read_async+0x54>
10001ff8:	2c00      	cmp	r4, #0
10001ffa:	d000      	beq.n	10001ffe <adc_rpi_read_async+0x162>
10001ffc:	e778      	b.n	10001ef0 <adc_rpi_read_async+0x54>
10001ffe:	e7e6      	b.n	10001fce <adc_rpi_read_async+0x132>
10002000:	10004a30 	.word	0x10004a30
10002004:	10004f2e 	.word	0x10004f2e
10002008:	10004f6d 	.word	0x10004f6d
1000200c:	10004f48 	.word	0x10004f48

10002010 <adc_rpi_isr>:
 *  \ingroup hardware_adc
 *
 * \return Returns true if the FIFO is empty
 */
static inline bool adc_fifo_is_empty(void) {
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
10002010:	2180      	movs	r1, #128	; 0x80
{
10002012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (uint16_t)adc_hw->result;
10002014:	4d3e      	ldr	r5, [pc, #248]	; (10002110 <adc_rpi_isr+0x100>)
	struct adc_rpi_data *data = dev->data;
10002016:	6904      	ldr	r4, [r0, #16]
	return (uint16_t)adc_hw->result;
10002018:	686a      	ldr	r2, [r5, #4]
    return (adc_hw->cs & ADC_CS_AINSEL_BITS) >> ADC_CS_AINSEL_LSB;
1000201a:	682b      	ldr	r3, [r5, #0]
1000201c:	b292      	uxth	r2, r2
1000201e:	045b      	lsls	r3, r3, #17
10002020:	0f5b      	lsrs	r3, r3, #29
    return !!(adc_hw->fcs & ADC_FCS_EMPTY_BITS);
10002022:	0049      	lsls	r1, r1, #1
10002024:	68ae      	ldr	r6, [r5, #8]
	while (!adc_fifo_is_empty()) {
10002026:	420e      	tst	r6, r1
10002028:	d00d      	beq.n	10002046 <adc_rpi_isr+0x36>
	return (adc_hw->cs & ADC_CS_ERR_BITS) ? true : false;
1000202a:	6829      	ldr	r1, [r5, #0]
	if (adc_get_err()) {
1000202c:	0589      	lsls	r1, r1, #22
1000202e:	d514      	bpl.n	1000205a <adc_rpi_isr+0x4a>
	if (ctx->asynchronous) {
10002030:	0023      	movs	r3, r4
10002032:	3378      	adds	r3, #120	; 0x78
10002034:	781b      	ldrb	r3, [r3, #0]
10002036:	2b00      	cmp	r3, #0
10002038:	d007      	beq.n	1000204a <adc_rpi_isr+0x3a>
1000203a:	2105      	movs	r1, #5
1000203c:	4249      	negs	r1, r1
1000203e:	0020      	movs	r0, r4
10002040:	f001 ffa2 	bl	10003f88 <adc_context_complete.part.0>
10002044:	e044      	b.n	100020d0 <adc_rpi_isr+0xc0>
 *  \ingroup hardware_adc
 *
 * Pops the latest result from the ADC FIFO.
 */
static inline uint16_t adc_fifo_get(void) {
    return (uint16_t)adc_hw->fifo;
10002046:	68ee      	ldr	r6, [r5, #12]
10002048:	e7ec      	b.n	10002024 <adc_rpi_isr+0x14>
		ctx->status = status;
1000204a:	2305      	movs	r3, #5
1000204c:	425b      	negs	r3, r3
1000204e:	6723      	str	r3, [r4, #112]	; 0x70
	k_sem_give(&ctx->sync);
10002050:	0020      	movs	r0, r4
10002052:	3058      	adds	r0, #88	; 0x58
	z_impl_k_sem_give(sem);
10002054:	f000 feac 	bl	10002db0 <z_impl_k_sem_give>
}
10002058:	e03a      	b.n	100020d0 <adc_rpi_isr+0xc0>
	*data->buf++ = result;
1000205a:	0026      	movs	r6, r4
1000205c:	36ac      	adds	r6, #172	; 0xac
1000205e:	6831      	ldr	r1, [r6, #0]
10002060:	1c8f      	adds	r7, r1, #2
10002062:	6037      	str	r7, [r6, #0]
10002064:	800a      	strh	r2, [r1, #0]
	data->channels &= ~(BIT(ainsel));
10002066:	2201      	movs	r2, #1
10002068:	0021      	movs	r1, r4
1000206a:	409a      	lsls	r2, r3
1000206c:	31b4      	adds	r1, #180	; 0xb4
1000206e:	680b      	ldr	r3, [r1, #0]
10002070:	4393      	bics	r3, r2
10002072:	600b      	str	r3, [r1, #0]
	if (data->channels == 0) {
10002074:	d13b      	bne.n	100020ee <adc_rpi_isr+0xde>
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
10002076:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
10002078:	2b00      	cmp	r3, #0
1000207a:	d031      	beq.n	100020e0 <adc_rpi_isr+0xd0>
		adc_sequence_callback callback = ctx->options.callback;
1000207c:	0023      	movs	r3, r4
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
1000207e:	0025      	movs	r5, r4
10002080:	0027      	movs	r7, r4
		adc_sequence_callback callback = ctx->options.callback;
10002082:	3394      	adds	r3, #148	; 0x94
10002084:	681b      	ldr	r3, [r3, #0]
			action = callback(dev,
10002086:	35a0      	adds	r5, #160	; 0xa0
10002088:	882a      	ldrh	r2, [r5, #0]
1000208a:	3790      	adds	r7, #144	; 0x90
		if (callback) {
1000208c:	2b00      	cmp	r3, #0
1000208e:	d005      	beq.n	1000209c <adc_rpi_isr+0x8c>
			action = callback(dev,
10002090:	3938      	subs	r1, #56	; 0x38
10002092:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
10002094:	2801      	cmp	r0, #1
10002096:	d00a      	beq.n	100020ae <adc_rpi_isr+0x9e>
10002098:	2802      	cmp	r0, #2
1000209a:	d01a      	beq.n	100020d2 <adc_rpi_isr+0xc2>
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
			    ctx->options.extra_samplings) {
1000209c:	0022      	movs	r2, r4
1000209e:	329c      	adds	r2, #156	; 0x9c
			if (ctx->sampling_index <
100020a0:	882b      	ldrh	r3, [r5, #0]
100020a2:	8812      	ldrh	r2, [r2, #0]
100020a4:	429a      	cmp	r2, r3
100020a6:	d914      	bls.n	100020d2 <adc_rpi_isr+0xc2>
				++ctx->sampling_index;
100020a8:	3301      	adds	r3, #1
100020aa:	802b      	strh	r3, [r5, #0]
			} else {
				finish = true;
			}
		}

		if (!finish) {
100020ac:	e003      	b.n	100020b6 <adc_rpi_isr+0xa6>
{
	struct adc_rpi_data *data = CONTAINER_OF(ctx, struct adc_rpi_data,
						 ctx);

	if (repeat_sampling) {
		data->buf = data->repeat_buf;
100020ae:	0023      	movs	r3, r4
100020b0:	33b0      	adds	r3, #176	; 0xb0
100020b2:	681b      	ldr	r3, [r3, #0]
100020b4:	6033      	str	r3, [r6, #0]
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
100020b6:	683b      	ldr	r3, [r7, #0]
100020b8:	2b00      	cmp	r3, #0
100020ba:	d103      	bne.n	100020c4 <adc_rpi_isr+0xb4>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
100020bc:	0020      	movs	r0, r4
100020be:	f7ff febf 	bl	10001e40 <adc_context_start_sampling>
100020c2:	e005      	b.n	100020d0 <adc_rpi_isr+0xc0>
	return z_impl_atomic_sub(target, value);
100020c4:	2101      	movs	r1, #1
100020c6:	0020      	movs	r0, r4
100020c8:	f002 fb96 	bl	100047f8 <z_impl_atomic_sub>
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
100020cc:	2801      	cmp	r0, #1
100020ce:	dcf5      	bgt.n	100020bc <adc_rpi_isr+0xac>
}
100020d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
100020d2:	683b      	ldr	r3, [r7, #0]
100020d4:	2b00      	cmp	r3, #0
100020d6:	d003      	beq.n	100020e0 <adc_rpi_isr+0xd0>
	k_timer_stop(&ctx->timer);
100020d8:	0020      	movs	r0, r4
100020da:	3008      	adds	r0, #8
	z_impl_k_timer_stop(timer);
100020dc:	f002 fb66 	bl	100047ac <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
100020e0:	0023      	movs	r3, r4
100020e2:	3378      	adds	r3, #120	; 0x78
100020e4:	781b      	ldrb	r3, [r3, #0]
100020e6:	2b00      	cmp	r3, #0
100020e8:	d0b2      	beq.n	10002050 <adc_rpi_isr+0x40>
100020ea:	2100      	movs	r1, #0
100020ec:	e7a7      	b.n	1000203e <adc_rpi_isr+0x2e>
	return __builtin_ffs(op);
100020ee:	0018      	movs	r0, r3
100020f0:	f7fe f9ae 	bl	10000450 <__ffssi2>
	ainsel = (uint8_t)(find_lsb_set(data->channels) - 1);
100020f4:	3801      	subs	r0, #1
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100020f6:	682b      	ldr	r3, [r5, #0]
	adc_select_input(ainsel);
100020f8:	b2c0      	uxtb	r0, r0
    hw_write_masked(&adc_hw->cs, input << ADC_CS_AINSEL_LSB, ADC_CS_AINSEL_BITS);
100020fa:	0300      	lsls	r0, r0, #12
100020fc:	4058      	eors	r0, r3
100020fe:	23e0      	movs	r3, #224	; 0xe0
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002100:	2204      	movs	r2, #4
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002102:	01db      	lsls	r3, r3, #7
10002104:	4018      	ands	r0, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002106:	4b03      	ldr	r3, [pc, #12]	; (10002114 <adc_rpi_isr+0x104>)
10002108:	6018      	str	r0, [r3, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000210a:	4b03      	ldr	r3, [pc, #12]	; (10002118 <adc_rpi_isr+0x108>)
1000210c:	601a      	str	r2, [r3, #0]
}
1000210e:	e7df      	b.n	100020d0 <adc_rpi_isr+0xc0>
10002110:	4004c000 	.word	0x4004c000
10002114:	4004d000 	.word	0x4004d000
10002118:	4004e000 	.word	0x4004e000

1000211c <adc_rpi_init>:
 * @param dev RaspberryPi Pico ADC device
 *
 * @return 0 on success
 */
static int adc_rpi_init(const struct device *dev)
{
1000211c:	b510      	push	{r4, lr}
	const struct adc_rpi_config *config = dev->config;
	struct adc_rpi_data *data = dev->data;

	config->irq_configure();
1000211e:	6843      	ldr	r3, [r0, #4]
	struct adc_rpi_data *data = dev->data;
10002120:	6904      	ldr	r4, [r0, #16]
	config->irq_configure();
10002122:	685b      	ldr	r3, [r3, #4]
10002124:	4798      	blx	r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002126:	4b0e      	ldr	r3, [pc, #56]	; (10002160 <adc_rpi_init+0x44>)
10002128:	681a      	ldr	r2, [r3, #0]
1000212a:	4b0e      	ldr	r3, [pc, #56]	; (10002164 <adc_rpi_init+0x48>)
1000212c:	4053      	eors	r3, r2
1000212e:	4a0e      	ldr	r2, [pc, #56]	; (10002168 <adc_rpi_init+0x4c>)
10002130:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002132:	4a0e      	ldr	r2, [pc, #56]	; (1000216c <adc_rpi_init+0x50>)
10002134:	6013      	str	r3, [r2, #0]
    adc_hw->div = (uint32_t)(clkdiv * (float) (1 << ADC_DIV_INT_LSB));
10002136:	2200      	movs	r2, #0
10002138:	4b0d      	ldr	r3, [pc, #52]	; (10002170 <adc_rpi_init+0x54>)
1000213a:	611a      	str	r2, [r3, #16]
	adc_hw->cs = ADC_CS_EN_BITS;
1000213c:	3201      	adds	r2, #1
1000213e:	601a      	str	r2, [r3, #0]
	while (!(adc_hw->cs & ADC_CS_READY_BITS))
10002140:	32ff      	adds	r2, #255	; 0xff
10002142:	6819      	ldr	r1, [r3, #0]
10002144:	4211      	tst	r1, r2
10002146:	d0fc      	beq.n	10002142 <adc_rpi_init+0x26>
 *  \ingroup hardware_adc
 *
 * \param enabled Set to true to enable the ADC interrupts, false to disable
 */
static inline void adc_irq_set_enabled(bool enabled) {
    adc_hw->inte = !!enabled;
10002148:	2201      	movs	r2, #1
1000214a:	619a      	str	r2, [r3, #24]
	if (!k_sem_count_get(&ctx->lock)) {
1000214c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
1000214e:	2b00      	cmp	r3, #0
10002150:	d103      	bne.n	1000215a <adc_rpi_init+0x3e>
		k_sem_give(&ctx->lock);
10002152:	0020      	movs	r0, r4
10002154:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
10002156:	f000 fe2b 	bl	10002db0 <z_impl_k_sem_give>
	adc_irq_set_enabled(true);

	adc_context_unlock_unconditionally(&data->ctx);

	return 0;
}
1000215a:	2000      	movs	r0, #0
1000215c:	bd10      	pop	{r4, pc}
1000215e:	46c0      	nop			; (mov r8, r8)
10002160:	4004c008 	.word	0x4004c008
10002164:	01000007 	.word	0x01000007
10002168:	0f00000f 	.word	0x0f00000f
1000216c:	4004d008 	.word	0x4004d008
10002170:	4004c000 	.word	0x4004c000

10002174 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
10002174:	b510      	push	{r4, lr}
10002176:	4808      	ldr	r0, [pc, #32]	; (10002198 <uart_console_init+0x24>)
10002178:	f002 f9ce 	bl	10004518 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
1000217c:	2800      	cmp	r0, #0
1000217e:	d008      	beq.n	10002192 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
10002180:	4c06      	ldr	r4, [pc, #24]	; (1000219c <uart_console_init+0x28>)
10002182:	0020      	movs	r0, r4
10002184:	f7ff fdc8 	bl	10001d18 <__stdout_hook_install>
	__printk_hook_install(console_out);
10002188:	0020      	movs	r0, r4
1000218a:	f7fe fcc9 	bl	10000b20 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
1000218e:	2000      	movs	r0, #0
}
10002190:	bd10      	pop	{r4, pc}
		return -ENODEV;
10002192:	2013      	movs	r0, #19
10002194:	4240      	negs	r0, r0
10002196:	e7fb      	b.n	10002190 <uart_console_init+0x1c>
10002198:	100048f8 	.word	0x100048f8
1000219c:	100021a1 	.word	0x100021a1

100021a0 <console_out>:
{
100021a0:	b570      	push	{r4, r5, r6, lr}
100021a2:	0004      	movs	r4, r0
100021a4:	4d07      	ldr	r5, [pc, #28]	; (100021c4 <console_out+0x24>)
	if ('\n' == c) {
100021a6:	280a      	cmp	r0, #10
100021a8:	d104      	bne.n	100021b4 <console_out+0x14>
100021aa:	68ab      	ldr	r3, [r5, #8]
100021ac:	210d      	movs	r1, #13
100021ae:	0028      	movs	r0, r5
100021b0:	685b      	ldr	r3, [r3, #4]
100021b2:	4798      	blx	r3
100021b4:	68ab      	ldr	r3, [r5, #8]
100021b6:	0028      	movs	r0, r5
100021b8:	685b      	ldr	r3, [r3, #4]
100021ba:	b2e1      	uxtb	r1, r4
100021bc:	4798      	blx	r3
}
100021be:	0020      	movs	r0, r4
100021c0:	bd70      	pop	{r4, r5, r6, pc}
100021c2:	46c0      	nop			; (mov r8, r8)
100021c4:	100048f8 	.word	0x100048f8

100021c8 <gpio_rpi_isr>:
	.pin_interrupt_configure = gpio_rpi_pin_interrupt_configure,
	.manage_callback = gpio_rpi_manage_callback,
};

static void gpio_rpi_isr(const struct device *dev)
{
100021c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100021ca:	0006      	movs	r6, r0
	const io_rw_32 *status_reg;
	uint32_t events;
	uint32_t pin;

	irq_ctrl_base = &iobank0_hw->proc0_irq_ctrl;
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100021cc:	2400      	movs	r4, #0
	struct gpio_rpi_data *data = dev->data;
100021ce:	6903      	ldr	r3, [r0, #16]
100021d0:	9301      	str	r3, [sp, #4]
		status_reg = &irq_ctrl_base->ints[pin / 8];
100021d2:	08e3      	lsrs	r3, r4, #3
		events = (*status_reg >> 4 * (pin % 8)) & ALL_EVENTS;
100021d4:	4a14      	ldr	r2, [pc, #80]	; (10002228 <gpio_rpi_isr+0x60>)
100021d6:	3308      	adds	r3, #8
100021d8:	009b      	lsls	r3, r3, #2
100021da:	589b      	ldr	r3, [r3, r2]
100021dc:	2207      	movs	r2, #7
100021de:	4022      	ands	r2, r4
100021e0:	0092      	lsls	r2, r2, #2
100021e2:	40d3      	lsrs	r3, r2
		if (events) {
100021e4:	220f      	movs	r2, #15
100021e6:	4213      	tst	r3, r2
100021e8:	d103      	bne.n	100021f2 <gpio_rpi_isr+0x2a>
	for (pin = 0; pin < NUM_BANK0_GPIOS; pin++) {
100021ea:	3401      	adds	r4, #1
100021ec:	2c1e      	cmp	r4, #30
100021ee:	d1f0      	bne.n	100021d2 <gpio_rpi_isr+0xa>
			gpio_acknowledge_irq(pin, ALL_EVENTS);
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
		}
	}
}
100021f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			gpio_acknowledge_irq(pin, ALL_EVENTS);
100021f2:	210f      	movs	r1, #15
100021f4:	0020      	movs	r0, r4
100021f6:	f000 fb33 	bl	10002860 <gpio_acknowledge_irq>
			gpio_fire_callbacks(&data->callbacks, dev, BIT(pin));
100021fa:	9b01      	ldr	r3, [sp, #4]
100021fc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
100021fe:	2900      	cmp	r1, #0
10002200:	d0f3      	beq.n	100021ea <gpio_rpi_isr+0x22>
10002202:	2701      	movs	r7, #1
10002204:	40a7      	lsls	r7, r4

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
10002206:	680d      	ldr	r5, [r1, #0]
10002208:	2900      	cmp	r1, #0
1000220a:	d0ee      	beq.n	100021ea <gpio_rpi_isr+0x22>
		if (cb->pin_mask & pins) {
1000220c:	688b      	ldr	r3, [r1, #8]
1000220e:	001a      	movs	r2, r3
10002210:	403a      	ands	r2, r7
10002212:	423b      	tst	r3, r7
10002214:	d002      	beq.n	1000221c <gpio_rpi_isr+0x54>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
10002216:	0030      	movs	r0, r6
10002218:	684b      	ldr	r3, [r1, #4]
1000221a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
1000221c:	1e2b      	subs	r3, r5, #0
1000221e:	d000      	beq.n	10002222 <gpio_rpi_isr+0x5a>
10002220:	682b      	ldr	r3, [r5, #0]
10002222:	0029      	movs	r1, r5
10002224:	001d      	movs	r5, r3
10002226:	e7ef      	b.n	10002208 <gpio_rpi_isr+0x40>
10002228:	40014100 	.word	0x40014100

1000222c <uart_rpi_irq_err_disable>:
}

static void uart_rpi_irq_err_disable(const struct device *dev)
{
	const struct uart_rpi_config * const config = dev->config;
	uart_hw_t * const uart_hw = config->uart_regs;
1000222c:	6843      	ldr	r3, [r0, #4]

	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
1000222e:	4903      	ldr	r1, [pc, #12]	; (1000223c <uart_rpi_irq_err_disable+0x10>)
	uart_hw_t * const uart_hw = config->uart_regs;
10002230:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~(UART_UARTIMSC_OEIM_BITS |
10002232:	6b93      	ldr	r3, [r2, #56]	; 0x38
10002234:	400b      	ands	r3, r1
10002236:	6393      	str	r3, [r2, #56]	; 0x38
			   UART_UARTIMSC_BEIM_BITS |
			   UART_UARTIMSC_PEIM_BITS |
			   UART_UARTIMSC_FEIM_BITS |
			   UART_UARTIMSC_RTIM_BITS);
}
10002238:	4770      	bx	lr
1000223a:	46c0      	nop			; (mov r8, r8)
1000223c:	fffff83f 	.word	0xfffff83f

10002240 <uart_rpi_set_format.isra.0>:
static int uart_rpi_set_format(const struct device *dev, const struct uart_config *cfg)
10002240:	b510      	push	{r4, lr}
10002242:	2b03      	cmp	r3, #3
10002244:	d823      	bhi.n	1000228e <uart_rpi_set_format.isra.0+0x4e>
	switch (cfg->stop_bits) {
10002246:	2a01      	cmp	r2, #1
10002248:	d002      	beq.n	10002250 <uart_rpi_set_format.isra.0+0x10>
1000224a:	2a03      	cmp	r2, #3
1000224c:	d11f      	bne.n	1000228e <uart_rpi_set_format.isra.0+0x4e>
1000224e:	3a01      	subs	r2, #1
	switch (cfg->parity) {
10002250:	2902      	cmp	r1, #2
10002252:	d81c      	bhi.n	1000228e <uart_rpi_set_format.isra.0+0x4e>
	uart_inst_t * const uart_inst = config->uart_dev;
10002254:	6804      	ldr	r4, [r0, #0]
    invalid_params_if(UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002256:	3a01      	subs	r2, #1
10002258:	480e      	ldr	r0, [pc, #56]	; (10002294 <uart_rpi_set_format.isra.0+0x54>)
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000225a:	015b      	lsls	r3, r3, #5
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000225c:	00d2      	lsls	r2, r2, #3
1000225e:	5c41      	ldrb	r1, [r0, r1]
                   ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002260:	431a      	orrs	r2, r3
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002262:	0020      	movs	r0, r4
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002264:	2300      	movs	r3, #0
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002266:	302c      	adds	r0, #44	; 0x2c
                   (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002268:	4299      	cmp	r1, r3
1000226a:	d005      	beq.n	10002278 <uart_rpi_set_format.isra.0+0x38>
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000226c:	3302      	adds	r3, #2
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
1000226e:	3901      	subs	r1, #1
                   ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002270:	431a      	orrs	r2, r3
                   (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
10002272:	424b      	negs	r3, r1
10002274:	4159      	adcs	r1, r3
10002276:	008b      	lsls	r3, r1, #2
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002278:	431a      	orrs	r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000227a:	236e      	movs	r3, #110	; 0x6e
1000227c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
1000227e:	404a      	eors	r2, r1
10002280:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002282:	2380      	movs	r3, #128	; 0x80
10002284:	015b      	lsls	r3, r3, #5
10002286:	4303      	orrs	r3, r0
	return 0;
10002288:	2000      	movs	r0, #0
1000228a:	601a      	str	r2, [r3, #0]
}
1000228c:	bd10      	pop	{r4, pc}
		return -EINVAL;
1000228e:	2016      	movs	r0, #22
10002290:	4240      	negs	r0, r0
10002292:	e7fb      	b.n	1000228c <uart_rpi_set_format.isra.0+0x4c>
10002294:	10004fc0 	.word	0x10004fc0

10002298 <uart_rpi_init>:
{
10002298:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct uart_rpi_config *config = dev->config;
1000229a:	6845      	ldr	r5, [r0, #4]
{
1000229c:	b085      	sub	sp, #20
	uart_inst_t * const uart_inst = config->uart_dev;
1000229e:	682b      	ldr	r3, [r5, #0]
{
100022a0:	0004      	movs	r4, r0
	struct uart_rpi_data * const data = dev->data;
100022a2:	6906      	ldr	r6, [r0, #16]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
100022a4:	2100      	movs	r1, #0
100022a6:	68a8      	ldr	r0, [r5, #8]
100022a8:	aa03      	add	r2, sp, #12
	uart_hw_t * const uart_hw = config->uart_regs;
100022aa:	686f      	ldr	r7, [r5, #4]
	uart_inst_t * const uart_inst = config->uart_dev;
100022ac:	9301      	str	r3, [sp, #4]
100022ae:	f001 ff7e 	bl	100041ae <pinctrl_lookup_state>
	if (ret < 0) {
100022b2:	2800      	cmp	r0, #0
100022b4:	db23      	blt.n	100022fe <uart_rpi_init+0x66>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
100022b6:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
100022b8:	2200      	movs	r2, #0
100022ba:	7919      	ldrb	r1, [r3, #4]
100022bc:	6818      	ldr	r0, [r3, #0]
100022be:	f001 ff89 	bl	100041d4 <pinctrl_configure_pins>
	if (ret < 0) {
100022c2:	2800      	cmp	r0, #0
100022c4:	db1b      	blt.n	100022fe <uart_rpi_init+0x66>
	baudrate = uart_init(uart_inst, data->uart_config.baudrate);
100022c6:	6831      	ldr	r1, [r6, #0]
100022c8:	9801      	ldr	r0, [sp, #4]
100022ca:	f000 fb33 	bl	10002934 <uart_init>
	if (baudrate == 0) {
100022ce:	2800      	cmp	r0, #0
100022d0:	d017      	beq.n	10002302 <uart_rpi_init+0x6a>
	data->uart_config = (struct uart_config){
100022d2:	4b0d      	ldr	r3, [pc, #52]	; (10002308 <uart_rpi_init+0x70>)
100022d4:	6030      	str	r0, [r6, #0]
100022d6:	6073      	str	r3, [r6, #4]
	uart_rpi_set_format(dev, &data->uart_config);
100022d8:	2201      	movs	r2, #1
100022da:	2303      	movs	r3, #3
100022dc:	2100      	movs	r1, #0
100022de:	6860      	ldr	r0, [r4, #4]
100022e0:	f7ff ffae 	bl	10002240 <uart_rpi_set_format.isra.0>
	hw_clear_bits(&uart_hw->lcr_h, UART_UARTLCR_H_FEN_BITS);
100022e4:	003a      	movs	r2, r7
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100022e6:	23c0      	movs	r3, #192	; 0xc0
100022e8:	322c      	adds	r2, #44	; 0x2c
100022ea:	019b      	lsls	r3, r3, #6
100022ec:	4313      	orrs	r3, r2
	uart_hw->dr = 0U;
100022ee:	2600      	movs	r6, #0
100022f0:	2210      	movs	r2, #16
100022f2:	601a      	str	r2, [r3, #0]
100022f4:	603e      	str	r6, [r7, #0]
	config->irq_config_func(dev);
100022f6:	0020      	movs	r0, r4
100022f8:	696b      	ldr	r3, [r5, #20]
100022fa:	4798      	blx	r3
	return 0;
100022fc:	0030      	movs	r0, r6
}
100022fe:	b005      	add	sp, #20
10002300:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
10002302:	2016      	movs	r0, #22
10002304:	4240      	negs	r0, r0
10002306:	e7fa      	b.n	100022fe <uart_rpi_init+0x66>
10002308:	00030100 	.word	0x00030100

1000230c <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
1000230c:	b530      	push	{r4, r5, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
1000230e:	4b0a      	ldr	r3, [pc, #40]	; (10002338 <elapsed+0x2c>)
10002310:	4a0a      	ldr	r2, [pc, #40]	; (1000233c <elapsed+0x30>)
10002312:	6898      	ldr	r0, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
10002314:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
10002316:	4d0a      	ldr	r5, [pc, #40]	; (10002340 <elapsed+0x34>)
10002318:	689c      	ldr	r4, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
1000231a:	03c9      	lsls	r1, r1, #15
1000231c:	d401      	bmi.n	10002322 <elapsed+0x16>
	    || (val1 < val2)) {
1000231e:	42a0      	cmp	r0, r4
10002320:	d204      	bcs.n	1000232c <elapsed+0x20>
		overflow_cyc += last_load;
10002322:	6811      	ldr	r1, [r2, #0]
10002324:	6828      	ldr	r0, [r5, #0]
10002326:	1809      	adds	r1, r1, r0
10002328:	6011      	str	r1, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
1000232a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
1000232c:	682b      	ldr	r3, [r5, #0]
1000232e:	6810      	ldr	r0, [r2, #0]
10002330:	18c0      	adds	r0, r0, r3
10002332:	1b00      	subs	r0, r0, r4
}
10002334:	bd30      	pop	{r4, r5, pc}
10002336:	46c0      	nop			; (mov r8, r8)
10002338:	e000e010 	.word	0xe000e010
1000233c:	200002ec 	.word	0x200002ec
10002340:	200002f8 	.word	0x200002f8

10002344 <sys_clock_driver_init>:
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
	overflow_cyc = 0U;
10002344:	2000      	movs	r0, #0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10002346:	4a09      	ldr	r2, [pc, #36]	; (1000236c <sys_clock_driver_init+0x28>)
10002348:	6a13      	ldr	r3, [r2, #32]
1000234a:	021b      	lsls	r3, r3, #8
1000234c:	0a1b      	lsrs	r3, r3, #8
1000234e:	6213      	str	r3, [r2, #32]
	last_load = CYC_PER_TICK - 1;
10002350:	4b07      	ldr	r3, [pc, #28]	; (10002370 <sys_clock_driver_init+0x2c>)
10002352:	4a08      	ldr	r2, [pc, #32]	; (10002374 <sys_clock_driver_init+0x30>)
10002354:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
10002356:	4b08      	ldr	r3, [pc, #32]	; (10002378 <sys_clock_driver_init+0x34>)
10002358:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
1000235a:	4b08      	ldr	r3, [pc, #32]	; (1000237c <sys_clock_driver_init+0x38>)
1000235c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
1000235e:	2207      	movs	r2, #7
	SysTick->VAL = 0; /* resets timer to last_load */
10002360:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
10002362:	6819      	ldr	r1, [r3, #0]
10002364:	430a      	orrs	r2, r1
10002366:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
10002368:	4770      	bx	lr
1000236a:	46c0      	nop			; (mov r8, r8)
1000236c:	e000ed00 	.word	0xe000ed00
10002370:	200002f8 	.word	0x200002f8
10002374:	000030d3 	.word	0x000030d3
10002378:	200002ec 	.word	0x200002ec
1000237c:	e000e010 	.word	0xe000e010

10002380 <sys_clock_isr>:
{
10002380:	b570      	push	{r4, r5, r6, lr}
	elapsed();
10002382:	f7ff ffc3 	bl	1000230c <elapsed>
	cycle_count += overflow_cyc;
10002386:	4b0b      	ldr	r3, [pc, #44]	; (100023b4 <sys_clock_isr+0x34>)
10002388:	4a0b      	ldr	r2, [pc, #44]	; (100023b8 <sys_clock_isr+0x38>)
1000238a:	6818      	ldr	r0, [r3, #0]
1000238c:	6811      	ldr	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000238e:	4c0b      	ldr	r4, [pc, #44]	; (100023bc <sys_clock_isr+0x3c>)
	cycle_count += overflow_cyc;
10002390:	1840      	adds	r0, r0, r1
10002392:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
10002394:	2200      	movs	r2, #0
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
10002396:	6825      	ldr	r5, [r4, #0]
	overflow_cyc = 0;
10002398:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
1000239a:	4909      	ldr	r1, [pc, #36]	; (100023c0 <sys_clock_isr+0x40>)
1000239c:	1b40      	subs	r0, r0, r5
1000239e:	f7fd ff17 	bl	100001d0 <__udivsi3>
		announced_cycles += dticks * CYC_PER_TICK;
100023a2:	4b07      	ldr	r3, [pc, #28]	; (100023c0 <sys_clock_isr+0x40>)
100023a4:	4343      	muls	r3, r0
100023a6:	195b      	adds	r3, r3, r5
100023a8:	6023      	str	r3, [r4, #0]
		sys_clock_announce(dticks);
100023aa:	f001 f933 	bl	10003614 <sys_clock_announce>
	z_arm_int_exit();
100023ae:	f7ff fbcb 	bl	10001b48 <z_arm_exc_exit>
}
100023b2:	bd70      	pop	{r4, r5, r6, pc}
100023b4:	200002ec 	.word	0x200002ec
100023b8:	200002f4 	.word	0x200002f4
100023bc:	200002f0 	.word	0x200002f0
100023c0:	000030d4 	.word	0x000030d4

100023c4 <sys_clock_set_timeout>:
{
100023c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100023c6:	4d32      	ldr	r5, [pc, #200]	; (10002490 <sys_clock_set_timeout+0xcc>)
100023c8:	4f32      	ldr	r7, [pc, #200]	; (10002494 <sys_clock_set_timeout+0xd0>)
100023ca:	b085      	sub	sp, #20
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
100023cc:	2900      	cmp	r1, #0
100023ce:	d054      	beq.n	1000247a <sys_clock_set_timeout+0xb6>
100023d0:	1c43      	adds	r3, r0, #1
100023d2:	d108      	bne.n	100023e6 <sys_clock_set_timeout+0x22>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
100023d4:	2201      	movs	r2, #1
100023d6:	682b      	ldr	r3, [r5, #0]
100023d8:	4393      	bics	r3, r2
100023da:	602b      	str	r3, [r5, #0]
		last_load = TIMER_STOPPED;
100023dc:	23ff      	movs	r3, #255	; 0xff
100023de:	061b      	lsls	r3, r3, #24
100023e0:	603b      	str	r3, [r7, #0]
}
100023e2:	b005      	add	sp, #20
100023e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t last_load_ = last_load;
100023e6:	683b      	ldr	r3, [r7, #0]
100023e8:	9301      	str	r3, [sp, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
100023ea:	2600      	movs	r6, #0
100023ec:	2801      	cmp	r0, #1
100023ee:	dd04      	ble.n	100023fa <sys_clock_set_timeout+0x36>
100023f0:	4b29      	ldr	r3, [pc, #164]	; (10002498 <sys_clock_set_timeout+0xd4>)
100023f2:	001e      	movs	r6, r3
100023f4:	4298      	cmp	r0, r3
100023f6:	dc00      	bgt.n	100023fa <sys_clock_set_timeout+0x36>
100023f8:	1e46      	subs	r6, r0, #1
	__asm__ volatile("mrs %0, PRIMASK;"
100023fa:	f3ef 8310 	mrs	r3, PRIMASK
100023fe:	b672      	cpsid	i
10002400:	9303      	str	r3, [sp, #12]
	uint32_t pending = elapsed();
10002402:	f7ff ff83 	bl	1000230c <elapsed>
	overflow_cyc = 0U;
10002406:	2200      	movs	r2, #0
	val1 = SysTick->VAL;
10002408:	68ab      	ldr	r3, [r5, #8]
1000240a:	9302      	str	r3, [sp, #8]
	cycle_count += pending;
1000240c:	4b23      	ldr	r3, [pc, #140]	; (1000249c <sys_clock_set_timeout+0xd8>)
1000240e:	681c      	ldr	r4, [r3, #0]
	overflow_cyc = 0U;
10002410:	4b23      	ldr	r3, [pc, #140]	; (100024a0 <sys_clock_set_timeout+0xdc>)
	cycle_count += pending;
10002412:	1904      	adds	r4, r0, r4
	overflow_cyc = 0U;
10002414:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
10002416:	4b23      	ldr	r3, [pc, #140]	; (100024a4 <sys_clock_set_timeout+0xe0>)
10002418:	681b      	ldr	r3, [r3, #0]
1000241a:	9300      	str	r3, [sp, #0]
1000241c:	1ae0      	subs	r0, r4, r3
	if ((int32_t)unannounced < 0) {
1000241e:	4290      	cmp	r0, r2
10002420:	db31      	blt.n	10002486 <sys_clock_set_timeout+0xc2>
		delay = ticks * CYC_PER_TICK;
10002422:	4b21      	ldr	r3, [pc, #132]	; (100024a8 <sys_clock_set_timeout+0xe4>)
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
10002424:	4a21      	ldr	r2, [pc, #132]	; (100024ac <sys_clock_set_timeout+0xe8>)
		delay = ticks * CYC_PER_TICK;
10002426:	435e      	muls	r6, r3
		delay += unannounced;
10002428:	1980      	adds	r0, r0, r6
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
1000242a:	0019      	movs	r1, r3
1000242c:	1880      	adds	r0, r0, r2
1000242e:	f7fd fecf 	bl	100001d0 <__udivsi3>
		delay =
10002432:	4b1d      	ldr	r3, [pc, #116]	; (100024a8 <sys_clock_set_timeout+0xe4>)
10002434:	4358      	muls	r0, r3
		delay -= unannounced;
10002436:	9b00      	ldr	r3, [sp, #0]
10002438:	1b1b      	subs	r3, r3, r4
1000243a:	1818      	adds	r0, r3, r0
		delay = MAX(delay, MIN_DELAY);
1000243c:	2380      	movs	r3, #128	; 0x80
1000243e:	00db      	lsls	r3, r3, #3
10002440:	4298      	cmp	r0, r3
10002442:	d923      	bls.n	1000248c <sys_clock_set_timeout+0xc8>
		if (delay > MAX_CYCLES) {
10002444:	4b1a      	ldr	r3, [pc, #104]	; (100024b0 <sys_clock_set_timeout+0xec>)
10002446:	4298      	cmp	r0, r3
10002448:	d820      	bhi.n	1000248c <sys_clock_set_timeout+0xc8>
	SysTick->VAL = 0; /* resets timer to last_load */
1000244a:	2300      	movs	r3, #0
		last_load = MIN_DELAY;
1000244c:	6038      	str	r0, [r7, #0]
	SysTick->LOAD = last_load - 1;
1000244e:	3801      	subs	r0, #1
	val2 = SysTick->VAL;
10002450:	68a9      	ldr	r1, [r5, #8]
	SysTick->LOAD = last_load - 1;
10002452:	6068      	str	r0, [r5, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
10002454:	60ab      	str	r3, [r5, #8]
	if (val1 < val2) {
10002456:	9b02      	ldr	r3, [sp, #8]
10002458:	9802      	ldr	r0, [sp, #8]
1000245a:	1a5b      	subs	r3, r3, r1
		cycle_count += (val1 - val2);
1000245c:	191a      	adds	r2, r3, r4
	if (val1 < val2) {
1000245e:	4288      	cmp	r0, r1
10002460:	d202      	bcs.n	10002468 <sys_clock_set_timeout+0xa4>
		cycle_count += (val1 + (last_load_ - val2));
10002462:	9a01      	ldr	r2, [sp, #4]
10002464:	189b      	adds	r3, r3, r2
10002466:	191a      	adds	r2, r3, r4
10002468:	4b0c      	ldr	r3, [pc, #48]	; (1000249c <sys_clock_set_timeout+0xd8>)
1000246a:	601a      	str	r2, [r3, #0]
	if (key != 0U) {
1000246c:	9b03      	ldr	r3, [sp, #12]
1000246e:	2b00      	cmp	r3, #0
10002470:	d1b7      	bne.n	100023e2 <sys_clock_set_timeout+0x1e>
	__asm__ volatile(
10002472:	b662      	cpsie	i
10002474:	f3bf 8f6f 	isb	sy
10002478:	e7b3      	b.n	100023e2 <sys_clock_set_timeout+0x1e>
	uint32_t last_load_ = last_load;
1000247a:	683b      	ldr	r3, [r7, #0]
1000247c:	9301      	str	r3, [sp, #4]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
1000247e:	1c43      	adds	r3, r0, #1
10002480:	d1b3      	bne.n	100023ea <sys_clock_set_timeout+0x26>
10002482:	4805      	ldr	r0, [pc, #20]	; (10002498 <sys_clock_set_timeout+0xd4>)
10002484:	e7b8      	b.n	100023f8 <sys_clock_set_timeout+0x34>
10002486:	2080      	movs	r0, #128	; 0x80
10002488:	00c0      	lsls	r0, r0, #3
1000248a:	e7de      	b.n	1000244a <sys_clock_set_timeout+0x86>
1000248c:	0018      	movs	r0, r3
1000248e:	e7dc      	b.n	1000244a <sys_clock_set_timeout+0x86>
10002490:	e000e010 	.word	0xe000e010
10002494:	200002f8 	.word	0x200002f8
10002498:	0000053d 	.word	0x0000053d
1000249c:	200002f4 	.word	0x200002f4
100024a0:	200002ec 	.word	0x200002ec
100024a4:	200002f0 	.word	0x200002f0
100024a8:	000030d4 	.word	0x000030d4
100024ac:	000030d3 	.word	0x000030d3
100024b0:	00ffc684 	.word	0x00ffc684

100024b4 <sys_clock_elapsed>:
{
100024b4:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100024b6:	f3ef 8410 	mrs	r4, PRIMASK
100024ba:	b672      	cpsid	i
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
100024bc:	f7ff ff26 	bl	1000230c <elapsed>
100024c0:	4b07      	ldr	r3, [pc, #28]	; (100024e0 <sys_clock_elapsed+0x2c>)
100024c2:	4a08      	ldr	r2, [pc, #32]	; (100024e4 <sys_clock_elapsed+0x30>)
100024c4:	681b      	ldr	r3, [r3, #0]
100024c6:	6812      	ldr	r2, [r2, #0]
100024c8:	1a9b      	subs	r3, r3, r2
100024ca:	1818      	adds	r0, r3, r0
	if (key != 0U) {
100024cc:	2c00      	cmp	r4, #0
100024ce:	d102      	bne.n	100024d6 <sys_clock_elapsed+0x22>
	__asm__ volatile(
100024d0:	b662      	cpsie	i
100024d2:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
100024d6:	4904      	ldr	r1, [pc, #16]	; (100024e8 <sys_clock_elapsed+0x34>)
100024d8:	f7fd fe7a 	bl	100001d0 <__udivsi3>
}
100024dc:	bd10      	pop	{r4, pc}
100024de:	46c0      	nop			; (mov r8, r8)
100024e0:	200002f4 	.word	0x200002f4
100024e4:	200002f0 	.word	0x200002f0
100024e8:	000030d4 	.word	0x000030d4

100024ec <clock_configure>:
    hw_clear_bits(&clock->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clk_index] = 0;
}

/// \tag::clock_configure[]
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100024ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100024ee:	b085      	sub	sp, #20
100024f0:	9201      	str	r2, [sp, #4]
    uint32_t div;

    assert(src_freq >= freq);

    if (freq > src_freq)
100024f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
bool clock_configure(enum clock_index clk_index, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t freq) {
100024f4:	0005      	movs	r5, r0
100024f6:	000f      	movs	r7, r1
        return false;
100024f8:	2000      	movs	r0, #0
    if (freq > src_freq)
100024fa:	429a      	cmp	r2, r3
100024fc:	d863      	bhi.n	100025c6 <clock_configure+0xda>

    // Div register is 24.8 int.frac divider so multiply by 2^8 (left shift by 8)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);

    clock_hw_t *clock = &clocks_hw->clk[clk_index];
100024fe:	240c      	movs	r4, #12
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002500:	0e1a      	lsrs	r2, r3, #24
10002502:	021b      	lsls	r3, r3, #8
10002504:	9203      	str	r2, [sp, #12]
10002506:	9302      	str	r3, [sp, #8]
10002508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000250a:	0003      	movs	r3, r0
1000250c:	9903      	ldr	r1, [sp, #12]
1000250e:	9802      	ldr	r0, [sp, #8]
10002510:	f7fd ff38 	bl	10000384 <__aeabi_uldivmod>
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
10002514:	436c      	muls	r4, r5
10002516:	4b2d      	ldr	r3, [pc, #180]	; (100025cc <clock_configure+0xe0>)
    div = (uint32_t) (((uint64_t) src_freq << 8) / freq);
10002518:	0006      	movs	r6, r0
    clock_hw_t *clock = &clocks_hw->clk[clk_index];
1000251a:	18e4      	adds	r4, r4, r3

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock->div)
1000251c:	6863      	ldr	r3, [r4, #4]
1000251e:	4283      	cmp	r3, r0
10002520:	d200      	bcs.n	10002524 <clock_configure+0x38>
        clock->div = div;
10002522:	6060      	str	r0, [r4, #4]
    return clk_index == clk_sys || clk_index == clk_ref;
10002524:	1f2b      	subs	r3, r5, #4
10002526:	b2db      	uxtb	r3, r3
10002528:	9300      	str	r3, [sp, #0]
1000252a:	23c0      	movs	r3, #192	; 0xc0

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clk_index) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000252c:	9a00      	ldr	r2, [sp, #0]
1000252e:	019b      	lsls	r3, r3, #6
10002530:	4323      	orrs	r3, r4
10002532:	2a01      	cmp	r2, #1
10002534:	d81b      	bhi.n	1000256e <clock_configure+0x82>
10002536:	2f01      	cmp	r7, #1
10002538:	d119      	bne.n	1000256e <clock_configure+0x82>
1000253a:	2203      	movs	r2, #3
1000253c:	601a      	str	r2, [r3, #0]
        hw_clear_bits(&clock->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (!(clock->selected & 1u))
1000253e:	68a3      	ldr	r3, [r4, #8]
10002540:	423b      	tst	r3, r7
10002542:	d0fc      	beq.n	1000253e <clock_configure+0x52>
            );
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock->ctrl,
10002544:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002546:	6823      	ldr	r3, [r4, #0]
10002548:	0152      	lsls	r2, r2, #5
1000254a:	405a      	eors	r2, r3
1000254c:	23e0      	movs	r3, #224	; 0xe0
1000254e:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002550:	2380      	movs	r3, #128	; 0x80
10002552:	015b      	lsls	r3, r3, #5
10002554:	4323      	orrs	r3, r4
10002556:	601a      	str	r2, [r3, #0]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002558:	2103      	movs	r1, #3
1000255a:	6822      	ldr	r2, [r4, #0]
1000255c:	407a      	eors	r2, r7
1000255e:	400a      	ands	r2, r1
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002560:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
        hw_write_masked(&clock->ctrl,
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock->selected & (1u << src)))
10002562:	2301      	movs	r3, #1
10002564:	40bb      	lsls	r3, r7
10002566:	68a2      	ldr	r2, [r4, #8]
10002568:	4213      	tst	r3, r2
1000256a:	d0fc      	beq.n	10002566 <clock_configure+0x7a>
1000256c:	e01a      	b.n	100025a4 <clock_configure+0xb8>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000256e:	2280      	movs	r2, #128	; 0x80
10002570:	0112      	lsls	r2, r2, #4
10002572:	601a      	str	r2, [r3, #0]
        if (configured_freq[clk_index] > 0) {
10002574:	4b16      	ldr	r3, [pc, #88]	; (100025d0 <clock_configure+0xe4>)
10002576:	00aa      	lsls	r2, r5, #2
10002578:	58d1      	ldr	r1, [r2, r3]
1000257a:	2900      	cmp	r1, #0
1000257c:	d005      	beq.n	1000258a <clock_configure+0x9e>
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clk_index] + 1;
1000257e:	6958      	ldr	r0, [r3, #20]
10002580:	f7fd fe26 	bl	100001d0 <__udivsi3>
10002584:	3001      	adds	r0, #1
            asm volatile (
10002586:	3801      	subs	r0, #1
10002588:	d1fd      	bne.n	10002586 <clock_configure+0x9a>
    hw_write_masked(&clock->ctrl,
1000258a:	9a01      	ldr	r2, [sp, #4]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000258c:	6823      	ldr	r3, [r4, #0]
1000258e:	0152      	lsls	r2, r2, #5
10002590:	405a      	eors	r2, r3
10002592:	23e0      	movs	r3, #224	; 0xe0
10002594:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002596:	2380      	movs	r3, #128	; 0x80
10002598:	015b      	lsls	r3, r3, #5
1000259a:	4323      	orrs	r3, r4
1000259c:	601a      	str	r2, [r3, #0]
    if (has_glitchless_mux(clk_index)) {
1000259e:	9a00      	ldr	r2, [sp, #0]
100025a0:	2a01      	cmp	r2, #1
100025a2:	d9d9      	bls.n	10002558 <clock_configure+0x6c>
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100025a4:	2380      	movs	r3, #128	; 0x80
100025a6:	2280      	movs	r2, #128	; 0x80
100025a8:	019b      	lsls	r3, r3, #6
100025aa:	4323      	orrs	r3, r4
100025ac:	0112      	lsls	r2, r2, #4
100025ae:	601a      	str	r2, [r3, #0]
    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock->div = div;

    // Store the configured frequency
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100025b0:	9802      	ldr	r0, [sp, #8]
    clock->div = div;
100025b2:	6066      	str	r6, [r4, #4]
    configured_freq[clk_index] = (uint32_t)(((uint64_t) src_freq << 8) / div);
100025b4:	0032      	movs	r2, r6
100025b6:	2300      	movs	r3, #0
100025b8:	9903      	ldr	r1, [sp, #12]
100025ba:	f7fd fee3 	bl	10000384 <__aeabi_uldivmod>
100025be:	4c04      	ldr	r4, [pc, #16]	; (100025d0 <clock_configure+0xe4>)
100025c0:	00ad      	lsls	r5, r5, #2
100025c2:	5160      	str	r0, [r4, r5]
100025c4:	2001      	movs	r0, #1

    return true;
}
100025c6:	b005      	add	sp, #20
100025c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100025ca:	46c0      	nop			; (mov r8, r8)
100025cc:	40008000 	.word	0x40008000
100025d0:	200002fc 	.word	0x200002fc

100025d4 <clocks_init>:
/// \end::clock_configure[]

void clocks_init(void) {
100025d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start tick in watchdog
    watchdog_start_tick(XOSC_MHZ);
100025d6:	200c      	movs	r0, #12
100025d8:	f000 f8de 	bl	10002798 <watchdog_start_tick>

    // Everything is 48MHz on FPGA apart from RTC. Otherwise set to 0 and will be set in clock configure
    if (running_on_fpga()) {
100025dc:	f000 f8e4 	bl	100027a8 <running_on_fpga>
100025e0:	2800      	cmp	r0, #0
100025e2:	d00a      	beq.n	100025fa <clocks_init+0x26>
        for (uint i = 0; i < CLK_COUNT; i++) {
100025e4:	2300      	movs	r3, #0
            configured_freq[i] = 48 * PICO_MHZ;
100025e6:	4a2c      	ldr	r2, [pc, #176]	; (10002698 <clocks_init+0xc4>)
100025e8:	482c      	ldr	r0, [pc, #176]	; (1000269c <clocks_init+0xc8>)
100025ea:	0099      	lsls	r1, r3, #2
        for (uint i = 0; i < CLK_COUNT; i++) {
100025ec:	3301      	adds	r3, #1
            configured_freq[i] = 48 * PICO_MHZ;
100025ee:	5050      	str	r0, [r2, r1]
        for (uint i = 0; i < CLK_COUNT; i++) {
100025f0:	2b0a      	cmp	r3, #10
100025f2:	d1fa      	bne.n	100025ea <clocks_init+0x16>
        }
        configured_freq[clk_rtc] = 46875;
100025f4:	4b2a      	ldr	r3, [pc, #168]	; (100026a0 <clocks_init+0xcc>)
100025f6:	6253      	str	r3, [r2, #36]	; 0x24
    clock_configure(clk_peri,
                    0,
                    CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                    125 * PICO_MHZ,
                    125 * PICO_MHZ);
}
100025f8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    clocks_hw->resus.ctrl = 0;
100025fa:	4d2a      	ldr	r5, [pc, #168]	; (100026a4 <clocks_init+0xd0>)
100025fc:	67a8      	str	r0, [r5, #120]	; 0x78
    xosc_init();
100025fe:	f000 f8b7 	bl	10002770 <xosc_init>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002602:	2201      	movs	r2, #1
10002604:	4b28      	ldr	r3, [pc, #160]	; (100026a8 <clocks_init+0xd4>)
10002606:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_sys].selected != 0x1)
10002608:	6c6b      	ldr	r3, [r5, #68]	; 0x44
1000260a:	2b01      	cmp	r3, #1
1000260c:	d1fc      	bne.n	10002608 <clocks_init+0x34>
1000260e:	2203      	movs	r2, #3
10002610:	4b26      	ldr	r3, [pc, #152]	; (100026ac <clocks_init+0xd8>)
10002612:	601a      	str	r2, [r3, #0]
    while (clocks_hw->clk[clk_ref].selected != 0x1)
10002614:	6bac      	ldr	r4, [r5, #56]	; 0x38
10002616:	2c01      	cmp	r4, #1
10002618:	d1fc      	bne.n	10002614 <clocks_init+0x40>
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000261a:	2502      	movs	r5, #2
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000261c:	2605      	movs	r6, #5
    pll_init(pll_sys, 1, 1500 * PICO_MHZ, 6, 2);
1000261e:	0021      	movs	r1, r4
10002620:	9500      	str	r5, [sp, #0]
10002622:	2306      	movs	r3, #6
10002624:	4a22      	ldr	r2, [pc, #136]	; (100026b0 <clocks_init+0xdc>)
10002626:	4823      	ldr	r0, [pc, #140]	; (100026b4 <clocks_init+0xe0>)
10002628:	f000 f854 	bl	100026d4 <pll_init>
    pll_init(pll_usb, 1, 1200 * PICO_MHZ, 5, 5);
1000262c:	0033      	movs	r3, r6
1000262e:	0021      	movs	r1, r4
10002630:	4a21      	ldr	r2, [pc, #132]	; (100026b8 <clocks_init+0xe4>)
10002632:	4822      	ldr	r0, [pc, #136]	; (100026bc <clocks_init+0xe8>)
10002634:	9600      	str	r6, [sp, #0]
10002636:	f000 f84d 	bl	100026d4 <pll_init>
    clock_configure(clk_ref,
1000263a:	4b21      	ldr	r3, [pc, #132]	; (100026c0 <clocks_init+0xec>)
1000263c:	0029      	movs	r1, r5
    clock_configure(clk_sys,
1000263e:	4d21      	ldr	r5, [pc, #132]	; (100026c4 <clocks_init+0xf0>)
    clock_configure(clk_ref,
10002640:	9300      	str	r3, [sp, #0]
10002642:	2200      	movs	r2, #0
10002644:	2004      	movs	r0, #4
10002646:	f7ff ff51 	bl	100024ec <clock_configure>
    clock_configure(clk_sys,
1000264a:	002b      	movs	r3, r5
1000264c:	0021      	movs	r1, r4
1000264e:	2200      	movs	r2, #0
10002650:	0030      	movs	r0, r6
10002652:	9500      	str	r5, [sp, #0]
10002654:	f7ff ff4a 	bl	100024ec <clock_configure>
    clock_configure(clk_usb,
10002658:	2200      	movs	r2, #0
1000265a:	4c10      	ldr	r4, [pc, #64]	; (1000269c <clocks_init+0xc8>)
1000265c:	0011      	movs	r1, r2
1000265e:	0023      	movs	r3, r4
10002660:	9400      	str	r4, [sp, #0]
10002662:	2007      	movs	r0, #7
10002664:	f7ff ff42 	bl	100024ec <clock_configure>
    clock_configure(clk_adc,
10002668:	2200      	movs	r2, #0
1000266a:	0023      	movs	r3, r4
1000266c:	0011      	movs	r1, r2
1000266e:	9400      	str	r4, [sp, #0]
10002670:	2008      	movs	r0, #8
10002672:	f7ff ff3b 	bl	100024ec <clock_configure>
    clock_configure(clk_rtc,
10002676:	2200      	movs	r2, #0
10002678:	4b09      	ldr	r3, [pc, #36]	; (100026a0 <clocks_init+0xcc>)
1000267a:	0011      	movs	r1, r2
1000267c:	9300      	str	r3, [sp, #0]
1000267e:	2009      	movs	r0, #9
10002680:	0023      	movs	r3, r4
10002682:	f7ff ff33 	bl	100024ec <clock_configure>
    clock_configure(clk_peri,
10002686:	2200      	movs	r2, #0
10002688:	002b      	movs	r3, r5
1000268a:	0011      	movs	r1, r2
1000268c:	9500      	str	r5, [sp, #0]
1000268e:	2006      	movs	r0, #6
10002690:	f7ff ff2c 	bl	100024ec <clock_configure>
10002694:	e7b0      	b.n	100025f8 <clocks_init+0x24>
10002696:	46c0      	nop			; (mov r8, r8)
10002698:	200002fc 	.word	0x200002fc
1000269c:	02dc6c00 	.word	0x02dc6c00
100026a0:	0000b71b 	.word	0x0000b71b
100026a4:	40008000 	.word	0x40008000
100026a8:	4000b03c 	.word	0x4000b03c
100026ac:	4000b030 	.word	0x4000b030
100026b0:	59682f00 	.word	0x59682f00
100026b4:	40028000 	.word	0x40028000
100026b8:	47868c00 	.word	0x47868c00
100026bc:	4002c000 	.word	0x4002c000
100026c0:	00b71b00 	.word	0x00b71b00
100026c4:	07735940 	.word	0x07735940

100026c8 <clock_get_hz>:

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(enum clock_index clk_index) {
    return configured_freq[clk_index];
100026c8:	4b01      	ldr	r3, [pc, #4]	; (100026d0 <clock_get_hz+0x8>)
100026ca:	0080      	lsls	r0, r0, #2
100026cc:	58c0      	ldr	r0, [r0, r3]
}
100026ce:	4770      	bx	lr
100026d0:	200002fc 	.word	0x200002fc

100026d4 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100026d6:	0004      	movs	r4, r0
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100026d8:	200c      	movs	r0, #12
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
100026da:	0017      	movs	r7, r2
100026dc:	001e      	movs	r6, r3
100026de:	000d      	movs	r5, r1
    uint32_t ref_mhz = XOSC_MHZ / refdiv;
100026e0:	f7fd fd76 	bl	100001d0 <__udivsi3>
    // Check vco freq is in an acceptable range
    assert(vco_freq >= (PICO_PLL_VCO_MIN_FREQ_MHZ * PICO_MHZ) && vco_freq <= (PICO_PLL_VCO_MAX_FREQ_MHZ * PICO_MHZ));

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / (ref_mhz * PICO_MHZ);
100026e4:	491d      	ldr	r1, [pc, #116]	; (1000275c <pll_init+0x88>)
100026e6:	4341      	muls	r1, r0
100026e8:	0038      	movs	r0, r7
100026ea:	f7fd fd71 	bl	100001d0 <__udivsi3>
    // Check that reference frequency is no greater than vco / 16
    assert(ref_mhz <= (vco_freq / 16));

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100026ee:	9a06      	ldr	r2, [sp, #24]
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100026f0:	0433      	lsls	r3, r6, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
100026f2:	0312      	lsls	r2, r2, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
100026f4:	4313      	orrs	r3, r2

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
100026f6:	6822      	ldr	r2, [r4, #0]
100026f8:	2a00      	cmp	r2, #0
100026fa:	da0f      	bge.n	1000271c <pll_init+0x48>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
100026fc:	213f      	movs	r1, #63	; 0x3f
100026fe:	6822      	ldr	r2, [r4, #0]
10002700:	400a      	ands	r2, r1
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002702:	42aa      	cmp	r2, r5
10002704:	d10a      	bne.n	1000271c <pll_init+0x48>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002706:	68a2      	ldr	r2, [r4, #8]
10002708:	0512      	lsls	r2, r2, #20
1000270a:	0d12      	lsrs	r2, r2, #20
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000270c:	4282      	cmp	r2, r0
1000270e:	d105      	bne.n	1000271c <pll_init+0x48>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10002710:	21ee      	movs	r1, #238	; 0xee
10002712:	68e2      	ldr	r2, [r4, #12]
10002714:	02c9      	lsls	r1, r1, #11
10002716:	400a      	ands	r2, r1
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002718:	429a      	cmp	r2, r3
1000271a:	d01b      	beq.n	10002754 <pll_init+0x80>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
1000271c:	4a10      	ldr	r2, [pc, #64]	; (10002760 <pll_init+0x8c>)
1000271e:	4294      	cmp	r4, r2
10002720:	d019      	beq.n	10002756 <pll_init+0x82>
10002722:	2280      	movs	r2, #128	; 0x80
10002724:	0152      	lsls	r2, r2, #5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002726:	490f      	ldr	r1, [pc, #60]	; (10002764 <pll_init+0x90>)
10002728:	4e0f      	ldr	r6, [pc, #60]	; (10002768 <pll_init+0x94>)
1000272a:	600a      	str	r2, [r1, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000272c:	490f      	ldr	r1, [pc, #60]	; (1000276c <pll_init+0x98>)
1000272e:	600a      	str	r2, [r1, #0]
10002730:	0017      	movs	r7, r2
10002732:	68b1      	ldr	r1, [r6, #8]
10002734:	438f      	bics	r7, r1
10002736:	d1fb      	bne.n	10002730 <pll_init+0x5c>
10002738:	22c0      	movs	r2, #192	; 0xc0

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
1000273a:	1d21      	adds	r1, r4, #4
1000273c:	0192      	lsls	r2, r2, #6
1000273e:	430a      	orrs	r2, r1
10002740:	2121      	movs	r1, #33	; 0x21
    pll->cs = refdiv;
10002742:	6025      	str	r5, [r4, #0]
    pll->fbdiv_int = fbdiv;
10002744:	60a0      	str	r0, [r4, #8]
10002746:	6011      	str	r1, [r2, #0]

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002748:	6821      	ldr	r1, [r4, #0]
1000274a:	2900      	cmp	r1, #0
1000274c:	dafc      	bge.n	10002748 <pll_init+0x74>

    // Set up post dividers
    pll->prim = pdiv;
1000274e:	60e3      	str	r3, [r4, #12]
10002750:	2308      	movs	r3, #8
10002752:	6013      	str	r3, [r2, #0]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
/// \end::pll_init_finish[]
}
10002754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t pll_reset = (pll_usb_hw == pll) ? RESETS_RESET_PLL_USB_BITS : RESETS_RESET_PLL_SYS_BITS;
10002756:	2280      	movs	r2, #128	; 0x80
10002758:	0192      	lsls	r2, r2, #6
1000275a:	e7e4      	b.n	10002726 <pll_init+0x52>
1000275c:	000f4240 	.word	0x000f4240
10002760:	4002c000 	.word	0x4002c000
10002764:	4000e000 	.word	0x4000e000
10002768:	4000c000 	.word	0x4000c000
1000276c:	4000f000 	.word	0x4000f000

10002770 <xosc_init>:
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10002770:	22aa      	movs	r2, #170	; 0xaa
10002772:	4b06      	ldr	r3, [pc, #24]	; (1000278c <xosc_init+0x1c>)
10002774:	0112      	lsls	r2, r2, #4
10002776:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
10002778:	222f      	movs	r2, #47	; 0x2f
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000277a:	4905      	ldr	r1, [pc, #20]	; (10002790 <xosc_init+0x20>)
1000277c:	60da      	str	r2, [r3, #12]
1000277e:	4a05      	ldr	r2, [pc, #20]	; (10002794 <xosc_init+0x24>)
10002780:	6011      	str	r1, [r2, #0]

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS));
10002782:	685a      	ldr	r2, [r3, #4]
10002784:	2a00      	cmp	r2, #0
10002786:	dafc      	bge.n	10002782 <xosc_init+0x12>
}
10002788:	4770      	bx	lr
1000278a:	46c0      	nop			; (mov r8, r8)
1000278c:	40024000 	.word	0x40024000
10002790:	00fab000 	.word	0x00fab000
10002794:	40026000 	.word	0x40026000

10002798 <watchdog_start_tick>:
#include "hardware/structs/psm.h"

/// \tag::watchdog_start_tick[]
void watchdog_start_tick(uint cycles) {
    // Important: This function also provides a tick reference to the timer
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
10002798:	2380      	movs	r3, #128	; 0x80
1000279a:	4a02      	ldr	r2, [pc, #8]	; (100027a4 <watchdog_start_tick+0xc>)
1000279c:	009b      	lsls	r3, r3, #2
1000279e:	4303      	orrs	r3, r0
100027a0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
100027a2:	4770      	bx	lr
100027a4:	40058000 	.word	0x40058000

100027a8 <running_on_fpga>:

#if !PICO_NO_FPGA_CHECK
// Inline stub provided in header if this code is unused (so folding can be
// done in each TU instead of relying on LTO)
bool running_on_fpga() {
    return !!((*(io_ro_32 *)TBMAN_BASE) & TBMAN_PLATFORM_FPGA_BITS);
100027a8:	4b02      	ldr	r3, [pc, #8]	; (100027b4 <running_on_fpga+0xc>)
100027aa:	6818      	ldr	r0, [r3, #0]
100027ac:	0780      	lsls	r0, r0, #30
100027ae:	0fc0      	lsrs	r0, r0, #31
}
100027b0:	4770      	bx	lr
100027b2:	46c0      	nop			; (mov r8, r8)
100027b4:	4006c000 	.word	0x4006c000

100027b8 <gpio_set_function>:
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, enum gpio_function fn) {
    check_gpio_param(gpio);
    invalid_params_if(GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&padsbank0_hw->io[gpio],
100027b8:	4b08      	ldr	r3, [pc, #32]	; (100027dc <gpio_set_function+0x24>)
100027ba:	0082      	lsls	r2, r0, #2
100027bc:	18d2      	adds	r2, r2, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100027be:	2340      	movs	r3, #64	; 0x40
void gpio_set_function(uint gpio, enum gpio_function fn) {
100027c0:	b510      	push	{r4, lr}
100027c2:	6814      	ldr	r4, [r2, #0]
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    iobank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
100027c4:	00c0      	lsls	r0, r0, #3
100027c6:	4063      	eors	r3, r4
100027c8:	24c0      	movs	r4, #192	; 0xc0
100027ca:	4023      	ands	r3, r4
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100027cc:	2480      	movs	r4, #128	; 0x80
100027ce:	0164      	lsls	r4, r4, #5
100027d0:	4322      	orrs	r2, r4
100027d2:	6013      	str	r3, [r2, #0]
100027d4:	4b02      	ldr	r3, [pc, #8]	; (100027e0 <gpio_set_function+0x28>)
100027d6:	18c0      	adds	r0, r0, r3
100027d8:	6041      	str	r1, [r0, #4]
}
100027da:	bd10      	pop	{r4, pc}
100027dc:	4001c004 	.word	0x4001c004
100027e0:	40014000 	.word	0x40014000

100027e4 <gpio_set_pulls>:

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
    check_gpio_param(gpio);
    hw_write_masked(
100027e4:	4b07      	ldr	r3, [pc, #28]	; (10002804 <gpio_set_pulls+0x20>)
100027e6:	0080      	lsls	r0, r0, #2
100027e8:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100027ea:	6803      	ldr	r3, [r0, #0]
            &padsbank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100027ec:	00c9      	lsls	r1, r1, #3
100027ee:	0092      	lsls	r2, r2, #2
    hw_write_masked(
100027f0:	430a      	orrs	r2, r1
100027f2:	405a      	eors	r2, r3
100027f4:	230c      	movs	r3, #12
100027f6:	401a      	ands	r2, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100027f8:	2380      	movs	r3, #128	; 0x80
100027fa:	015b      	lsls	r3, r3, #5
100027fc:	4303      	orrs	r3, r0
100027fe:	601a      	str	r2, [r3, #0]
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10002800:	4770      	bx	lr
10002802:	46c0      	nop			; (mov r8, r8)
10002804:	4001c004 	.word	0x4001c004

10002808 <gpio_set_input_hysteresis_enabled>:
}

void gpio_set_input_hysteresis_enabled(uint gpio, bool enabled) {
    check_gpio_param(gpio);
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
10002808:	4b05      	ldr	r3, [pc, #20]	; (10002820 <gpio_set_input_hysteresis_enabled+0x18>)
1000280a:	0080      	lsls	r0, r0, #2
1000280c:	18c0      	adds	r0, r0, r3
1000280e:	2202      	movs	r2, #2
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002810:	2380      	movs	r3, #128	; 0x80
    if (enabled)
10002812:	2900      	cmp	r1, #0
10002814:	d100      	bne.n	10002818 <gpio_set_input_hysteresis_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002816:	23c0      	movs	r3, #192	; 0xc0
10002818:	019b      	lsls	r3, r3, #6
1000281a:	4303      	orrs	r3, r0
1000281c:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_SCHMITT_BITS);
}
1000281e:	4770      	bx	lr
10002820:	4001c004 	.word	0x4001c004

10002824 <gpio_set_slew_rate>:
    return (padsbank0_hw->io[gpio] & PADS_BANK0_GPIO0_SCHMITT_BITS) != 0;
}

void gpio_set_slew_rate(uint gpio, enum gpio_slew_rate slew) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10002824:	4b05      	ldr	r3, [pc, #20]	; (1000283c <gpio_set_slew_rate+0x18>)
10002826:	0080      	lsls	r0, r0, #2
10002828:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000282a:	6803      	ldr	r3, [r0, #0]
1000282c:	4059      	eors	r1, r3
1000282e:	2301      	movs	r3, #1
10002830:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002832:	2380      	movs	r3, #128	; 0x80
10002834:	015b      	lsls	r3, r3, #5
10002836:	4303      	orrs	r3, r0
10002838:	6019      	str	r1, [r3, #0]
                    (uint)slew << PADS_BANK0_GPIO0_SLEWFAST_LSB,
                    PADS_BANK0_GPIO0_SLEWFAST_BITS
    );
}
1000283a:	4770      	bx	lr
1000283c:	4001c004 	.word	0x4001c004

10002840 <gpio_set_drive_strength>:

// Enum encoding should match hardware encoding on RP2040
static_assert(PADS_BANK0_GPIO0_DRIVE_VALUE_8MA == GPIO_DRIVE_STRENGTH_8MA, "");
void gpio_set_drive_strength(uint gpio, enum gpio_drive_strength drive) {
    check_gpio_param(gpio);
    hw_write_masked(&padsbank0_hw->io[gpio],
10002840:	4b06      	ldr	r3, [pc, #24]	; (1000285c <gpio_set_drive_strength+0x1c>)
10002842:	0080      	lsls	r0, r0, #2
10002844:	18c0      	adds	r0, r0, r3
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002846:	6803      	ldr	r3, [r0, #0]
10002848:	0109      	lsls	r1, r1, #4
1000284a:	4059      	eors	r1, r3
1000284c:	2330      	movs	r3, #48	; 0x30
1000284e:	4019      	ands	r1, r3
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002850:	2380      	movs	r3, #128	; 0x80
10002852:	015b      	lsls	r3, r3, #5
10002854:	4303      	orrs	r3, r0
10002856:	6019      	str	r1, [r3, #0]
                    (uint)drive << PADS_BANK0_GPIO0_DRIVE_LSB,
                    PADS_BANK0_GPIO0_DRIVE_BITS
    );
}
10002858:	4770      	bx	lr
1000285a:	46c0      	nop			; (mov r8, r8)
1000285c:	4001c004 	.word	0x4001c004

10002860 <gpio_acknowledge_irq>:
    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
}

void gpio_acknowledge_irq(uint gpio, uint32_t events) {
    check_gpio_param(gpio);
    iobank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
10002860:	2207      	movs	r2, #7
10002862:	08c3      	lsrs	r3, r0, #3
10002864:	4010      	ands	r0, r2
10002866:	0080      	lsls	r0, r0, #2
10002868:	4081      	lsls	r1, r0
1000286a:	4a02      	ldr	r2, [pc, #8]	; (10002874 <gpio_acknowledge_irq+0x14>)
1000286c:	333c      	adds	r3, #60	; 0x3c
1000286e:	009b      	lsls	r3, r3, #2
10002870:	5099      	str	r1, [r3, r2]
}
10002872:	4770      	bx	lr
10002874:	40014000 	.word	0x40014000

10002878 <gpio_set_irq_enabled>:
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *  \ingroup pico_platform
 *
 * \return The core number the call was made from
 */
__force_inline static uint get_core_num(void) {
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
1000287a:	23d0      	movs	r3, #208	; 0xd0
1000287c:	061b      	lsls	r3, r3, #24
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
1000287e:	681c      	ldr	r4, [r3, #0]
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002880:	0005      	movs	r5, r0
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10002882:	4263      	negs	r3, r4
10002884:	415c      	adcs	r4, r3
10002886:	232f      	movs	r3, #47	; 0x2f
10002888:	4264      	negs	r4, r4
1000288a:	439c      	bics	r4, r3
1000288c:	4b0a      	ldr	r3, [pc, #40]	; (100028b8 <gpio_set_irq_enabled+0x40>)
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
1000288e:	000f      	movs	r7, r1
                                           &iobank0_hw->proc1_irq_ctrl : &iobank0_hw->proc0_irq_ctrl;
10002890:	18e4      	adds	r4, r4, r3
void gpio_set_irq_enabled(uint gpio, uint32_t events, bool enabled) {
10002892:	0016      	movs	r6, r2
    gpio_acknowledge_irq(gpio, events);
10002894:	f7ff ffe4 	bl	10002860 <gpio_acknowledge_irq>
    events <<= 4 * (gpio % 8);
10002898:	2307      	movs	r3, #7
1000289a:	402b      	ands	r3, r5
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
1000289c:	08ed      	lsrs	r5, r5, #3
    events <<= 4 * (gpio % 8);
1000289e:	009b      	lsls	r3, r3, #2
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100028a0:	00ad      	lsls	r5, r5, #2
    events <<= 4 * (gpio % 8);
100028a2:	409f      	lsls	r7, r3
    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
100028a4:	1964      	adds	r4, r4, r5
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100028a6:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100028a8:	2e00      	cmp	r6, #0
100028aa:	d100      	bne.n	100028ae <gpio_set_irq_enabled+0x36>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100028ac:	23c0      	movs	r3, #192	; 0xc0
100028ae:	019b      	lsls	r3, r3, #6
100028b0:	4323      	orrs	r3, r4
100028b2:	601f      	str	r7, [r3, #0]
}
100028b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100028b6:	46c0      	nop			; (mov r8, r8)
100028b8:	40014130 	.word	0x40014130

100028bc <gpio_set_input_enabled>:
#endif
}

void gpio_set_input_enabled(uint gpio, bool enabled) {
    if (enabled)
        hw_set_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
100028bc:	4b05      	ldr	r3, [pc, #20]	; (100028d4 <gpio_set_input_enabled+0x18>)
100028be:	0080      	lsls	r0, r0, #2
100028c0:	18c0      	adds	r0, r0, r3
100028c2:	2240      	movs	r2, #64	; 0x40
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100028c4:	2380      	movs	r3, #128	; 0x80
    if (enabled)
100028c6:	2900      	cmp	r1, #0
100028c8:	d100      	bne.n	100028cc <gpio_set_input_enabled+0x10>
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100028ca:	23c0      	movs	r3, #192	; 0xc0
100028cc:	019b      	lsls	r3, r3, #6
100028ce:	4303      	orrs	r3, r0
100028d0:	601a      	str	r2, [r3, #0]
    else
        hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}
100028d2:	4770      	bx	lr
100028d4:	4001c004 	.word	0x4001c004

100028d8 <uart_set_baudrate>:
    invalid_params_if(UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100028d8:	b570      	push	{r4, r5, r6, lr}
100028da:	0006      	movs	r6, r0
    invalid_params_if(UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100028dc:	2006      	movs	r0, #6
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100028de:	000c      	movs	r4, r1
    uint32_t baud_rate_div = (8 * clock_get_hz(clk_peri) / baudrate);
100028e0:	f7ff fef2 	bl	100026c8 <clock_get_hz>
100028e4:	0021      	movs	r1, r4
100028e6:	00c0      	lsls	r0, r0, #3
100028e8:	f7fd fc72 	bl	100001d0 <__udivsi3>
    uint32_t baud_ibrd = baud_rate_div >> 7;
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
        baud_ibrd = 1;
100028ec:	2401      	movs	r4, #1
    uint32_t baud_ibrd = baud_rate_div >> 7;
100028ee:	09c5      	lsrs	r5, r0, #7
    if (baud_ibrd == 0) {
100028f0:	d007      	beq.n	10002902 <uart_set_baudrate+0x2a>
        baud_fbrd = 0;
    } else if (baud_ibrd >= 65535) {
100028f2:	4b0e      	ldr	r3, [pc, #56]	; (1000292c <uart_set_baudrate+0x54>)
100028f4:	429d      	cmp	r5, r3
100028f6:	d815      	bhi.n	10002924 <uart_set_baudrate+0x4c>
        baud_ibrd = 65535;
        baud_fbrd = 0;
    }  else {
        baud_fbrd = ((baud_rate_div & 0x7f) + 1) / 2;
100028f8:	237f      	movs	r3, #127	; 0x7f
100028fa:	4018      	ands	r0, r3
100028fc:	1900      	adds	r0, r0, r4
100028fe:	002c      	movs	r4, r5
10002900:	0845      	lsrs	r5, r0, #1
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002902:	2380      	movs	r3, #128	; 0x80
10002904:	2200      	movs	r2, #0
    }

    // Load PL011's baud divisor registers
    uart_get_hw(uart)->ibrd = baud_ibrd;
10002906:	6274      	str	r4, [r6, #36]	; 0x24
10002908:	019b      	lsls	r3, r3, #6
    uart_get_hw(uart)->fbrd = baud_fbrd;
1000290a:	62b5      	str	r5, [r6, #40]	; 0x28

    // PL011 needs a (dummy) line control register write to latch in the
    // divisors. We don't want to actually change LCR contents here.
    hw_set_bits(&uart_get_hw(uart)->lcr_h, 0);
1000290c:	362c      	adds	r6, #44	; 0x2c
1000290e:	4333      	orrs	r3, r6
10002910:	601a      	str	r2, [r3, #0]

    // See datasheet
    return (4 * clock_get_hz(clk_peri)) / (64 * baud_ibrd + baud_fbrd);
10002912:	2006      	movs	r0, #6
10002914:	f7ff fed8 	bl	100026c8 <clock_get_hz>
10002918:	01a1      	lsls	r1, r4, #6
1000291a:	1949      	adds	r1, r1, r5
1000291c:	0080      	lsls	r0, r0, #2
1000291e:	f7fd fc57 	bl	100001d0 <__udivsi3>
}
10002922:	bd70      	pop	{r4, r5, r6, pc}
        baud_fbrd = 0;
10002924:	2500      	movs	r5, #0
        baud_ibrd = 65535;
10002926:	4c02      	ldr	r4, [pc, #8]	; (10002930 <uart_set_baudrate+0x58>)
10002928:	e7eb      	b.n	10002902 <uart_set_baudrate+0x2a>
1000292a:	46c0      	nop			; (mov r8, r8)
1000292c:	0000fffe 	.word	0x0000fffe
10002930:	0000ffff 	.word	0x0000ffff

10002934 <uart_init>:
uint uart_init(uart_inst_t *uart, uint baudrate) {
10002934:	b570      	push	{r4, r5, r6, lr}
10002936:	0004      	movs	r4, r0
    if (clock_get_hz(clk_peri) == 0)
10002938:	2006      	movs	r0, #6
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000293a:	000d      	movs	r5, r1
    if (clock_get_hz(clk_peri) == 0)
1000293c:	f7ff fec4 	bl	100026c8 <clock_get_hz>
10002940:	2800      	cmp	r0, #0
10002942:	d02e      	beq.n	100029a2 <uart_init+0x6e>
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
10002944:	4b19      	ldr	r3, [pc, #100]	; (100029ac <uart_init+0x78>)
10002946:	429c      	cmp	r4, r3
10002948:	d02c      	beq.n	100029a4 <uart_init+0x70>
1000294a:	2380      	movs	r3, #128	; 0x80
1000294c:	03db      	lsls	r3, r3, #15
1000294e:	4a18      	ldr	r2, [pc, #96]	; (100029b0 <uart_init+0x7c>)
10002950:	4918      	ldr	r1, [pc, #96]	; (100029b4 <uart_init+0x80>)
10002952:	6013      	str	r3, [r2, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002954:	4a18      	ldr	r2, [pc, #96]	; (100029b8 <uart_init+0x84>)
10002956:	6013      	str	r3, [r2, #0]
10002958:	0018      	movs	r0, r3
1000295a:	688a      	ldr	r2, [r1, #8]
1000295c:	4390      	bics	r0, r2
1000295e:	d1fb      	bne.n	10002958 <uart_init+0x24>
    return uart == uart1 ? 1 : 0;
10002960:	4b16      	ldr	r3, [pc, #88]	; (100029bc <uart_init+0x88>)
/// \end::uart_set_baudrate[]

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10002962:	4a17      	ldr	r2, [pc, #92]	; (100029c0 <uart_init+0x8c>)
10002964:	18e3      	adds	r3, r4, r3
10002966:	4259      	negs	r1, r3
10002968:	414b      	adcs	r3, r1
1000296a:	2180      	movs	r1, #128	; 0x80
1000296c:	005b      	lsls	r3, r3, #1
1000296e:	0049      	lsls	r1, r1, #1
10002970:	5299      	strh	r1, [r3, r2]
    uint baud = uart_set_baudrate(uart, baudrate);
10002972:	0020      	movs	r0, r4
10002974:	0029      	movs	r1, r5
10002976:	f7ff ffaf 	bl	100028d8 <uart_set_baudrate>
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000297a:	2360      	movs	r3, #96	; 0x60
1000297c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000297e:	0021      	movs	r1, r4
10002980:	4053      	eors	r3, r2
10002982:	226e      	movs	r2, #110	; 0x6e
10002984:	4013      	ands	r3, r2
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002986:	2280      	movs	r2, #128	; 0x80
10002988:	312c      	adds	r1, #44	; 0x2c
1000298a:	0152      	lsls	r2, r2, #5
1000298c:	430a      	orrs	r2, r1
1000298e:	6013      	str	r3, [r2, #0]
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10002990:	4b0c      	ldr	r3, [pc, #48]	; (100029c4 <uart_init+0x90>)
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002992:	2210      	movs	r2, #16
10002994:	6323      	str	r3, [r4, #48]	; 0x30
10002996:	2380      	movs	r3, #128	; 0x80
10002998:	019b      	lsls	r3, r3, #6
1000299a:	430b      	orrs	r3, r1
1000299c:	601a      	str	r2, [r3, #0]
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
1000299e:	2303      	movs	r3, #3
100029a0:	64a3      	str	r3, [r4, #72]	; 0x48
}
100029a2:	bd70      	pop	{r4, r5, r6, pc}
    reset_block(uart_get_index(uart) ? RESETS_RESET_UART1_BITS : RESETS_RESET_UART0_BITS);
100029a4:	2380      	movs	r3, #128	; 0x80
100029a6:	041b      	lsls	r3, r3, #16
100029a8:	e7d1      	b.n	1000294e <uart_init+0x1a>
100029aa:	46c0      	nop			; (mov r8, r8)
100029ac:	40038000 	.word	0x40038000
100029b0:	4000e000 	.word	0x4000e000
100029b4:	4000c000 	.word	0x4000c000
100029b8:	4000f000 	.word	0x4000f000
100029bc:	bffc8000 	.word	0xbffc8000
100029c0:	2000035c 	.word	0x2000035c
100029c4:	00000301 	.word	0x00000301

100029c8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
100029c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100029ca:	0004      	movs	r4, r0
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
100029cc:	f7fe fcd6 	bl	1000137c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
100029d0:	2000      	movs	r0, #0
100029d2:	4b06      	ldr	r3, [pc, #24]	; (100029ec <k_sys_fatal_error_handler+0x24>)
100029d4:	9001      	str	r0, [sp, #4]
100029d6:	9302      	str	r3, [sp, #8]
100029d8:	9000      	str	r0, [sp, #0]
100029da:	0003      	movs	r3, r0
100029dc:	2201      	movs	r2, #1
100029de:	4904      	ldr	r1, [pc, #16]	; (100029f0 <k_sys_fatal_error_handler+0x28>)
100029e0:	f001 fda7 	bl	10004532 <z_log_msg_runtime_create.constprop.0>
	arch_system_halt(reason);
100029e4:	0020      	movs	r0, r4
100029e6:	f001 fdb3 	bl	10004550 <arch_system_halt>
100029ea:	46c0      	nop			; (mov r8, r8)
100029ec:	10004fd1 	.word	0x10004fd1
100029f0:	10004a58 	.word	0x10004a58

100029f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
100029f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100029f6:	0006      	movs	r6, r0
100029f8:	000f      	movs	r7, r1
100029fa:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile("mrs %0, PRIMASK;"
100029fc:	f3ef 8310 	mrs	r3, PRIMASK
10002a00:	b672      	cpsid	i
10002a02:	9307      	str	r3, [sp, #28]
	return z_impl_z_current_get();
10002a04:	f000 fcc0 	bl	10003388 <z_impl_z_current_get>
10002a08:	4b26      	ldr	r3, [pc, #152]	; (10002aa4 <z_fatal_error+0xb0>)
10002a0a:	0005      	movs	r5, r0
	switch (reason) {
10002a0c:	2e04      	cmp	r6, #4
10002a0e:	d802      	bhi.n	10002a16 <z_fatal_error+0x22>
10002a10:	4b25      	ldr	r3, [pc, #148]	; (10002aa8 <z_fatal_error+0xb4>)
10002a12:	00b2      	lsls	r2, r6, #2
10002a14:	58d3      	ldr	r3, [r2, r3]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
10002a16:	2400      	movs	r4, #0
10002a18:	4a24      	ldr	r2, [pc, #144]	; (10002aac <z_fatal_error+0xb8>)
10002a1a:	9304      	str	r3, [sp, #16]
10002a1c:	4b24      	ldr	r3, [pc, #144]	; (10002ab0 <z_fatal_error+0xbc>)
10002a1e:	9206      	str	r2, [sp, #24]
10002a20:	9302      	str	r3, [sp, #8]
10002a22:	2201      	movs	r2, #1
10002a24:	0023      	movs	r3, r4
10002a26:	0020      	movs	r0, r4
10002a28:	9906      	ldr	r1, [sp, #24]
10002a2a:	9405      	str	r4, [sp, #20]
10002a2c:	9603      	str	r6, [sp, #12]
10002a2e:	9401      	str	r4, [sp, #4]
10002a30:	9400      	str	r4, [sp, #0]
10002a32:	f001 fd7e 	bl	10004532 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
10002a36:	42a7      	cmp	r7, r4
10002a38:	d00d      	beq.n	10002a56 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
10002a3a:	69fb      	ldr	r3, [r7, #28]
10002a3c:	05db      	lsls	r3, r3, #23
10002a3e:	42a3      	cmp	r3, r4
10002a40:	d009      	beq.n	10002a56 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
10002a42:	4b1c      	ldr	r3, [pc, #112]	; (10002ab4 <z_fatal_error+0xc0>)
10002a44:	2201      	movs	r2, #1
10002a46:	9302      	str	r3, [sp, #8]
10002a48:	0020      	movs	r0, r4
10002a4a:	0023      	movs	r3, r4
10002a4c:	9906      	ldr	r1, [sp, #24]
10002a4e:	9401      	str	r4, [sp, #4]
10002a50:	9400      	str	r4, [sp, #0]
10002a52:	f001 fd6e 	bl	10004532 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
10002a56:	2d00      	cmp	r5, #0
10002a58:	d007      	beq.n	10002a6a <z_fatal_error+0x76>
10002a5a:	0028      	movs	r0, r5
10002a5c:	f001 fd8d 	bl	1000457a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
10002a60:	2800      	cmp	r0, #0
10002a62:	d002      	beq.n	10002a6a <z_fatal_error+0x76>
10002a64:	7803      	ldrb	r3, [r0, #0]
10002a66:	2b00      	cmp	r3, #0
10002a68:	d100      	bne.n	10002a6c <z_fatal_error+0x78>
		thread_name = "unknown";
10002a6a:	4813      	ldr	r0, [pc, #76]	; (10002ab8 <z_fatal_error+0xc4>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
10002a6c:	9004      	str	r0, [sp, #16]
10002a6e:	2000      	movs	r0, #0
10002a70:	4b12      	ldr	r3, [pc, #72]	; (10002abc <z_fatal_error+0xc8>)
10002a72:	2201      	movs	r2, #1
10002a74:	9906      	ldr	r1, [sp, #24]
10002a76:	9302      	str	r3, [sp, #8]
10002a78:	9001      	str	r0, [sp, #4]
10002a7a:	0003      	movs	r3, r0
10002a7c:	9000      	str	r0, [sp, #0]
10002a7e:	9503      	str	r5, [sp, #12]
10002a80:	f001 fd57 	bl	10004532 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
10002a84:	0039      	movs	r1, r7
10002a86:	0030      	movs	r0, r6
10002a88:	f7ff ff9e 	bl	100029c8 <k_sys_fatal_error_handler>
	if (key != 0U) {
10002a8c:	9b07      	ldr	r3, [sp, #28]
10002a8e:	2b00      	cmp	r3, #0
10002a90:	d102      	bne.n	10002a98 <z_fatal_error+0xa4>
	__asm__ volatile(
10002a92:	b662      	cpsie	i
10002a94:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
10002a98:	0028      	movs	r0, r5
10002a9a:	f7ff f921 	bl	10001ce0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
10002a9e:	b009      	add	sp, #36	; 0x24
10002aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002aa2:	46c0      	nop			; (mov r8, r8)
10002aa4:	10004fe0 	.word	0x10004fe0
10002aa8:	10004bbc 	.word	0x10004bbc
10002aac:	10004a58 	.word	0x10004a58
10002ab0:	10004ff6 	.word	0x10004ff6
10002ab4:	1000501e 	.word	0x1000501e
10002ab8:	10004fee 	.word	0x10004fee
10002abc:	1000503f 	.word	0x1000503f

10002ac0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
10002ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
10002ac2:	2701      	movs	r7, #1
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10002ac4:	4e10      	ldr	r6, [pc, #64]	; (10002b08 <z_sys_init_run_level+0x48>)
10002ac6:	0083      	lsls	r3, r0, #2
10002ac8:	3001      	adds	r0, #1
10002aca:	599c      	ldr	r4, [r3, r6]
10002acc:	0083      	lsls	r3, r0, #2
10002ace:	9301      	str	r3, [sp, #4]
10002ad0:	9b01      	ldr	r3, [sp, #4]
10002ad2:	58f3      	ldr	r3, [r6, r3]
10002ad4:	42a3      	cmp	r3, r4
10002ad6:	d800      	bhi.n	10002ada <z_sys_init_run_level+0x1a>
		}
	}
}
10002ad8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		const struct device *dev = entry->dev;
10002ada:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
10002adc:	6823      	ldr	r3, [r4, #0]
10002ade:	0028      	movs	r0, r5
10002ae0:	4798      	blx	r3
		if (dev != NULL) {
10002ae2:	2d00      	cmp	r5, #0
10002ae4:	d00d      	beq.n	10002b02 <z_sys_init_run_level+0x42>
			if (rc != 0) {
10002ae6:	2800      	cmp	r0, #0
10002ae8:	d007      	beq.n	10002afa <z_sys_init_run_level+0x3a>
				if (rc < 0) {
10002aea:	17c2      	asrs	r2, r0, #31
10002aec:	1880      	adds	r0, r0, r2
				dev->state->init_res = rc;
10002aee:	68eb      	ldr	r3, [r5, #12]
				if (rc < 0) {
10002af0:	4050      	eors	r0, r2
				if (rc > UINT8_MAX) {
10002af2:	28ff      	cmp	r0, #255	; 0xff
10002af4:	dd00      	ble.n	10002af8 <z_sys_init_run_level+0x38>
10002af6:	20ff      	movs	r0, #255	; 0xff
				dev->state->init_res = rc;
10002af8:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
10002afa:	68ea      	ldr	r2, [r5, #12]
10002afc:	7853      	ldrb	r3, [r2, #1]
10002afe:	433b      	orrs	r3, r7
10002b00:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
10002b02:	3408      	adds	r4, #8
10002b04:	e7e4      	b.n	10002ad0 <z_sys_init_run_level+0x10>
10002b06:	46c0      	nop			; (mov r8, r8)
10002b08:	10004bd0 	.word	0x10004bd0

10002b0c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
10002b0c:	b510      	push	{r4, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
10002b0e:	2401      	movs	r4, #1
10002b10:	4b09      	ldr	r3, [pc, #36]	; (10002b38 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10002b12:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
10002b14:	701c      	strb	r4, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
10002b16:	f7ff ffd3 	bl	10002ac0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
10002b1a:	f000 ff29 	bl	10003970 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
10002b1e:	2004      	movs	r0, #4
10002b20:	f7ff ffce 	bl	10002ac0 <z_sys_init_run_level>

	z_init_static_threads();
10002b24:	f000 f8fc 	bl	10002d20 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
10002b28:	f7fd fd8c 	bl	10000644 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
10002b2c:	4a03      	ldr	r2, [pc, #12]	; (10002b3c <bg_thread_main+0x30>)
10002b2e:	7b13      	ldrb	r3, [r2, #12]
10002b30:	43a3      	bics	r3, r4
10002b32:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
10002b34:	bd10      	pop	{r4, pc}
10002b36:	46c0      	nop			; (mov r8, r8)
10002b38:	20000363 	.word	0x20000363
10002b3c:	20000178 	.word	0x20000178

10002b40 <z_bss_zero>:
{
10002b40:	b510      	push	{r4, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
10002b42:	4a03      	ldr	r2, [pc, #12]	; (10002b50 <z_bss_zero+0x10>)
10002b44:	4803      	ldr	r0, [pc, #12]	; (10002b54 <z_bss_zero+0x14>)
10002b46:	2100      	movs	r1, #0
10002b48:	1a12      	subs	r2, r2, r0
10002b4a:	f001 fd05 	bl	10004558 <z_early_memset>
}
10002b4e:	bd10      	pop	{r4, pc}
10002b50:	20000368 	.word	0x20000368
10002b54:	20000100 	.word	0x20000100

10002b58 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
10002b58:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
10002b5a:	2678      	movs	r6, #120	; 0x78
	z_setup_new_thread(thread, stack,
10002b5c:	2501      	movs	r5, #1
{
10002b5e:	0004      	movs	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
10002b60:	4346      	muls	r6, r0
	k_thread_stack_t *stack = z_idle_stacks[i];
10002b62:	0201      	lsls	r1, r0, #8
10002b64:	4811      	ldr	r0, [pc, #68]	; (10002bac <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
10002b66:	2280      	movs	r2, #128	; 0x80
	k_thread_stack_t *stack = z_idle_stacks[i];
10002b68:	1809      	adds	r1, r1, r0
	z_setup_new_thread(thread, stack,
10002b6a:	2000      	movs	r0, #0
{
10002b6c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
10002b6e:	9504      	str	r5, [sp, #16]
10002b70:	350e      	adds	r5, #14
10002b72:	9503      	str	r5, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10002b74:	3505      	adds	r5, #5
10002b76:	4365      	muls	r5, r4
	struct k_thread *thread = &z_idle_threads[i];
10002b78:	4b0d      	ldr	r3, [pc, #52]	; (10002bb0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
10002b7a:	9005      	str	r0, [sp, #20]
10002b7c:	9002      	str	r0, [sp, #8]
10002b7e:	9001      	str	r0, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10002b80:	480c      	ldr	r0, [pc, #48]	; (10002bb4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
10002b82:	18f6      	adds	r6, r6, r3
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
10002b84:	182d      	adds	r5, r5, r0
	z_setup_new_thread(thread, stack,
10002b86:	4b0c      	ldr	r3, [pc, #48]	; (10002bb8 <z_init_cpu+0x60>)
10002b88:	0030      	movs	r0, r6
10002b8a:	9500      	str	r5, [sp, #0]
10002b8c:	0052      	lsls	r2, r2, #1
10002b8e:	f000 f871 	bl	10002c74 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
10002b92:	2204      	movs	r2, #4
10002b94:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
10002b96:	742c      	strb	r4, [r5, #16]
10002b98:	4393      	bics	r3, r2
10002b9a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
10002b9c:	3401      	adds	r4, #1
10002b9e:	4b07      	ldr	r3, [pc, #28]	; (10002bbc <z_init_cpu+0x64>)
10002ba0:	02e4      	lsls	r4, r4, #11
10002ba2:	18e4      	adds	r4, r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
10002ba4:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
10002ba6:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
10002ba8:	b006      	add	sp, #24
10002baa:	bd70      	pop	{r4, r5, r6, pc}
10002bac:	20000b68 	.word	0x20000b68
10002bb0:	20000100 	.word	0x20000100
10002bb4:	20000324 	.word	0x20000324
10002bb8:	10004587 	.word	0x10004587
10002bbc:	20000368 	.word	0x20000368

10002bc0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
10002bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10002bc2:	2000      	movs	r0, #0
{
10002bc4:	b0a5      	sub	sp, #148	; 0x94
	z_sys_init_run_level(INIT_LEVEL_EARLY);
10002bc6:	f7ff ff7b 	bl	10002ac0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
10002bca:	4b22      	ldr	r3, [pc, #136]	; (10002c54 <z_cstart+0x94>)
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
10002bcc:	f383 8808 	msr	MSP, r3
10002bd0:	4921      	ldr	r1, [pc, #132]	; (10002c58 <z_cstart+0x98>)
10002bd2:	4b22      	ldr	r3, [pc, #136]	; (10002c5c <z_cstart+0x9c>)
10002bd4:	6a0a      	ldr	r2, [r1, #32]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
10002bd6:	2500      	movs	r5, #0
10002bd8:	401a      	ands	r2, r3
10002bda:	23e0      	movs	r3, #224	; 0xe0
10002bdc:	041b      	lsls	r3, r3, #16
10002bde:	4313      	orrs	r3, r2
10002be0:	620b      	str	r3, [r1, #32]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
10002be2:	f001 f97a 	bl	10003eda <z_arm_fault_init>
	z_arm_cpu_idle_init();
10002be6:	f7fe fe6f 	bl	100018c8 <z_arm_cpu_idle_init>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
10002bea:	f7fe fbb1 	bl	10001350 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
10002bee:	2202      	movs	r2, #2

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
10002bf0:	4e1b      	ldr	r6, [pc, #108]	; (10002c60 <z_cstart+0xa0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
10002bf2:	ab06      	add	r3, sp, #24
10002bf4:	32ff      	adds	r2, #255	; 0xff
10002bf6:	819a      	strh	r2, [r3, #12]
	_current_cpu->current = dummy_thread;
10002bf8:	60b3      	str	r3, [r6, #8]
	dummy_thread->resource_pool = NULL;
10002bfa:	9520      	str	r5, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
10002bfc:	f001 fc8b 	bl	10004516 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
10002c00:	2001      	movs	r0, #1
10002c02:	f7ff ff5d 	bl	10002ac0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
10002c06:	2002      	movs	r0, #2
10002c08:	f7ff ff5a 	bl	10002ac0 <z_sys_init_run_level>
	z_sched_init();
10002c0c:	f000 fb14 	bl	10003238 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
10002c10:	4c14      	ldr	r4, [pc, #80]	; (10002c64 <z_cstart+0xa4>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10002c12:	4b15      	ldr	r3, [pc, #84]	; (10002c68 <z_cstart+0xa8>)
	_kernel.ready_q.cache = &z_main_thread;
10002c14:	6174      	str	r4, [r6, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
10002c16:	2280      	movs	r2, #128	; 0x80
10002c18:	9305      	str	r3, [sp, #20]
10002c1a:	2301      	movs	r3, #1
10002c1c:	4e13      	ldr	r6, [pc, #76]	; (10002c6c <z_cstart+0xac>)
10002c1e:	4914      	ldr	r1, [pc, #80]	; (10002c70 <z_cstart+0xb0>)
10002c20:	9304      	str	r3, [sp, #16]
10002c22:	00d2      	lsls	r2, r2, #3
10002c24:	0033      	movs	r3, r6
10002c26:	0020      	movs	r0, r4
10002c28:	9503      	str	r5, [sp, #12]
10002c2a:	9502      	str	r5, [sp, #8]
10002c2c:	9501      	str	r5, [sp, #4]
10002c2e:	9500      	str	r5, [sp, #0]
10002c30:	f000 f820 	bl	10002c74 <z_setup_new_thread>
10002c34:	2204      	movs	r2, #4
10002c36:	0007      	movs	r7, r0
10002c38:	7b63      	ldrb	r3, [r4, #13]
	z_ready_thread(&z_main_thread);
10002c3a:	0020      	movs	r0, r4
10002c3c:	4393      	bics	r3, r2
10002c3e:	7363      	strb	r3, [r4, #13]
10002c40:	f001 fce4 	bl	1000460c <z_ready_thread>
	z_init_cpu(0);
10002c44:	0028      	movs	r0, r5
10002c46:	f7ff ff87 	bl	10002b58 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
10002c4a:	0032      	movs	r2, r6
10002c4c:	0039      	movs	r1, r7
10002c4e:	0020      	movs	r0, r4
10002c50:	f7fe ff56 	bl	10001b00 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
10002c54:	20000b68 	.word	0x20000b68
10002c58:	e000ed00 	.word	0xe000ed00
10002c5c:	ff00ffff 	.word	0xff00ffff
10002c60:	20000324 	.word	0x20000324
10002c64:	20000178 	.word	0x20000178
10002c68:	100050a1 	.word	0x100050a1
10002c6c:	10002b0d 	.word	0x10002b0d
10002c70:	20000c68 	.word	0x20000c68

10002c74 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
10002c74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
10002c76:	0004      	movs	r4, r0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
10002c78:	3058      	adds	r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
10002c7a:	65a0      	str	r0, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
10002c7c:	65e0      	str	r0, [r4, #92]	; 0x5c
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
10002c7e:	980c      	ldr	r0, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
10002c80:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
10002c82:	7320      	strb	r0, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
10002c84:	2004      	movs	r0, #4
10002c86:	7360      	strb	r0, [r4, #13]

	thread_base->prio = priority;
10002c88:	980b      	ldr	r0, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10002c8a:	3207      	adds	r2, #7
	thread_base->prio = priority;
10002c8c:	73a0      	strb	r0, [r4, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
10002c8e:	2007      	movs	r0, #7
10002c90:	4382      	bics	r2, r0
	stack_ptr = (char *)stack + stack_obj_size;
10002c92:	188d      	adds	r5, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10002c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	thread_base->pended_on = NULL;
10002c96:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
10002c98:	73e6      	strb	r6, [r4, #15]
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
10002c9a:	61a6      	str	r6, [r4, #24]
	node->prev = NULL;
10002c9c:	61e6      	str	r6, [r4, #28]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
10002c9e:	9202      	str	r2, [sp, #8]
10002ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
10002ca2:	0020      	movs	r0, r4
10002ca4:	9201      	str	r2, [sp, #4]
10002ca6:	9a08      	ldr	r2, [sp, #32]
10002ca8:	9200      	str	r2, [sp, #0]
10002caa:	002a      	movs	r2, r5
10002cac:	f7fe ff12 	bl	10001ad4 <arch_new_thread>
	if (!_current) {
10002cb0:	4b04      	ldr	r3, [pc, #16]	; (10002cc4 <z_setup_new_thread+0x50>)
	new_thread->init_data = NULL;
10002cb2:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
10002cb4:	689b      	ldr	r3, [r3, #8]
10002cb6:	42b3      	cmp	r3, r6
10002cb8:	d000      	beq.n	10002cbc <z_setup_new_thread+0x48>
	new_thread->resource_pool = _current->resource_pool;
10002cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
10002cbc:	0028      	movs	r0, r5
10002cbe:	66a3      	str	r3, [r4, #104]	; 0x68
10002cc0:	b004      	add	sp, #16
10002cc2:	bd70      	pop	{r4, r5, r6, pc}
10002cc4:	20000324 	.word	0x20000324

10002cc8 <z_impl_k_thread_create>:
{
10002cc8:	b570      	push	{r4, r5, r6, lr}
10002cca:	0004      	movs	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10002ccc:	2000      	movs	r0, #0
{
10002cce:	b086      	sub	sp, #24
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10002cd0:	9005      	str	r0, [sp, #20]
10002cd2:	980e      	ldr	r0, [sp, #56]	; 0x38
{
10002cd4:	9d11      	ldr	r5, [sp, #68]	; 0x44
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10002cd6:	9004      	str	r0, [sp, #16]
10002cd8:	980d      	ldr	r0, [sp, #52]	; 0x34
{
10002cda:	9e10      	ldr	r6, [sp, #64]	; 0x40
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
10002cdc:	9003      	str	r0, [sp, #12]
10002cde:	980c      	ldr	r0, [sp, #48]	; 0x30
10002ce0:	9002      	str	r0, [sp, #8]
10002ce2:	980b      	ldr	r0, [sp, #44]	; 0x2c
10002ce4:	9001      	str	r0, [sp, #4]
10002ce6:	980a      	ldr	r0, [sp, #40]	; 0x28
10002ce8:	9000      	str	r0, [sp, #0]
10002cea:	0020      	movs	r0, r4
10002cec:	f7ff ffc2 	bl	10002c74 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
10002cf0:	002b      	movs	r3, r5
10002cf2:	1c72      	adds	r2, r6, #1
10002cf4:	d101      	bne.n	10002cfa <z_impl_k_thread_create+0x32>
10002cf6:	3301      	adds	r3, #1
10002cf8:	d005      	beq.n	10002d06 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10002cfa:	002b      	movs	r3, r5
10002cfc:	4333      	orrs	r3, r6
10002cfe:	d105      	bne.n	10002d0c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
10002d00:	0020      	movs	r0, r4
10002d02:	f000 fa2d 	bl	10003160 <z_sched_start>
}
10002d06:	0020      	movs	r0, r4
10002d08:	b006      	add	sp, #24
10002d0a:	bd70      	pop	{r4, r5, r6, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
10002d0c:	0020      	movs	r0, r4
10002d0e:	0032      	movs	r2, r6
10002d10:	002b      	movs	r3, r5
10002d12:	4902      	ldr	r1, [pc, #8]	; (10002d1c <z_impl_k_thread_create+0x54>)
10002d14:	3018      	adds	r0, #24
10002d16:	f000 fc0f 	bl	10003538 <z_add_timeout>
10002d1a:	e7f4      	b.n	10002d06 <z_impl_k_thread_create+0x3e>
10002d1c:	10004681 	.word	0x10004681

10002d20 <z_init_static_threads>:
{
10002d20:	b570      	push	{r4, r5, r6, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
10002d22:	4c20      	ldr	r4, [pc, #128]	; (10002da4 <z_init_static_threads+0x84>)
{
10002d24:	b086      	sub	sp, #24
10002d26:	0026      	movs	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
10002d28:	4d1f      	ldr	r5, [pc, #124]	; (10002da8 <z_init_static_threads+0x88>)
10002d2a:	42ac      	cmp	r4, r5
10002d2c:	d308      	bcc.n	10002d40 <z_init_static_threads+0x20>
	k_sched_lock();
10002d2e:	f000 fa5d 	bl	100031ec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
10002d32:	0034      	movs	r4, r6
10002d34:	42ac      	cmp	r4, r5
10002d36:	d319      	bcc.n	10002d6c <z_init_static_threads+0x4c>
	k_sched_unlock();
10002d38:	f000 fa68 	bl	1000320c <k_sched_unlock>
}
10002d3c:	b006      	add	sp, #24
10002d3e:	bd70      	pop	{r4, r5, r6, pc}
		z_setup_new_thread(
10002d40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
10002d42:	9305      	str	r3, [sp, #20]
10002d44:	6a23      	ldr	r3, [r4, #32]
10002d46:	9304      	str	r3, [sp, #16]
10002d48:	69e3      	ldr	r3, [r4, #28]
10002d4a:	9303      	str	r3, [sp, #12]
10002d4c:	69a3      	ldr	r3, [r4, #24]
10002d4e:	9302      	str	r3, [sp, #8]
10002d50:	6963      	ldr	r3, [r4, #20]
10002d52:	9301      	str	r3, [sp, #4]
10002d54:	6923      	ldr	r3, [r4, #16]
10002d56:	9300      	str	r3, [sp, #0]
10002d58:	68e3      	ldr	r3, [r4, #12]
10002d5a:	68a2      	ldr	r2, [r4, #8]
10002d5c:	6861      	ldr	r1, [r4, #4]
10002d5e:	6820      	ldr	r0, [r4, #0]
10002d60:	f7ff ff88 	bl	10002c74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
10002d64:	6823      	ldr	r3, [r4, #0]
10002d66:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
10002d68:	342c      	adds	r4, #44	; 0x2c
10002d6a:	e7dd      	b.n	10002d28 <z_init_static_threads+0x8>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
10002d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
10002d6e:	1c5a      	adds	r2, r3, #1
10002d70:	d00f      	beq.n	10002d92 <z_init_static_threads+0x72>
					    K_MSEC(thread_data->init_delay));
10002d72:	43d8      	mvns	r0, r3
10002d74:	17c0      	asrs	r0, r0, #31
10002d76:	4018      	ands	r0, r3
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
10002d78:	220a      	movs	r2, #10
10002d7a:	2300      	movs	r3, #0
10002d7c:	17c1      	asrs	r1, r0, #31
10002d7e:	f7fd fb45 	bl	1000040c <__aeabi_lmul>
			schedule_new_thread(thread_data->init_thread,
10002d82:	6826      	ldr	r6, [r4, #0]
10002d84:	000b      	movs	r3, r1
10002d86:	0002      	movs	r2, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
10002d88:	4301      	orrs	r1, r0
10002d8a:	d104      	bne.n	10002d96 <z_init_static_threads+0x76>
	z_sched_start(thread);
10002d8c:	0030      	movs	r0, r6
10002d8e:	f000 f9e7 	bl	10003160 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
10002d92:	342c      	adds	r4, #44	; 0x2c
10002d94:	e7ce      	b.n	10002d34 <z_init_static_threads+0x14>
10002d96:	0030      	movs	r0, r6
10002d98:	4904      	ldr	r1, [pc, #16]	; (10002dac <z_init_static_threads+0x8c>)
10002d9a:	3018      	adds	r0, #24
10002d9c:	f000 fbcc 	bl	10003538 <z_add_timeout>
10002da0:	e7f7      	b.n	10002d92 <z_init_static_threads+0x72>
10002da2:	46c0      	nop			; (mov r8, r8)
10002da4:	10004a10 	.word	0x10004a10
10002da8:	10004a10 	.word	0x10004a10
10002dac:	10004681 	.word	0x10004681

10002db0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
10002db0:	b570      	push	{r4, r5, r6, lr}
10002db2:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10002db4:	f3ef 8510 	mrs	r5, PRIMASK
10002db8:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
10002dba:	f001 fc7c 	bl	100046b6 <z_unpend_first_thread>

	if (thread != NULL) {
10002dbe:	2800      	cmp	r0, #0
10002dc0:	d008      	beq.n	10002dd4 <z_impl_k_sem_give+0x24>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
10002dc2:	2300      	movs	r3, #0
10002dc4:	6703      	str	r3, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
10002dc6:	f001 fc21 	bl	1000460c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
10002dca:	0029      	movs	r1, r5
10002dcc:	4808      	ldr	r0, [pc, #32]	; (10002df0 <z_impl_k_sem_give+0x40>)
10002dce:	f000 f9b1 	bl	10003134 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
10002dd2:	bd70      	pop	{r4, r5, r6, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10002dd4:	68a2      	ldr	r2, [r4, #8]
10002dd6:	68e3      	ldr	r3, [r4, #12]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10002dd8:	0020      	movs	r0, r4
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10002dda:	1a9b      	subs	r3, r3, r2
10002ddc:	1e59      	subs	r1, r3, #1
10002dde:	418b      	sbcs	r3, r1
10002de0:	189b      	adds	r3, r3, r2
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10002de2:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
10002de4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
10002de6:	3010      	adds	r0, #16
10002de8:	f001 fd1f 	bl	1000482a <z_handle_obj_poll_events>
}
10002dec:	e7ed      	b.n	10002dca <z_impl_k_sem_give+0x1a>
10002dee:	46c0      	nop			; (mov r8, r8)
10002df0:	20000364 	.word	0x20000364

10002df4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
10002df4:	b513      	push	{r0, r1, r4, lr}
10002df6:	0004      	movs	r4, r0
10002df8:	f3ef 8110 	mrs	r1, PRIMASK
10002dfc:	b672      	cpsid	i

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
10002dfe:	6880      	ldr	r0, [r0, #8]
10002e00:	2800      	cmp	r0, #0
10002e02:	d008      	beq.n	10002e16 <z_impl_k_sem_take+0x22>
		sem->count--;
10002e04:	3801      	subs	r0, #1
10002e06:	60a0      	str	r0, [r4, #8]
	if (key != 0U) {
10002e08:	2900      	cmp	r1, #0
10002e0a:	d102      	bne.n	10002e12 <z_impl_k_sem_take+0x1e>
	__asm__ volatile(
10002e0c:	b662      	cpsie	i
10002e0e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
10002e12:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
10002e14:	bd16      	pop	{r1, r2, r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
10002e16:	0010      	movs	r0, r2
10002e18:	4318      	orrs	r0, r3
10002e1a:	d107      	bne.n	10002e2c <z_impl_k_sem_take+0x38>
	if (key != 0U) {
10002e1c:	2900      	cmp	r1, #0
10002e1e:	d102      	bne.n	10002e26 <z_impl_k_sem_take+0x32>
	__asm__ volatile(
10002e20:	b662      	cpsie	i
10002e22:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
10002e26:	2010      	movs	r0, #16
10002e28:	4240      	negs	r0, r0
10002e2a:	e7f3      	b.n	10002e14 <z_impl_k_sem_take+0x20>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
10002e2c:	9200      	str	r2, [sp, #0]
10002e2e:	9301      	str	r3, [sp, #4]
10002e30:	0022      	movs	r2, r4
10002e32:	4802      	ldr	r0, [pc, #8]	; (10002e3c <z_impl_k_sem_take+0x48>)
10002e34:	f000 f966 	bl	10003104 <z_pend_curr>
	return ret;
10002e38:	e7ec      	b.n	10002e14 <z_impl_k_sem_take+0x20>
10002e3a:	46c0      	nop			; (mov r8, r8)
10002e3c:	20000364 	.word	0x20000364

10002e40 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
10002e40:	89c2      	ldrh	r2, [r0, #14]
{
10002e42:	0003      	movs	r3, r0
		&& !z_is_idle_thread_object(thread);
10002e44:	2000      	movs	r0, #0
10002e46:	2a7f      	cmp	r2, #127	; 0x7f
10002e48:	d811      	bhi.n	10002e6e <sliceable+0x2e>
	int ret = slice_ticks;
10002e4a:	4a0a      	ldr	r2, [pc, #40]	; (10002e74 <sliceable+0x34>)
10002e4c:	6810      	ldr	r0, [r2, #0]
		&& slice_time(thread) != 0
10002e4e:	2800      	cmp	r0, #0
10002e50:	d00d      	beq.n	10002e6e <sliceable+0x2e>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10002e52:	210e      	movs	r1, #14
10002e54:	4a08      	ldr	r2, [pc, #32]	; (10002e78 <sliceable+0x38>)
10002e56:	5659      	ldrsb	r1, [r3, r1]
10002e58:	6812      	ldr	r2, [r2, #0]
		&& !z_is_idle_thread_object(thread);
10002e5a:	2000      	movs	r0, #0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
10002e5c:	4291      	cmp	r1, r2
10002e5e:	db06      	blt.n	10002e6e <sliceable+0x2e>
		&& !z_is_thread_prevented_from_running(thread)
10002e60:	7b5a      	ldrb	r2, [r3, #13]
10002e62:	06d2      	lsls	r2, r2, #27
10002e64:	d103      	bne.n	10002e6e <sliceable+0x2e>
		&& !z_is_idle_thread_object(thread);
10002e66:	4805      	ldr	r0, [pc, #20]	; (10002e7c <sliceable+0x3c>)
10002e68:	1a18      	subs	r0, r3, r0
10002e6a:	1e43      	subs	r3, r0, #1
10002e6c:	4198      	sbcs	r0, r3

#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
10002e6e:	2301      	movs	r3, #1
10002e70:	4018      	ands	r0, r3
}
10002e72:	4770      	bx	lr
10002e74:	2000034c 	.word	0x2000034c
10002e78:	20000348 	.word	0x20000348
10002e7c:	20000100 	.word	0x20000100

10002e80 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
10002e80:	2101      	movs	r1, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10002e82:	4b04      	ldr	r3, [pc, #16]	; (10002e94 <slice_timeout+0x14>)
	slice_expired[cpu] = true;
10002e84:	4a04      	ldr	r2, [pc, #16]	; (10002e98 <slice_timeout+0x18>)
	int cpu = ARRAY_INDEX(slice_timeouts, t);
10002e86:	1ac0      	subs	r0, r0, r3
10002e88:	4b04      	ldr	r3, [pc, #16]	; (10002e9c <slice_timeout+0x1c>)
10002e8a:	10c0      	asrs	r0, r0, #3
10002e8c:	4343      	muls	r3, r0
	slice_expired[cpu] = true;
10002e8e:	54d1      	strb	r1, [r2, r3]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
10002e90:	4770      	bx	lr
10002e92:	46c0      	nop			; (mov r8, r8)
10002e94:	200001f0 	.word	0x200001f0
10002e98:	20000364 	.word	0x20000364
10002e9c:	aaaaaaab 	.word	0xaaaaaaab

10002ea0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
10002ea0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;

	z_abort_timeout(&slice_timeouts[cpu]);
10002ea2:	2418      	movs	r4, #24
	int cpu = _current_cpu->id;
10002ea4:	4b0c      	ldr	r3, [pc, #48]	; (10002ed8 <z_reset_time_slice+0x38>)
{
10002ea6:	0005      	movs	r5, r0
	int cpu = _current_cpu->id;
10002ea8:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
10002eaa:	4b0c      	ldr	r3, [pc, #48]	; (10002edc <z_reset_time_slice+0x3c>)
10002eac:	4374      	muls	r4, r6
10002eae:	18e4      	adds	r4, r4, r3
10002eb0:	0020      	movs	r0, r4
10002eb2:	f001 fc60 	bl	10004776 <z_abort_timeout>
	slice_expired[cpu] = false;
10002eb6:	2200      	movs	r2, #0
10002eb8:	4b09      	ldr	r3, [pc, #36]	; (10002ee0 <z_reset_time_slice+0x40>)
	if (sliceable(curr)) {
10002eba:	0028      	movs	r0, r5
	slice_expired[cpu] = false;
10002ebc:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
10002ebe:	f7ff ffbf 	bl	10002e40 <sliceable>
10002ec2:	2800      	cmp	r0, #0
10002ec4:	d007      	beq.n	10002ed6 <z_reset_time_slice+0x36>
	int ret = slice_ticks;
10002ec6:	4b07      	ldr	r3, [pc, #28]	; (10002ee4 <z_reset_time_slice+0x44>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10002ec8:	0020      	movs	r0, r4
			      K_TICKS(slice_time(curr) - 1));
10002eca:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10002ecc:	4906      	ldr	r1, [pc, #24]	; (10002ee8 <z_reset_time_slice+0x48>)
			      K_TICKS(slice_time(curr) - 1));
10002ece:	3a01      	subs	r2, #1
10002ed0:	17d3      	asrs	r3, r2, #31
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
10002ed2:	f000 fb31 	bl	10003538 <z_add_timeout>
	}
}
10002ed6:	bd70      	pop	{r4, r5, r6, pc}
10002ed8:	20000324 	.word	0x20000324
10002edc:	200001f0 	.word	0x200001f0
10002ee0:	20000364 	.word	0x20000364
10002ee4:	2000034c 	.word	0x2000034c
10002ee8:	10002e81 	.word	0x10002e81

10002eec <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
10002eec:	b570      	push	{r4, r5, r6, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
10002eee:	4d0e      	ldr	r5, [pc, #56]	; (10002f28 <update_cache+0x3c>)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002ef0:	4b0e      	ldr	r3, [pc, #56]	; (10002f2c <update_cache+0x40>)
	return list->head == list;
10002ef2:	69ac      	ldr	r4, [r5, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002ef4:	429c      	cmp	r4, r3
10002ef6:	d001      	beq.n	10002efc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
10002ef8:	2c00      	cmp	r4, #0
10002efa:	d100      	bne.n	10002efe <update_cache+0x12>
10002efc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
10002efe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
10002f00:	2800      	cmp	r0, #0
10002f02:	d108      	bne.n	10002f16 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
10002f04:	7b5a      	ldrb	r2, [r3, #13]
10002f06:	06d2      	lsls	r2, r2, #27
10002f08:	d105      	bne.n	10002f16 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
10002f0a:	69a2      	ldr	r2, [r4, #24]
10002f0c:	2a00      	cmp	r2, #0
10002f0e:	d102      	bne.n	10002f16 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
10002f10:	89da      	ldrh	r2, [r3, #14]
10002f12:	2a7f      	cmp	r2, #127	; 0x7f
10002f14:	d805      	bhi.n	10002f22 <update_cache+0x36>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
10002f16:	429c      	cmp	r4, r3
10002f18:	d002      	beq.n	10002f20 <update_cache+0x34>
			z_reset_time_slice(thread);
10002f1a:	0020      	movs	r0, r4
10002f1c:	f7ff ffc0 	bl	10002ea0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
10002f20:	0023      	movs	r3, r4
10002f22:	616b      	str	r3, [r5, #20]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
10002f24:	bd70      	pop	{r4, r5, r6, pc}
10002f26:	46c0      	nop			; (mov r8, r8)
10002f28:	20000324 	.word	0x20000324
10002f2c:	2000033c 	.word	0x2000033c

10002f30 <move_thread_to_end_of_prio_q>:
	if (z_is_thread_queued(thread)) {
10002f30:	220d      	movs	r2, #13
{
10002f32:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
10002f34:	5682      	ldrsb	r2, [r0, r2]
{
10002f36:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
10002f38:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
10002f3a:	2a00      	cmp	r2, #0
10002f3c:	da04      	bge.n	10002f48 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10002f3e:	227f      	movs	r2, #127	; 0x7f
10002f40:	4013      	ands	r3, r2
10002f42:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
10002f44:	f001 fb26 	bl	10004594 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
10002f48:	2380      	movs	r3, #128	; 0x80
10002f4a:	7b62      	ldrb	r2, [r4, #13]
10002f4c:	425b      	negs	r3, r3
10002f4e:	4313      	orrs	r3, r2
	return list->head == list;
10002f50:	4a13      	ldr	r2, [pc, #76]	; (10002fa0 <move_thread_to_end_of_prio_q+0x70>)
10002f52:	7363      	strb	r3, [r4, #13]
10002f54:	6993      	ldr	r3, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002f56:	4813      	ldr	r0, [pc, #76]	; (10002fa4 <move_thread_to_end_of_prio_q+0x74>)
10002f58:	4283      	cmp	r3, r0
10002f5a:	d100      	bne.n	10002f5e <move_thread_to_end_of_prio_q+0x2e>
10002f5c:	2300      	movs	r3, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
10002f5e:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002f60:	2b00      	cmp	r3, #0
10002f62:	d104      	bne.n	10002f6e <move_thread_to_end_of_prio_q+0x3e>

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
10002f64:	6020      	str	r0, [r4, #0]
	node->prev = tail;
10002f66:	6061      	str	r1, [r4, #4]

	tail->next = node;
10002f68:	600c      	str	r4, [r1, #0]
	list->tail = node;
10002f6a:	61d4      	str	r4, [r2, #28]
}
10002f6c:	e00c      	b.n	10002f88 <move_thread_to_end_of_prio_q+0x58>
	int32_t b1 = thread_1->base.prio;
10002f6e:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10002f70:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10002f72:	5765      	ldrsb	r5, [r4, r5]
	int32_t b2 = thread_2->base.prio;
10002f74:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10002f76:	42b5      	cmp	r5, r6
10002f78:	d00d      	beq.n	10002f96 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
10002f7a:	42ae      	cmp	r6, r5
10002f7c:	dd0b      	ble.n	10002f96 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
10002f7e:	6859      	ldr	r1, [r3, #4]

	node->prev = prev;
	node->next = successor;
10002f80:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10002f82:	6061      	str	r1, [r4, #4]
	prev->next = node;
10002f84:	600c      	str	r4, [r1, #0]
	successor->prev = node;
10002f86:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
10002f88:	6890      	ldr	r0, [r2, #8]
10002f8a:	1b00      	subs	r0, r0, r4
10002f8c:	4243      	negs	r3, r0
10002f8e:	4158      	adcs	r0, r3
10002f90:	f7ff ffac 	bl	10002eec <update_cache>
}
10002f94:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10002f96:	4299      	cmp	r1, r3
10002f98:	d0e4      	beq.n	10002f64 <move_thread_to_end_of_prio_q+0x34>
10002f9a:	681b      	ldr	r3, [r3, #0]
10002f9c:	e7e0      	b.n	10002f60 <move_thread_to_end_of_prio_q+0x30>
10002f9e:	46c0      	nop			; (mov r8, r8)
10002fa0:	20000324 	.word	0x20000324
10002fa4:	2000033c 	.word	0x2000033c

10002fa8 <ready_thread>:
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10002fa8:	230d      	movs	r3, #13
{
10002faa:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
10002fac:	56c3      	ldrsb	r3, [r0, r3]
10002fae:	7b41      	ldrb	r1, [r0, #13]
10002fb0:	2b00      	cmp	r3, #0
10002fb2:	db26      	blt.n	10003002 <ready_thread+0x5a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
10002fb4:	06cb      	lsls	r3, r1, #27
10002fb6:	d124      	bne.n	10003002 <ready_thread+0x5a>
	return node->next != NULL;
10002fb8:	6983      	ldr	r3, [r0, #24]
10002fba:	2b00      	cmp	r3, #0
10002fbc:	d121      	bne.n	10003002 <ready_thread+0x5a>
	thread->base.thread_state |= _THREAD_QUEUED;
10002fbe:	2280      	movs	r2, #128	; 0x80
10002fc0:	4252      	negs	r2, r2
10002fc2:	430a      	orrs	r2, r1
10002fc4:	7342      	strb	r2, [r0, #13]
	return list->head == list;
10002fc6:	4a11      	ldr	r2, [pc, #68]	; (1000300c <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002fc8:	4c11      	ldr	r4, [pc, #68]	; (10003010 <ready_thread+0x68>)
	return list->head == list;
10002fca:	6991      	ldr	r1, [r2, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10002fcc:	42a1      	cmp	r1, r4
10002fce:	d000      	beq.n	10002fd2 <ready_thread+0x2a>
10002fd0:	000b      	movs	r3, r1
	return (node == list->tail) ? NULL : node->next;
10002fd2:	69d1      	ldr	r1, [r2, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10002fd4:	2b00      	cmp	r3, #0
10002fd6:	d104      	bne.n	10002fe2 <ready_thread+0x3a>
	node->next = list;
10002fd8:	6004      	str	r4, [r0, #0]
	node->prev = tail;
10002fda:	6041      	str	r1, [r0, #4]
	tail->next = node;
10002fdc:	6008      	str	r0, [r1, #0]
	list->tail = node;
10002fde:	61d0      	str	r0, [r2, #28]
}
10002fe0:	e00c      	b.n	10002ffc <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
10002fe2:	250e      	movs	r5, #14
	int32_t b2 = thread_2->base.prio;
10002fe4:	260e      	movs	r6, #14
	int32_t b1 = thread_1->base.prio;
10002fe6:	5745      	ldrsb	r5, [r0, r5]
	int32_t b2 = thread_2->base.prio;
10002fe8:	579e      	ldrsb	r6, [r3, r6]
	if (b1 != b2) {
10002fea:	42b5      	cmp	r5, r6
10002fec:	d00a      	beq.n	10003004 <ready_thread+0x5c>
		if (z_sched_prio_cmp(thread, t) > 0) {
10002fee:	42ae      	cmp	r6, r5
10002ff0:	dd08      	ble.n	10003004 <ready_thread+0x5c>
	sys_dnode_t *const prev = successor->prev;
10002ff2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10002ff4:	6003      	str	r3, [r0, #0]
	node->prev = prev;
10002ff6:	6042      	str	r2, [r0, #4]
	prev->next = node;
10002ff8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
10002ffa:	6058      	str	r0, [r3, #4]
		update_cache(0);
10002ffc:	2000      	movs	r0, #0
10002ffe:	f7ff ff75 	bl	10002eec <update_cache>
}
10003002:	bd70      	pop	{r4, r5, r6, pc}
	return (node == list->tail) ? NULL : node->next;
10003004:	428b      	cmp	r3, r1
10003006:	d0e7      	beq.n	10002fd8 <ready_thread+0x30>
10003008:	681b      	ldr	r3, [r3, #0]
1000300a:	e7e3      	b.n	10002fd4 <ready_thread+0x2c>
1000300c:	20000324 	.word	0x20000324
10003010:	2000033c 	.word	0x2000033c

10003014 <unready_thread>:
	if (z_is_thread_queued(thread)) {
10003014:	220d      	movs	r2, #13
{
10003016:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
10003018:	5682      	ldrsb	r2, [r0, r2]
{
1000301a:	0004      	movs	r4, r0
	return (thread->base.thread_state & state) != 0U;
1000301c:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
1000301e:	2a00      	cmp	r2, #0
10003020:	da04      	bge.n	1000302c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003022:	227f      	movs	r2, #127	; 0x7f
10003024:	4013      	ands	r3, r2
10003026:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003028:	f001 fab4 	bl	10004594 <sys_dlist_remove>
	update_cache(thread == _current);
1000302c:	4b03      	ldr	r3, [pc, #12]	; (1000303c <unready_thread+0x28>)
1000302e:	6898      	ldr	r0, [r3, #8]
10003030:	1b00      	subs	r0, r0, r4
10003032:	4243      	negs	r3, r0
10003034:	4158      	adcs	r0, r3
10003036:	f7ff ff59 	bl	10002eec <update_cache>
}
1000303a:	bd10      	pop	{r4, pc}
1000303c:	20000324 	.word	0x20000324

10003040 <pend_locked>:
{
10003040:	b570      	push	{r4, r5, r6, lr}
10003042:	001d      	movs	r5, r3
10003044:	0016      	movs	r6, r2
10003046:	0004      	movs	r4, r0
	add_to_waitq_locked(thread, wait_q);
10003048:	f001 fab7 	bl	100045ba <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
1000304c:	002b      	movs	r3, r5
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000304e:	1c72      	adds	r2, r6, #1
10003050:	d101      	bne.n	10003056 <pend_locked+0x16>
10003052:	3301      	adds	r3, #1
10003054:	d006      	beq.n	10003064 <pend_locked+0x24>
10003056:	0020      	movs	r0, r4
10003058:	0032      	movs	r2, r6
1000305a:	002b      	movs	r3, r5
1000305c:	4902      	ldr	r1, [pc, #8]	; (10003068 <pend_locked+0x28>)
1000305e:	3018      	adds	r0, #24
10003060:	f000 fa6a 	bl	10003538 <z_add_timeout>
}
10003064:	bd70      	pop	{r4, r5, r6, pc}
10003066:	46c0      	nop			; (mov r8, r8)
10003068:	10004681 	.word	0x10004681

1000306c <k_sched_time_slice_set>:
{
1000306c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000306e:	f3ef 8410 	mrs	r4, PRIMASK
10003072:	b672      	cpsid	i
			return ((uint32_t)t) * (to_hz / from_hz);
10003074:	230a      	movs	r3, #10
10003076:	4343      	muls	r3, r0
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
10003078:	2800      	cmp	r0, #0
1000307a:	dd02      	ble.n	10003082 <k_sched_time_slice_set+0x16>
			slice_ticks = MAX(2, slice_ticks);
1000307c:	2b02      	cmp	r3, #2
1000307e:	da00      	bge.n	10003082 <k_sched_time_slice_set+0x16>
10003080:	2302      	movs	r3, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
10003082:	4a07      	ldr	r2, [pc, #28]	; (100030a0 <k_sched_time_slice_set+0x34>)
10003084:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
10003086:	4b07      	ldr	r3, [pc, #28]	; (100030a4 <k_sched_time_slice_set+0x38>)
10003088:	6019      	str	r1, [r3, #0]
		z_reset_time_slice(_current);
1000308a:	4b07      	ldr	r3, [pc, #28]	; (100030a8 <k_sched_time_slice_set+0x3c>)
1000308c:	6898      	ldr	r0, [r3, #8]
1000308e:	f7ff ff07 	bl	10002ea0 <z_reset_time_slice>
	if (key != 0U) {
10003092:	2c00      	cmp	r4, #0
10003094:	d102      	bne.n	1000309c <k_sched_time_slice_set+0x30>
	__asm__ volatile(
10003096:	b662      	cpsie	i
10003098:	f3bf 8f6f 	isb	sy
}
1000309c:	bd10      	pop	{r4, pc}
1000309e:	46c0      	nop			; (mov r8, r8)
100030a0:	2000034c 	.word	0x2000034c
100030a4:	20000348 	.word	0x20000348
100030a8:	20000324 	.word	0x20000324

100030ac <z_time_slice>:
{
100030ac:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100030ae:	f3ef 8510 	mrs	r5, PRIMASK
100030b2:	b672      	cpsid	i
	struct k_thread *curr = _current;
100030b4:	4a10      	ldr	r2, [pc, #64]	; (100030f8 <z_time_slice+0x4c>)
	if (pending_current == curr) {
100030b6:	4b11      	ldr	r3, [pc, #68]	; (100030fc <z_time_slice+0x50>)
	struct k_thread *curr = _current;
100030b8:	6894      	ldr	r4, [r2, #8]
	if (pending_current == curr) {
100030ba:	6818      	ldr	r0, [r3, #0]
100030bc:	42a0      	cmp	r0, r4
100030be:	d107      	bne.n	100030d0 <z_time_slice+0x24>
		z_reset_time_slice(curr);
100030c0:	f7ff feee 	bl	10002ea0 <z_reset_time_slice>
	if (key != 0U) {
100030c4:	2d00      	cmp	r5, #0
100030c6:	d102      	bne.n	100030ce <z_time_slice+0x22>
	__asm__ volatile(
100030c8:	b662      	cpsie	i
100030ca:	f3bf 8f6f 	isb	sy
}
100030ce:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
100030d0:	2100      	movs	r1, #0
100030d2:	6019      	str	r1, [r3, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
100030d4:	7c12      	ldrb	r2, [r2, #16]
100030d6:	4b0a      	ldr	r3, [pc, #40]	; (10003100 <z_time_slice+0x54>)
100030d8:	5c9b      	ldrb	r3, [r3, r2]
100030da:	428b      	cmp	r3, r1
100030dc:	d0f2      	beq.n	100030c4 <z_time_slice+0x18>
100030de:	0020      	movs	r0, r4
100030e0:	f7ff feae 	bl	10002e40 <sliceable>
100030e4:	2800      	cmp	r0, #0
100030e6:	d0ed      	beq.n	100030c4 <z_time_slice+0x18>
		if (!z_is_thread_prevented_from_running(curr)) {
100030e8:	7b63      	ldrb	r3, [r4, #13]
100030ea:	06db      	lsls	r3, r3, #27
100030ec:	d102      	bne.n	100030f4 <z_time_slice+0x48>
			move_thread_to_end_of_prio_q(curr);
100030ee:	0020      	movs	r0, r4
100030f0:	f7ff ff1e 	bl	10002f30 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
100030f4:	0020      	movs	r0, r4
100030f6:	e7e3      	b.n	100030c0 <z_time_slice+0x14>
100030f8:	20000324 	.word	0x20000324
100030fc:	20000344 	.word	0x20000344
10003100:	20000364 	.word	0x20000364

10003104 <z_pend_curr>:
{
10003104:	b510      	push	{r4, lr}
	pending_current = _current;
10003106:	4809      	ldr	r0, [pc, #36]	; (1000312c <z_pend_curr+0x28>)
{
10003108:	000c      	movs	r4, r1
	pending_current = _current;
1000310a:	4b09      	ldr	r3, [pc, #36]	; (10003130 <z_pend_curr+0x2c>)
{
1000310c:	0011      	movs	r1, r2
	pending_current = _current;
1000310e:	6882      	ldr	r2, [r0, #8]
10003110:	601a      	str	r2, [r3, #0]
	__asm__ volatile("mrs %0, PRIMASK;"
10003112:	f3ef 8310 	mrs	r3, PRIMASK
10003116:	b672      	cpsid	i
	pend_locked(_current, wait_q, timeout);
10003118:	9a02      	ldr	r2, [sp, #8]
1000311a:	9b03      	ldr	r3, [sp, #12]
1000311c:	6880      	ldr	r0, [r0, #8]
1000311e:	f7ff ff8f 	bl	10003040 <pend_locked>
	ret = arch_swap(key);
10003122:	0020      	movs	r0, r4
10003124:	f7fe fc7c 	bl	10001a20 <arch_swap>
}
10003128:	bd10      	pop	{r4, pc}
1000312a:	46c0      	nop			; (mov r8, r8)
1000312c:	20000324 	.word	0x20000324
10003130:	20000344 	.word	0x20000344

10003134 <z_reschedule>:
{
10003134:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10003136:	2900      	cmp	r1, #0
10003138:	d10a      	bne.n	10003150 <z_reschedule+0x1c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1000313a:	f3ef 8005 	mrs	r0, IPSR
1000313e:	2800      	cmp	r0, #0
10003140:	d107      	bne.n	10003152 <z_reschedule+0x1e>
	return new_thread != _current;
10003142:	4b06      	ldr	r3, [pc, #24]	; (1000315c <z_reschedule+0x28>)
	if (resched(key.key) && need_swap()) {
10003144:	689a      	ldr	r2, [r3, #8]
10003146:	695b      	ldr	r3, [r3, #20]
10003148:	429a      	cmp	r2, r3
1000314a:	d002      	beq.n	10003152 <z_reschedule+0x1e>
1000314c:	f7fe fc68 	bl	10001a20 <arch_swap>
}
10003150:	bd10      	pop	{r4, pc}
	__asm__ volatile(
10003152:	b662      	cpsie	i
10003154:	f3bf 8f6f 	isb	sy
10003158:	e7fa      	b.n	10003150 <z_reschedule+0x1c>
1000315a:	46c0      	nop			; (mov r8, r8)
1000315c:	20000324 	.word	0x20000324

10003160 <z_sched_start>:
{
10003160:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003162:	f3ef 8410 	mrs	r4, PRIMASK
10003166:	b672      	cpsid	i
	if (z_has_thread_started(thread)) {
10003168:	2204      	movs	r2, #4
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
1000316a:	7b43      	ldrb	r3, [r0, #13]
1000316c:	4213      	tst	r3, r2
1000316e:	d105      	bne.n	1000317c <z_sched_start+0x1c>
	if (key != 0U) {
10003170:	2c00      	cmp	r4, #0
10003172:	d102      	bne.n	1000317a <z_sched_start+0x1a>
	__asm__ volatile(
10003174:	b662      	cpsie	i
10003176:	f3bf 8f6f 	isb	sy
}
1000317a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000317c:	4393      	bics	r3, r2
1000317e:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
10003180:	f7ff ff12 	bl	10002fa8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
10003184:	0021      	movs	r1, r4
10003186:	4802      	ldr	r0, [pc, #8]	; (10003190 <z_sched_start+0x30>)
10003188:	f7ff ffd4 	bl	10003134 <z_reschedule>
1000318c:	e7f5      	b.n	1000317a <z_sched_start+0x1a>
1000318e:	46c0      	nop			; (mov r8, r8)
10003190:	20000365 	.word	0x20000365

10003194 <z_impl_k_thread_suspend>:
{
10003194:	b570      	push	{r4, r5, r6, lr}
10003196:	0004      	movs	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
10003198:	3018      	adds	r0, #24
1000319a:	f001 faec 	bl	10004776 <z_abort_timeout>
	__asm__ volatile("mrs %0, PRIMASK;"
1000319e:	f3ef 8610 	mrs	r6, PRIMASK
100031a2:	b672      	cpsid	i
		if (z_is_thread_queued(thread)) {
100031a4:	220d      	movs	r2, #13
100031a6:	56a2      	ldrsb	r2, [r4, r2]
	return (thread->base.thread_state & state) != 0U;
100031a8:	7b63      	ldrb	r3, [r4, #13]
100031aa:	2a00      	cmp	r2, #0
100031ac:	da05      	bge.n	100031ba <z_impl_k_thread_suspend+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
100031ae:	227f      	movs	r2, #127	; 0x7f
100031b0:	4013      	ands	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
100031b2:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
100031b4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
100031b6:	f001 f9ed 	bl	10004594 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
100031ba:	2310      	movs	r3, #16
		update_cache(thread == _current);
100031bc:	4d0a      	ldr	r5, [pc, #40]	; (100031e8 <z_impl_k_thread_suspend+0x54>)
100031be:	7b62      	ldrb	r2, [r4, #13]
100031c0:	68a8      	ldr	r0, [r5, #8]
100031c2:	4313      	orrs	r3, r2
100031c4:	1b00      	subs	r0, r0, r4
100031c6:	7363      	strb	r3, [r4, #13]
100031c8:	4243      	negs	r3, r0
100031ca:	4158      	adcs	r0, r3
100031cc:	f7ff fe8e 	bl	10002eec <update_cache>
	if (key != 0U) {
100031d0:	2e00      	cmp	r6, #0
100031d2:	d102      	bne.n	100031da <z_impl_k_thread_suspend+0x46>
	__asm__ volatile(
100031d4:	b662      	cpsie	i
100031d6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
100031da:	68ab      	ldr	r3, [r5, #8]
100031dc:	42a3      	cmp	r3, r4
100031de:	d101      	bne.n	100031e4 <z_impl_k_thread_suspend+0x50>
		z_reschedule_unlocked();
100031e0:	f001 faa4 	bl	1000472c <z_reschedule_unlocked>
}
100031e4:	bd70      	pop	{r4, r5, r6, pc}
100031e6:	46c0      	nop			; (mov r8, r8)
100031e8:	20000324 	.word	0x20000324

100031ec <k_sched_lock>:
	__asm__ volatile("mrs %0, PRIMASK;"
100031ec:	f3ef 8110 	mrs	r1, PRIMASK
100031f0:	b672      	cpsid	i
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
100031f2:	4b05      	ldr	r3, [pc, #20]	; (10003208 <k_sched_lock+0x1c>)
100031f4:	689a      	ldr	r2, [r3, #8]
100031f6:	7bd3      	ldrb	r3, [r2, #15]
100031f8:	3b01      	subs	r3, #1
100031fa:	73d3      	strb	r3, [r2, #15]
	if (key != 0U) {
100031fc:	2900      	cmp	r1, #0
100031fe:	d102      	bne.n	10003206 <k_sched_lock+0x1a>
	__asm__ volatile(
10003200:	b662      	cpsie	i
10003202:	f3bf 8f6f 	isb	sy
}
10003206:	4770      	bx	lr
10003208:	20000324 	.word	0x20000324

1000320c <k_sched_unlock>:
{
1000320c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000320e:	f3ef 8410 	mrs	r4, PRIMASK
10003212:	b672      	cpsid	i
		++_current->base.sched_locked;
10003214:	4b07      	ldr	r3, [pc, #28]	; (10003234 <k_sched_unlock+0x28>)
		update_cache(0);
10003216:	2000      	movs	r0, #0
		++_current->base.sched_locked;
10003218:	689a      	ldr	r2, [r3, #8]
1000321a:	7bd3      	ldrb	r3, [r2, #15]
1000321c:	3301      	adds	r3, #1
1000321e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
10003220:	f7ff fe64 	bl	10002eec <update_cache>
	if (key != 0U) {
10003224:	2c00      	cmp	r4, #0
10003226:	d102      	bne.n	1000322e <k_sched_unlock+0x22>
	__asm__ volatile(
10003228:	b662      	cpsie	i
1000322a:	f3bf 8f6f 	isb	sy
	z_reschedule_unlocked();
1000322e:	f001 fa7d 	bl	1000472c <z_reschedule_unlocked>
}
10003232:	bd10      	pop	{r4, pc}
10003234:	20000324 	.word	0x20000324

10003238 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003238:	2100      	movs	r1, #0
{
1000323a:	b510      	push	{r4, lr}
	list->head = (sys_dnode_t *)list;
1000323c:	4b03      	ldr	r3, [pc, #12]	; (1000324c <z_sched_init+0x14>)
1000323e:	4a04      	ldr	r2, [pc, #16]	; (10003250 <z_sched_init+0x18>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
10003240:	0008      	movs	r0, r1
10003242:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
10003244:	61da      	str	r2, [r3, #28]
10003246:	f7ff ff11 	bl	1000306c <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
1000324a:	bd10      	pop	{r4, pc}
1000324c:	20000324 	.word	0x20000324
10003250:	2000033c 	.word	0x2000033c

10003254 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
10003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003256:	f3ef 8510 	mrs	r5, PRIMASK
1000325a:	b672      	cpsid	i
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000325c:	227f      	movs	r2, #127	; 0x7f

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
1000325e:	4c19      	ldr	r4, [pc, #100]	; (100032c4 <z_impl_k_yield+0x70>)
10003260:	68a0      	ldr	r0, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003262:	7b43      	ldrb	r3, [r0, #13]
10003264:	4013      	ands	r3, r2
10003266:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003268:	f001 f994 	bl	10004594 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
1000326c:	2280      	movs	r2, #128	; 0x80
	}
	queue_thread(_current);
1000326e:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
10003270:	4252      	negs	r2, r2
10003272:	7b59      	ldrb	r1, [r3, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003274:	4814      	ldr	r0, [pc, #80]	; (100032c8 <z_impl_k_yield+0x74>)
10003276:	430a      	orrs	r2, r1
10003278:	735a      	strb	r2, [r3, #13]
	return list->head == list;
1000327a:	69a2      	ldr	r2, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
1000327c:	4282      	cmp	r2, r0
1000327e:	d100      	bne.n	10003282 <z_impl_k_yield+0x2e>
10003280:	2200      	movs	r2, #0
	return (node == list->tail) ? NULL : node->next;
10003282:	69e1      	ldr	r1, [r4, #28]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
10003284:	2a00      	cmp	r2, #0
10003286:	d104      	bne.n	10003292 <z_impl_k_yield+0x3e>
	node->next = list;
10003288:	6018      	str	r0, [r3, #0]
	node->prev = tail;
1000328a:	6059      	str	r1, [r3, #4]
	tail->next = node;
1000328c:	600b      	str	r3, [r1, #0]
	list->tail = node;
1000328e:	61e3      	str	r3, [r4, #28]
}
10003290:	e00c      	b.n	100032ac <z_impl_k_yield+0x58>
	int32_t b1 = thread_1->base.prio;
10003292:	260e      	movs	r6, #14
	int32_t b2 = thread_2->base.prio;
10003294:	270e      	movs	r7, #14
	int32_t b1 = thread_1->base.prio;
10003296:	579e      	ldrsb	r6, [r3, r6]
	int32_t b2 = thread_2->base.prio;
10003298:	57d7      	ldrsb	r7, [r2, r7]
	if (b1 != b2) {
1000329a:	42be      	cmp	r6, r7
1000329c:	d00d      	beq.n	100032ba <z_impl_k_yield+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
1000329e:	42b7      	cmp	r7, r6
100032a0:	dd0b      	ble.n	100032ba <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
100032a2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
100032a4:	601a      	str	r2, [r3, #0]
	node->prev = prev;
100032a6:	6059      	str	r1, [r3, #4]
	prev->next = node;
100032a8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
100032aa:	6053      	str	r3, [r2, #4]
	update_cache(1);
100032ac:	2001      	movs	r0, #1
100032ae:	f7ff fe1d 	bl	10002eec <update_cache>
100032b2:	0028      	movs	r0, r5
100032b4:	f7fe fbb4 	bl	10001a20 <arch_swap>
	z_swap(&sched_spinlock, key);
}
100032b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
100032ba:	428a      	cmp	r2, r1
100032bc:	d0e4      	beq.n	10003288 <z_impl_k_yield+0x34>
100032be:	6812      	ldr	r2, [r2, #0]
100032c0:	e7e0      	b.n	10003284 <z_impl_k_yield+0x30>
100032c2:	46c0      	nop			; (mov r8, r8)
100032c4:	20000324 	.word	0x20000324
100032c8:	2000033c 	.word	0x2000033c

100032cc <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
100032cc:	0003      	movs	r3, r0
{
100032ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ticks == 0) {
100032d0:	430b      	orrs	r3, r1
{
100032d2:	0004      	movs	r4, r0
100032d4:	000d      	movs	r5, r1
	if (ticks == 0) {
100032d6:	2b00      	cmp	r3, #0
100032d8:	d103      	bne.n	100032e2 <z_tick_sleep+0x16>
	z_impl_k_yield();
100032da:	f7ff ffbb 	bl	10003254 <z_impl_k_yield>
		k_yield();
		return 0;
100032de:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
100032e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
100032e2:	1c4b      	adds	r3, r1, #1
100032e4:	db2e      	blt.n	10003344 <z_tick_sleep+0x78>
100032e6:	1c4b      	adds	r3, r1, #1
100032e8:	d101      	bne.n	100032ee <z_tick_sleep+0x22>
100032ea:	1c83      	adds	r3, r0, #2
100032ec:	d32a      	bcc.n	10003344 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
100032ee:	f001 fa55 	bl	1000479c <sys_clock_tick_get_32>
100032f2:	1827      	adds	r7, r4, r0
100032f4:	f3ef 8310 	mrs	r3, PRIMASK
100032f8:	b672      	cpsid	i
	pending_current = _current;
100032fa:	4e14      	ldr	r6, [pc, #80]	; (1000334c <z_tick_sleep+0x80>)
100032fc:	9301      	str	r3, [sp, #4]
100032fe:	68b0      	ldr	r0, [r6, #8]
10003300:	4b13      	ldr	r3, [pc, #76]	; (10003350 <z_tick_sleep+0x84>)
10003302:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
10003304:	f7ff fe86 	bl	10003014 <unready_thread>
	z_add_thread_timeout(_current, timeout);
10003308:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
1000330a:	0022      	movs	r2, r4
1000330c:	002b      	movs	r3, r5
1000330e:	4911      	ldr	r1, [pc, #68]	; (10003354 <z_tick_sleep+0x88>)
10003310:	3018      	adds	r0, #24
10003312:	f000 f911 	bl	10003538 <z_add_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
10003316:	2310      	movs	r3, #16
	z_mark_thread_as_suspended(_current);
10003318:	68b2      	ldr	r2, [r6, #8]
1000331a:	9801      	ldr	r0, [sp, #4]
1000331c:	7b51      	ldrb	r1, [r2, #13]
1000331e:	430b      	orrs	r3, r1
10003320:	7353      	strb	r3, [r2, #13]
10003322:	f7fe fb7d 	bl	10001a20 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
10003326:	f001 fa39 	bl	1000479c <sys_clock_tick_get_32>
1000332a:	2300      	movs	r3, #0
1000332c:	003a      	movs	r2, r7
1000332e:	0004      	movs	r4, r0
10003330:	001d      	movs	r5, r3
10003332:	1b12      	subs	r2, r2, r4
10003334:	41ab      	sbcs	r3, r5
	if (ticks > 0) {
10003336:	42ab      	cmp	r3, r5
10003338:	dc02      	bgt.n	10003340 <z_tick_sleep+0x74>
1000333a:	d1d0      	bne.n	100032de <z_tick_sleep+0x12>
1000333c:	42aa      	cmp	r2, r5
1000333e:	d0ce      	beq.n	100032de <z_tick_sleep+0x12>
		return ticks;
10003340:	0010      	movs	r0, r2
10003342:	e7cd      	b.n	100032e0 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
10003344:	2702      	movs	r7, #2
10003346:	427f      	negs	r7, r7
10003348:	1b3f      	subs	r7, r7, r4
1000334a:	e7d3      	b.n	100032f4 <z_tick_sleep+0x28>
1000334c:	20000324 	.word	0x20000324
10003350:	20000344 	.word	0x20000344
10003354:	10004681 	.word	0x10004681

10003358 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
10003358:	b510      	push	{r4, lr}
1000335a:	000b      	movs	r3, r1
1000335c:	000c      	movs	r4, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
1000335e:	1c42      	adds	r2, r0, #1
10003360:	d107      	bne.n	10003372 <z_impl_k_sleep+0x1a>
10003362:	3301      	adds	r3, #1
10003364:	d105      	bne.n	10003372 <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
10003366:	4b07      	ldr	r3, [pc, #28]	; (10003384 <z_impl_k_sleep+0x2c>)
10003368:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
1000336a:	f7ff ff13 	bl	10003194 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
1000336e:	0020      	movs	r0, r4
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
10003370:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
10003372:	0021      	movs	r1, r4
10003374:	f7ff ffaa 	bl	100032cc <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
10003378:	220a      	movs	r2, #10
1000337a:	2300      	movs	r3, #0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
1000337c:	17c1      	asrs	r1, r0, #31
1000337e:	f7fd f801 	bl	10000384 <__aeabi_uldivmod>
	return ret;
10003382:	e7f5      	b.n	10003370 <z_impl_k_sleep+0x18>
10003384:	20000324 	.word	0x20000324

10003388 <z_impl_z_current_get>:
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
10003388:	4b01      	ldr	r3, [pc, #4]	; (10003390 <z_impl_z_current_get+0x8>)

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
1000338a:	6898      	ldr	r0, [r3, #8]
}
1000338c:	4770      	bx	lr
1000338e:	46c0      	nop			; (mov r8, r8)
10003390:	20000324 	.word	0x20000324

10003394 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
10003394:	b570      	push	{r4, r5, r6, lr}
10003396:	0004      	movs	r4, r0
10003398:	f3ef 8610 	mrs	r6, PRIMASK
1000339c:	b672      	cpsid	i
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
1000339e:	7b03      	ldrb	r3, [r0, #12]
100033a0:	07db      	lsls	r3, r3, #31
100033a2:	d508      	bpl.n	100033b6 <z_thread_abort+0x22>
	if (key != 0U) {
100033a4:	2e00      	cmp	r6, #0
100033a6:	d102      	bne.n	100033ae <z_thread_abort+0x1a>
	__asm__ volatile(
100033a8:	b662      	cpsie	i
100033aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
100033ae:	2004      	movs	r0, #4
100033b0:	b662      	cpsie	i
100033b2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
100033b4:	bd70      	pop	{r4, r5, r6, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
100033b6:	2308      	movs	r3, #8
100033b8:	7b42      	ldrb	r2, [r0, #13]
100033ba:	421a      	tst	r2, r3
100033bc:	d005      	beq.n	100033ca <z_thread_abort+0x36>
	if (key != 0U) {
100033be:	2e00      	cmp	r6, #0
100033c0:	d1f8      	bne.n	100033b4 <z_thread_abort+0x20>
	__asm__ volatile(
100033c2:	b662      	cpsie	i
100033c4:	f3bf 8f6f 	isb	sy
100033c8:	e7f4      	b.n	100033b4 <z_thread_abort+0x20>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100033ca:	2120      	movs	r1, #32
100033cc:	0010      	movs	r0, r2
100033ce:	4388      	bics	r0, r1
100033d0:	0001      	movs	r1, r0
100033d2:	4319      	orrs	r1, r3
		if (z_is_thread_queued(thread)) {
100033d4:	b248      	sxtb	r0, r1
100033d6:	2800      	cmp	r0, #0
100033d8:	db20      	blt.n	1000341c <z_thread_abort+0x88>
		thread->base.thread_state &= ~_THREAD_ABORTING;
100033da:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
100033dc:	68a3      	ldr	r3, [r4, #8]
100033de:	2b00      	cmp	r3, #0
100033e0:	d002      	beq.n	100033e8 <z_thread_abort+0x54>
			unpend_thread_no_timeout(thread);
100033e2:	0020      	movs	r0, r4
100033e4:	f001 f8de 	bl	100045a4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
100033e8:	0020      	movs	r0, r4
100033ea:	3018      	adds	r0, #24
100033ec:	f001 f9c3 	bl	10004776 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
100033f0:	0023      	movs	r3, r4
	return list->head == list;
100033f2:	6da5      	ldr	r5, [r4, #88]	; 0x58
100033f4:	3358      	adds	r3, #88	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
100033f6:	429d      	cmp	r5, r3
100033f8:	d001      	beq.n	100033fe <z_thread_abort+0x6a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
100033fa:	2d00      	cmp	r5, #0
100033fc:	d116      	bne.n	1000342c <z_thread_abort+0x98>
		update_cache(1);
100033fe:	2001      	movs	r0, #1
10003400:	f7ff fd74 	bl	10002eec <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
10003404:	4b10      	ldr	r3, [pc, #64]	; (10003448 <z_thread_abort+0xb4>)
10003406:	689b      	ldr	r3, [r3, #8]
10003408:	42a3      	cmp	r3, r4
1000340a:	d1d8      	bne.n	100033be <z_thread_abort+0x2a>
1000340c:	f3ef 8305 	mrs	r3, IPSR
10003410:	2b00      	cmp	r3, #0
10003412:	d1d4      	bne.n	100033be <z_thread_abort+0x2a>
10003414:	0030      	movs	r0, r6
10003416:	f7fe fb03 	bl	10001a20 <arch_swap>
	return ret;
1000341a:	e7d0      	b.n	100033be <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
1000341c:	215f      	movs	r1, #95	; 0x5f
1000341e:	400a      	ands	r2, r1
10003420:	4313      	orrs	r3, r2
	sys_dlist_remove(&thread->base.qnode_dlist);
10003422:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
10003424:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
10003426:	f001 f8b5 	bl	10004594 <sys_dlist_remove>
}
1000342a:	e7d7      	b.n	100033dc <z_thread_abort+0x48>
		unpend_thread_no_timeout(thread);
1000342c:	0028      	movs	r0, r5
1000342e:	f001 f8b9 	bl	100045a4 <unpend_thread_no_timeout>
10003432:	0028      	movs	r0, r5
10003434:	3018      	adds	r0, #24
10003436:	f001 f99e 	bl	10004776 <z_abort_timeout>
1000343a:	2300      	movs	r3, #0
		ready_thread(thread);
1000343c:	0028      	movs	r0, r5
1000343e:	672b      	str	r3, [r5, #112]	; 0x70
10003440:	f7ff fdb2 	bl	10002fa8 <ready_thread>
10003444:	e7d4      	b.n	100033f0 <z_thread_abort+0x5c>
10003446:	46c0      	nop			; (mov r8, r8)
10003448:	20000324 	.word	0x20000324

1000344c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
1000344c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
1000344e:	9d06      	ldr	r5, [sp, #24]
10003450:	9e07      	ldr	r6, [sp, #28]
{
10003452:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
10003454:	9500      	str	r5, [sp, #0]
10003456:	9601      	str	r6, [sp, #4]
10003458:	f7ff fe54 	bl	10003104 <z_pend_curr>

	if (data != NULL) {
1000345c:	2c00      	cmp	r4, #0
1000345e:	d003      	beq.n	10003468 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
10003460:	4b02      	ldr	r3, [pc, #8]	; (1000346c <z_sched_wait+0x20>)
10003462:	689b      	ldr	r3, [r3, #8]
10003464:	695b      	ldr	r3, [r3, #20]
10003466:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
10003468:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000346a:	46c0      	nop			; (mov r8, r8)
1000346c:	20000324 	.word	0x20000324

10003470 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
10003470:	b510      	push	{r4, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
10003472:	4806      	ldr	r0, [pc, #24]	; (1000348c <z_data_copy+0x1c>)
10003474:	4a06      	ldr	r2, [pc, #24]	; (10003490 <z_data_copy+0x20>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
10003476:	4907      	ldr	r1, [pc, #28]	; (10003494 <z_data_copy+0x24>)
		       __data_region_end - __data_region_start);
10003478:	1a12      	subs	r2, r2, r0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
1000347a:	f001 f871 	bl	10004560 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
1000347e:	4a06      	ldr	r2, [pc, #24]	; (10003498 <z_data_copy+0x28>)
10003480:	4906      	ldr	r1, [pc, #24]	; (1000349c <z_data_copy+0x2c>)
10003482:	4807      	ldr	r0, [pc, #28]	; (100034a0 <z_data_copy+0x30>)
10003484:	f001 f86c 	bl	10004560 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
10003488:	bd10      	pop	{r4, pc}
1000348a:	46c0      	nop			; (mov r8, r8)
1000348c:	20000000 	.word	0x20000000
10003490:	200000fc 	.word	0x200000fc
10003494:	100050f4 	.word	0x100050f4
10003498:	00000000 	.word	0x00000000
1000349c:	100050f4 	.word	0x100050f4
100034a0:	20000000 	.word	0x20000000

100034a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100034a4:	2000      	movs	r0, #0
{
100034a6:	b510      	push	{r4, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
100034a8:	4b03      	ldr	r3, [pc, #12]	; (100034b8 <elapsed+0x14>)
100034aa:	681b      	ldr	r3, [r3, #0]
100034ac:	4283      	cmp	r3, r0
100034ae:	d101      	bne.n	100034b4 <elapsed+0x10>
100034b0:	f7ff f800 	bl	100024b4 <sys_clock_elapsed>
}
100034b4:	bd10      	pop	{r4, pc}
100034b6:	46c0      	nop			; (mov r8, r8)
100034b8:	20000350 	.word	0x20000350

100034bc <next_timeout>:

static int32_t next_timeout(void)
{
100034bc:	b570      	push	{r4, r5, r6, lr}
	return list->head == list;
100034be:	4b0e      	ldr	r3, [pc, #56]	; (100034f8 <next_timeout+0x3c>)
100034c0:	681e      	ldr	r6, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100034c2:	429e      	cmp	r6, r3
100034c4:	d103      	bne.n	100034ce <next_timeout+0x12>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
100034c6:	f7ff ffed 	bl	100034a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
100034ca:	480c      	ldr	r0, [pc, #48]	; (100034fc <next_timeout+0x40>)
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
100034cc:	bd70      	pop	{r4, r5, r6, pc}
	int32_t ticks_elapsed = elapsed();
100034ce:	f7ff ffe9 	bl	100034a4 <elapsed>
	if ((to == NULL) ||
100034d2:	2e00      	cmp	r6, #0
100034d4:	d0f9      	beq.n	100034ca <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
100034d6:	6932      	ldr	r2, [r6, #16]
100034d8:	6973      	ldr	r3, [r6, #20]
100034da:	0004      	movs	r4, r0
100034dc:	17c5      	asrs	r5, r0, #31
100034de:	1b12      	subs	r2, r2, r4
100034e0:	41ab      	sbcs	r3, r5
	if ((to == NULL) ||
100034e2:	2b00      	cmp	r3, #0
100034e4:	dcf1      	bgt.n	100034ca <next_timeout+0xe>
100034e6:	d103      	bne.n	100034f0 <next_timeout+0x34>
100034e8:	2180      	movs	r1, #128	; 0x80
100034ea:	0609      	lsls	r1, r1, #24
100034ec:	428a      	cmp	r2, r1
100034ee:	d2ec      	bcs.n	100034ca <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
100034f0:	43d8      	mvns	r0, r3
100034f2:	17c0      	asrs	r0, r0, #31
100034f4:	4010      	ands	r0, r2
	return ret;
100034f6:	e7e9      	b.n	100034cc <next_timeout+0x10>
100034f8:	200000e8 	.word	0x200000e8
100034fc:	7fffffff 	.word	0x7fffffff

10003500 <remove_timeout>:
{
10003500:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
10003502:	2800      	cmp	r0, #0
10003504:	d00e      	beq.n	10003524 <remove_timeout+0x24>
	return (node == list->tail) ? NULL : node->next;
10003506:	4b0b      	ldr	r3, [pc, #44]	; (10003534 <remove_timeout+0x34>)
10003508:	685b      	ldr	r3, [r3, #4]
1000350a:	4298      	cmp	r0, r3
1000350c:	d00a      	beq.n	10003524 <remove_timeout+0x24>
1000350e:	6801      	ldr	r1, [r0, #0]
	if (next(t) != NULL) {
10003510:	2900      	cmp	r1, #0
10003512:	d007      	beq.n	10003524 <remove_timeout+0x24>
		next(t)->dticks += t->dticks;
10003514:	690a      	ldr	r2, [r1, #16]
10003516:	694b      	ldr	r3, [r1, #20]
10003518:	6904      	ldr	r4, [r0, #16]
1000351a:	6945      	ldr	r5, [r0, #20]
1000351c:	1912      	adds	r2, r2, r4
1000351e:	416b      	adcs	r3, r5
10003520:	610a      	str	r2, [r1, #16]
10003522:	614b      	str	r3, [r1, #20]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
10003524:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10003526:	6842      	ldr	r2, [r0, #4]

	prev->next = next;
10003528:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000352a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000352c:	2300      	movs	r3, #0
1000352e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10003530:	6043      	str	r3, [r0, #4]
}
10003532:	bd30      	pop	{r4, r5, pc}
10003534:	200000e8 	.word	0x200000e8

10003538 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
10003538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000353a:	0004      	movs	r4, r0
1000353c:	0016      	movs	r6, r2
1000353e:	001f      	movs	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
10003540:	1c53      	adds	r3, r2, #1
10003542:	d101      	bne.n	10003548 <z_add_timeout+0x10>
10003544:	1c7b      	adds	r3, r7, #1
10003546:	d057      	beq.n	100035f8 <z_add_timeout+0xc0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
10003548:	60a1      	str	r1, [r4, #8]
	__asm__ volatile("mrs %0, PRIMASK;"
1000354a:	f3ef 8310 	mrs	r3, PRIMASK
1000354e:	b672      	cpsid	i
10003550:	9301      	str	r3, [sp, #4]

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
10003552:	2f00      	cmp	r7, #0
10003554:	da23      	bge.n	1000359e <z_add_timeout+0x66>
10003556:	1c7b      	adds	r3, r7, #1
10003558:	d101      	bne.n	1000355e <z_add_timeout+0x26>
1000355a:	1cb3      	adds	r3, r6, #2
1000355c:	d81f      	bhi.n	1000359e <z_add_timeout+0x66>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
1000355e:	4b2b      	ldr	r3, [pc, #172]	; (1000360c <z_add_timeout+0xd4>)
10003560:	6818      	ldr	r0, [r3, #0]
10003562:	6859      	ldr	r1, [r3, #4]
10003564:	2202      	movs	r2, #2
10003566:	4252      	negs	r2, r2
10003568:	17d3      	asrs	r3, r2, #31
1000356a:	1a12      	subs	r2, r2, r0
1000356c:	418b      	sbcs	r3, r1
1000356e:	1b92      	subs	r2, r2, r6
10003570:	41bb      	sbcs	r3, r7

			to->dticks = MAX(1, ticks);
10003572:	2b00      	cmp	r3, #0
10003574:	dc04      	bgt.n	10003580 <z_add_timeout+0x48>
10003576:	d101      	bne.n	1000357c <z_add_timeout+0x44>
10003578:	2a00      	cmp	r2, #0
1000357a:	d101      	bne.n	10003580 <z_add_timeout+0x48>
1000357c:	2201      	movs	r2, #1
1000357e:	2300      	movs	r3, #0
	return list->head == list;
10003580:	4f23      	ldr	r7, [pc, #140]	; (10003610 <z_add_timeout+0xd8>)
10003582:	6122      	str	r2, [r4, #16]
10003584:	6163      	str	r3, [r4, #20]
10003586:	683d      	ldr	r5, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003588:	42bd      	cmp	r5, r7
1000358a:	d100      	bne.n	1000358e <z_add_timeout+0x56>
1000358c:	2500      	movs	r5, #0
	return (node == list->tail) ? NULL : node->next;
1000358e:	687e      	ldr	r6, [r7, #4]
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
10003590:	2d00      	cmp	r5, #0
10003592:	d10f      	bne.n	100035b4 <z_add_timeout+0x7c>
	node->next = list;
10003594:	6027      	str	r7, [r4, #0]
	node->prev = tail;
10003596:	6066      	str	r6, [r4, #4]
	tail->next = node;
10003598:	6034      	str	r4, [r6, #0]
	list->tail = node;
1000359a:	607c      	str	r4, [r7, #4]
}
1000359c:	e01c      	b.n	100035d8 <z_add_timeout+0xa0>
			to->dticks = timeout.ticks + 1 + elapsed();
1000359e:	f7ff ff81 	bl	100034a4 <elapsed>
100035a2:	2201      	movs	r2, #1
100035a4:	2300      	movs	r3, #0
100035a6:	1992      	adds	r2, r2, r6
100035a8:	417b      	adcs	r3, r7
100035aa:	0006      	movs	r6, r0
100035ac:	17c7      	asrs	r7, r0, #31
100035ae:	1992      	adds	r2, r2, r6
100035b0:	417b      	adcs	r3, r7
100035b2:	e7e5      	b.n	10003580 <z_add_timeout+0x48>
			if (t->dticks > to->dticks) {
100035b4:	6928      	ldr	r0, [r5, #16]
100035b6:	6969      	ldr	r1, [r5, #20]
100035b8:	6922      	ldr	r2, [r4, #16]
100035ba:	6963      	ldr	r3, [r4, #20]
100035bc:	4299      	cmp	r1, r3
100035be:	dc02      	bgt.n	100035c6 <z_add_timeout+0x8e>
100035c0:	d11b      	bne.n	100035fa <z_add_timeout+0xc2>
100035c2:	4290      	cmp	r0, r2
100035c4:	d919      	bls.n	100035fa <z_add_timeout+0xc2>
				t->dticks -= to->dticks;
100035c6:	1a80      	subs	r0, r0, r2
100035c8:	4199      	sbcs	r1, r3
	sys_dnode_t *const prev = successor->prev;
100035ca:	686b      	ldr	r3, [r5, #4]
100035cc:	6128      	str	r0, [r5, #16]
100035ce:	6169      	str	r1, [r5, #20]
	node->prev = prev;
100035d0:	6063      	str	r3, [r4, #4]
	node->next = successor;
100035d2:	6025      	str	r5, [r4, #0]
	prev->next = node;
100035d4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
100035d6:	606c      	str	r4, [r5, #4]
	return list->head == list;
100035d8:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100035da:	42bb      	cmp	r3, r7
100035dc:	d006      	beq.n	100035ec <z_add_timeout+0xb4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
100035de:	429c      	cmp	r4, r3
100035e0:	d104      	bne.n	100035ec <z_add_timeout+0xb4>
			sys_clock_set_timeout(next_timeout(), false);
100035e2:	f7ff ff6b 	bl	100034bc <next_timeout>
100035e6:	2100      	movs	r1, #0
100035e8:	f7fe feec 	bl	100023c4 <sys_clock_set_timeout>
	if (key != 0U) {
100035ec:	9b01      	ldr	r3, [sp, #4]
100035ee:	2b00      	cmp	r3, #0
100035f0:	d102      	bne.n	100035f8 <z_add_timeout+0xc0>
	__asm__ volatile(
100035f2:	b662      	cpsie	i
100035f4:	f3bf 8f6f 	isb	sy
		}
	}
}
100035f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
100035fa:	1a12      	subs	r2, r2, r0
100035fc:	418b      	sbcs	r3, r1
100035fe:	6122      	str	r2, [r4, #16]
10003600:	6163      	str	r3, [r4, #20]
	return (node == list->tail) ? NULL : node->next;
10003602:	42b5      	cmp	r5, r6
10003604:	d0c6      	beq.n	10003594 <z_add_timeout+0x5c>
10003606:	682d      	ldr	r5, [r5, #0]
10003608:	e7c2      	b.n	10003590 <z_add_timeout+0x58>
1000360a:	46c0      	nop			; (mov r8, r8)
1000360c:	20000208 	.word	0x20000208
10003610:	200000e8 	.word	0x200000e8

10003614 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
10003614:	b5f0      	push	{r4, r5, r6, r7, lr}
10003616:	b085      	sub	sp, #20
	__asm__ volatile("mrs %0, PRIMASK;"
10003618:	f3ef 8310 	mrs	r3, PRIMASK
1000361c:	b672      	cpsid	i

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
1000361e:	9302      	str	r3, [sp, #8]
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
10003620:	4b30      	ldr	r3, [pc, #192]	; (100036e4 <sys_clock_announce+0xd0>)
10003622:	6018      	str	r0, [r3, #0]
	return list->head == list;
10003624:	4b30      	ldr	r3, [pc, #192]	; (100036e8 <sys_clock_announce+0xd4>)
10003626:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10003628:	429c      	cmp	r4, r3
1000362a:	d100      	bne.n	1000362e <sys_clock_announce+0x1a>
1000362c:	2400      	movs	r4, #0
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
1000362e:	4b2f      	ldr	r3, [pc, #188]	; (100036ec <sys_clock_announce+0xd8>)
	     (t != NULL) && (t->dticks <= announce_remaining);
10003630:	4d2c      	ldr	r5, [pc, #176]	; (100036e4 <sys_clock_announce+0xd0>)
		curr_tick += dt;
10003632:	9303      	str	r3, [sp, #12]
10003634:	6818      	ldr	r0, [r3, #0]
10003636:	6859      	ldr	r1, [r3, #4]
	     (t != NULL) && (t->dticks <= announce_remaining);
10003638:	682b      	ldr	r3, [r5, #0]
1000363a:	469c      	mov	ip, r3
1000363c:	2c00      	cmp	r4, #0
1000363e:	d039      	beq.n	100036b4 <sys_clock_announce+0xa0>
10003640:	6962      	ldr	r2, [r4, #20]
10003642:	6926      	ldr	r6, [r4, #16]
10003644:	17db      	asrs	r3, r3, #31
10003646:	429a      	cmp	r2, r3
10003648:	dc02      	bgt.n	10003650 <sys_clock_announce+0x3c>
1000364a:	d10a      	bne.n	10003662 <sys_clock_announce+0x4e>
1000364c:	4566      	cmp	r6, ip
1000364e:	d908      	bls.n	10003662 <sys_clock_announce+0x4e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
10003650:	001f      	movs	r7, r3
10003652:	6922      	ldr	r2, [r4, #16]
10003654:	6963      	ldr	r3, [r4, #20]
10003656:	4666      	mov	r6, ip
10003658:	1b92      	subs	r2, r2, r6
1000365a:	41bb      	sbcs	r3, r7
1000365c:	6122      	str	r2, [r4, #16]
1000365e:	6163      	str	r3, [r4, #20]
10003660:	e028      	b.n	100036b4 <sys_clock_announce+0xa0>
		curr_tick += dt;
10003662:	17f3      	asrs	r3, r6, #31
10003664:	9600      	str	r6, [sp, #0]
10003666:	9301      	str	r3, [sp, #4]
10003668:	9a00      	ldr	r2, [sp, #0]
1000366a:	9b01      	ldr	r3, [sp, #4]
1000366c:	1880      	adds	r0, r0, r2
1000366e:	4159      	adcs	r1, r3
		t->dticks = 0;
10003670:	2300      	movs	r3, #0
10003672:	2200      	movs	r2, #0
		curr_tick += dt;
10003674:	4f1d      	ldr	r7, [pc, #116]	; (100036ec <sys_clock_announce+0xd8>)
		t->dticks = 0;
10003676:	6122      	str	r2, [r4, #16]
10003678:	6163      	str	r3, [r4, #20]
		curr_tick += dt;
1000367a:	6038      	str	r0, [r7, #0]
1000367c:	6079      	str	r1, [r7, #4]
		remove_timeout(t);
1000367e:	0020      	movs	r0, r4
10003680:	f7ff ff3e 	bl	10003500 <remove_timeout>
	if (key != 0U) {
10003684:	9b02      	ldr	r3, [sp, #8]
10003686:	2b00      	cmp	r3, #0
10003688:	d102      	bne.n	10003690 <sys_clock_announce+0x7c>
	__asm__ volatile(
1000368a:	b662      	cpsie	i
1000368c:	f3bf 8f6f 	isb	sy
		t->fn(t);
10003690:	0020      	movs	r0, r4
10003692:	68a3      	ldr	r3, [r4, #8]
10003694:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10003696:	f3ef 8310 	mrs	r3, PRIMASK
1000369a:	b672      	cpsid	i
1000369c:	9302      	str	r3, [sp, #8]
		announce_remaining -= dt;
1000369e:	4b11      	ldr	r3, [pc, #68]	; (100036e4 <sys_clock_announce+0xd0>)
100036a0:	681a      	ldr	r2, [r3, #0]
100036a2:	1b92      	subs	r2, r2, r6
100036a4:	601a      	str	r2, [r3, #0]
	return list->head == list;
100036a6:	4b10      	ldr	r3, [pc, #64]	; (100036e8 <sys_clock_announce+0xd4>)
100036a8:	4694      	mov	ip, r2
100036aa:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100036ac:	429c      	cmp	r4, r3
100036ae:	d1be      	bne.n	1000362e <sys_clock_announce+0x1a>
		curr_tick += dt;
100036b0:	6838      	ldr	r0, [r7, #0]
100036b2:	6879      	ldr	r1, [r7, #4]
	}

	curr_tick += announce_remaining;
100036b4:	4662      	mov	r2, ip
100036b6:	17d3      	asrs	r3, r2, #31
100036b8:	1812      	adds	r2, r2, r0
100036ba:	414b      	adcs	r3, r1
	announce_remaining = 0;
100036bc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
100036be:	9903      	ldr	r1, [sp, #12]
	announce_remaining = 0;
100036c0:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
100036c2:	600a      	str	r2, [r1, #0]
100036c4:	604b      	str	r3, [r1, #4]

	sys_clock_set_timeout(next_timeout(), false);
100036c6:	f7ff fef9 	bl	100034bc <next_timeout>
100036ca:	0021      	movs	r1, r4
100036cc:	f7fe fe7a 	bl	100023c4 <sys_clock_set_timeout>
	if (key != 0U) {
100036d0:	9b02      	ldr	r3, [sp, #8]
100036d2:	42a3      	cmp	r3, r4
100036d4:	d102      	bne.n	100036dc <sys_clock_announce+0xc8>
	__asm__ volatile(
100036d6:	b662      	cpsie	i
100036d8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
100036dc:	f7ff fce6 	bl	100030ac <z_time_slice>
#endif
}
100036e0:	b005      	add	sp, #20
100036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100036e4:	20000350 	.word	0x20000350
100036e8:	200000e8 	.word	0x200000e8
100036ec:	20000208 	.word	0x20000208

100036f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
100036f0:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100036f2:	f3ef 8410 	mrs	r4, PRIMASK
100036f6:	b672      	cpsid	i
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
100036f8:	f7ff fed4 	bl	100034a4 <elapsed>
100036fc:	0002      	movs	r2, r0
100036fe:	4906      	ldr	r1, [pc, #24]	; (10003718 <sys_clock_tick_get+0x28>)
10003700:	17c3      	asrs	r3, r0, #31
10003702:	6808      	ldr	r0, [r1, #0]
10003704:	6849      	ldr	r1, [r1, #4]
10003706:	1880      	adds	r0, r0, r2
10003708:	4159      	adcs	r1, r3
	if (key != 0U) {
1000370a:	2c00      	cmp	r4, #0
1000370c:	d102      	bne.n	10003714 <sys_clock_tick_get+0x24>
	__asm__ volatile(
1000370e:	b662      	cpsie	i
10003710:	f3bf 8f6f 	isb	sy
	}
	return t;
}
10003714:	bd10      	pop	{r4, pc}
10003716:	46c0      	nop			; (mov r8, r8)
10003718:	20000208 	.word	0x20000208

1000371c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
1000371c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000371e:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10003720:	f3ef 8510 	mrs	r5, PRIMASK
10003724:	b672      	cpsid	i
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
10003726:	6803      	ldr	r3, [r0, #0]
10003728:	9501      	str	r5, [sp, #4]
1000372a:	2b00      	cmp	r3, #0
1000372c:	d005      	beq.n	1000373a <z_timer_expiration_handler+0x1e>
	if (key != 0U) {
1000372e:	2d00      	cmp	r5, #0
10003730:	d152      	bne.n	100037d8 <z_timer_expiration_handler+0xbc>
	__asm__ volatile(
10003732:	b662      	cpsie	i
10003734:	f3bf 8f6f 	isb	sy
10003738:	e04e      	b.n	100037d8 <z_timer_expiration_handler+0xbc>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
1000373a:	6a82      	ldr	r2, [r0, #40]	; 0x28
1000373c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1000373e:	2100      	movs	r1, #0
10003740:	2001      	movs	r0, #1
10003742:	1880      	adds	r0, r0, r2
10003744:	4159      	adcs	r1, r3
10003746:	2900      	cmp	r1, #0
10003748:	d101      	bne.n	1000374e <z_timer_expiration_handler+0x32>
1000374a:	2801      	cmp	r0, #1
1000374c:	d929      	bls.n	100037a2 <z_timer_expiration_handler+0x86>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
1000374e:	2b00      	cmp	r3, #0
10003750:	dc04      	bgt.n	1000375c <z_timer_expiration_handler+0x40>
10003752:	d101      	bne.n	10003758 <z_timer_expiration_handler+0x3c>
10003754:	2a00      	cmp	r2, #0
10003756:	d101      	bne.n	1000375c <z_timer_expiration_handler+0x40>
10003758:	2201      	movs	r2, #1
1000375a:	2300      	movs	r3, #0
1000375c:	2601      	movs	r6, #1
1000375e:	4276      	negs	r6, r6
10003760:	17f7      	asrs	r7, r6, #31
10003762:	18b6      	adds	r6, r6, r2
10003764:	415f      	adcs	r7, r3
	return z_impl_k_uptime_ticks();
10003766:	f001 f81d 	bl	100047a4 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
1000376a:	2201      	movs	r2, #1
1000376c:	2300      	movs	r3, #0
1000376e:	1880      	adds	r0, r0, r2
10003770:	4159      	adcs	r1, r3
10003772:	1980      	adds	r0, r0, r6
10003774:	4179      	adcs	r1, r7
10003776:	2900      	cmp	r1, #0
10003778:	dc02      	bgt.n	10003780 <z_timer_expiration_handler+0x64>
1000377a:	d12e      	bne.n	100037da <z_timer_expiration_handler+0xbe>
1000377c:	2800      	cmp	r0, #0
1000377e:	d02c      	beq.n	100037da <z_timer_expiration_handler+0xbe>
10003780:	f001 f810 	bl	100047a4 <z_impl_k_uptime_ticks>
10003784:	2201      	movs	r2, #1
10003786:	2300      	movs	r3, #0
10003788:	1880      	adds	r0, r0, r2
1000378a:	4159      	adcs	r1, r3
1000378c:	2202      	movs	r2, #2
1000378e:	4252      	negs	r2, r2
10003790:	17d3      	asrs	r3, r2, #31
10003792:	1980      	adds	r0, r0, r6
10003794:	4179      	adcs	r1, r7
10003796:	1a12      	subs	r2, r2, r0
10003798:	418b      	sbcs	r3, r1
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000379a:	0020      	movs	r0, r4
1000379c:	4918      	ldr	r1, [pc, #96]	; (10003800 <z_timer_expiration_handler+0xe4>)
1000379e:	f7ff fecb 	bl	10003538 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
100037a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
100037a4:	3301      	adds	r3, #1
100037a6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
100037a8:	6a23      	ldr	r3, [r4, #32]
100037aa:	2b00      	cmp	r3, #0
100037ac:	d00b      	beq.n	100037c6 <z_timer_expiration_handler+0xaa>
	if (key != 0U) {
100037ae:	2d00      	cmp	r5, #0
100037b0:	d102      	bne.n	100037b8 <z_timer_expiration_handler+0x9c>
	__asm__ volatile(
100037b2:	b662      	cpsie	i
100037b4:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
100037b8:	0020      	movs	r0, r4
100037ba:	6a23      	ldr	r3, [r4, #32]
100037bc:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
100037be:	f3ef 8310 	mrs	r3, PRIMASK
100037c2:	b672      	cpsid	i
100037c4:	9301      	str	r3, [sp, #4]
	return list->head == list;
100037c6:	69a5      	ldr	r5, [r4, #24]
100037c8:	3418      	adds	r4, #24
	return sys_dlist_is_empty(list) ? NULL : list->head;
100037ca:	42a5      	cmp	r5, r4
100037cc:	d001      	beq.n	100037d2 <z_timer_expiration_handler+0xb6>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
100037ce:	2d00      	cmp	r5, #0
100037d0:	d107      	bne.n	100037e2 <z_timer_expiration_handler+0xc6>
	if (key != 0U) {
100037d2:	9b01      	ldr	r3, [sp, #4]
100037d4:	2b00      	cmp	r3, #0
100037d6:	d0ac      	beq.n	10003732 <z_timer_expiration_handler+0x16>
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
100037d8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
100037da:	2202      	movs	r2, #2
100037dc:	4252      	negs	r2, r2
100037de:	17d3      	asrs	r3, r2, #31
100037e0:	e7db      	b.n	1000379a <z_timer_expiration_handler+0x7e>
	z_unpend_thread_no_timeout(thread);
100037e2:	0028      	movs	r0, r5
100037e4:	f000 ff1e 	bl	10004624 <z_unpend_thread_no_timeout>
100037e8:	2300      	movs	r3, #0
100037ea:	672b      	str	r3, [r5, #112]	; 0x70
100037ec:	9b01      	ldr	r3, [sp, #4]
100037ee:	2b00      	cmp	r3, #0
100037f0:	d102      	bne.n	100037f8 <z_timer_expiration_handler+0xdc>
	__asm__ volatile(
100037f2:	b662      	cpsie	i
100037f4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
100037f8:	0028      	movs	r0, r5
100037fa:	f000 ff07 	bl	1000460c <z_ready_thread>
100037fe:	e7eb      	b.n	100037d8 <z_timer_expiration_handler+0xbc>
10003800:	1000371d 	.word	0x1000371d

10003804 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
10003804:	b570      	push	{r4, r5, r6, lr}
10003806:	0006      	movs	r6, r0
10003808:	0014      	movs	r4, r2
1000380a:	001d      	movs	r5, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
1000380c:	1c51      	adds	r1, r2, #1
1000380e:	d101      	bne.n	10003814 <z_impl_k_timer_start+0x10>
10003810:	1c59      	adds	r1, r3, #1
10003812:	d022      	beq.n	1000385a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
10003814:	2b00      	cmp	r3, #0
10003816:	da03      	bge.n	10003820 <z_impl_k_timer_start+0x1c>
10003818:	1c59      	adds	r1, r3, #1
1000381a:	d10f      	bne.n	1000383c <z_impl_k_timer_start+0x38>
1000381c:	1c91      	adds	r1, r2, #2
1000381e:	d90d      	bls.n	1000383c <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
10003820:	0014      	movs	r4, r2
10003822:	1e1d      	subs	r5, r3, #0
10003824:	dc05      	bgt.n	10003832 <z_impl_k_timer_start+0x2e>
10003826:	2b00      	cmp	r3, #0
10003828:	d101      	bne.n	1000382e <z_impl_k_timer_start+0x2a>
1000382a:	2a00      	cmp	r2, #0
1000382c:	d101      	bne.n	10003832 <z_impl_k_timer_start+0x2e>
1000382e:	2401      	movs	r4, #1
10003830:	2500      	movs	r5, #0
10003832:	2201      	movs	r2, #1
10003834:	4252      	negs	r2, r2
10003836:	17d3      	asrs	r3, r2, #31
10003838:	18a4      	adds	r4, r4, r2
1000383a:	415d      	adcs	r5, r3
	}

	(void)z_abort_timeout(&timer->timeout);
1000383c:	0030      	movs	r0, r6
1000383e:	f000 ff9a 	bl	10004776 <z_abort_timeout>
	timer->period = period;
10003842:	9a04      	ldr	r2, [sp, #16]
10003844:	9b05      	ldr	r3, [sp, #20]
10003846:	62b2      	str	r2, [r6, #40]	; 0x28
10003848:	62f3      	str	r3, [r6, #44]	; 0x2c
	timer->status = 0U;
1000384a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
1000384c:	0022      	movs	r2, r4
	timer->status = 0U;
1000384e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
10003850:	0030      	movs	r0, r6
10003852:	002b      	movs	r3, r5
10003854:	4901      	ldr	r1, [pc, #4]	; (1000385c <z_impl_k_timer_start+0x58>)
10003856:	f7ff fe6f 	bl	10003538 <z_add_timeout>
		     duration);
}
1000385a:	bd70      	pop	{r4, r5, r6, pc}
1000385c:	1000371d 	.word	0x1000371d

10003860 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
10003860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct z_poller *poller = event->poller;
10003862:	6884      	ldr	r4, [r0, #8]
{
10003864:	0005      	movs	r5, r0
10003866:	9101      	str	r1, [sp, #4]
	int retcode = 0;

	if (poller != NULL) {
10003868:	2c00      	cmp	r4, #0
1000386a:	d00b      	beq.n	10003884 <signal_poll_event+0x24>
		if (poller->mode == MODE_POLL) {
1000386c:	7863      	ldrb	r3, [r4, #1]
1000386e:	2b01      	cmp	r3, #1
10003870:	d136      	bne.n	100038e0 <signal_poll_event+0x80>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
10003872:	0026      	movs	r6, r4
10003874:	3e60      	subs	r6, #96	; 0x60
	if (!z_is_thread_pending(thread)) {
10003876:	7b72      	ldrb	r2, [r6, #13]
10003878:	3301      	adds	r3, #1
1000387a:	0011      	movs	r1, r2
1000387c:	4019      	ands	r1, r3
1000387e:	421a      	tst	r2, r3
10003880:	d110      	bne.n	100038a4 <signal_poll_event+0x44>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
10003882:	7021      	strb	r1, [r4, #0]
	event->state |= state;
10003884:	68ea      	ldr	r2, [r5, #12]
10003886:	9901      	ldr	r1, [sp, #4]
10003888:	02d3      	lsls	r3, r2, #11
1000388a:	0e5b      	lsrs	r3, r3, #25
1000388c:	4319      	orrs	r1, r3
1000388e:	000b      	movs	r3, r1
10003890:	217f      	movs	r1, #127	; 0x7f
	event->poller = NULL;
10003892:	2000      	movs	r0, #0
	event->state |= state;
10003894:	400b      	ands	r3, r1
10003896:	4922      	ldr	r1, [pc, #136]	; (10003920 <signal_poll_event+0xc0>)
10003898:	039b      	lsls	r3, r3, #14
1000389a:	400a      	ands	r2, r1
1000389c:	431a      	orrs	r2, r3
	event->poller = NULL;
1000389e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
100038a0:	60ea      	str	r2, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
100038a2:	e03b      	b.n	1000391c <signal_poll_event+0xbc>
	if (z_is_thread_timeout_expired(thread)) {
100038a4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
100038a6:	3302      	adds	r3, #2
100038a8:	d102      	bne.n	100038b0 <signal_poll_event+0x50>
100038aa:	6af3      	ldr	r3, [r6, #44]	; 0x2c
100038ac:	3301      	adds	r3, #1
100038ae:	d031      	beq.n	10003914 <signal_poll_event+0xb4>
	z_unpend_thread(thread);
100038b0:	0030      	movs	r0, r6
100038b2:	f000 ff19 	bl	100046e8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
100038b6:	9b01      	ldr	r3, [sp, #4]
100038b8:	2b08      	cmp	r3, #8
100038ba:	d00e      	beq.n	100038da <signal_poll_event+0x7a>
100038bc:	2300      	movs	r3, #0
100038be:	6733      	str	r3, [r6, #112]	; 0x70
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
100038c0:	7b73      	ldrb	r3, [r6, #13]
100038c2:	06db      	lsls	r3, r3, #27
100038c4:	d10e      	bne.n	100038e4 <signal_poll_event+0x84>
	return node->next != NULL;
100038c6:	0023      	movs	r3, r4
100038c8:	3b48      	subs	r3, #72	; 0x48
100038ca:	681f      	ldr	r7, [r3, #0]
100038cc:	2f00      	cmp	r7, #0
100038ce:	d109      	bne.n	100038e4 <signal_poll_event+0x84>
	z_ready_thread(thread);
100038d0:	0030      	movs	r0, r6
100038d2:	f000 fe9b 	bl	1000460c <z_ready_thread>
		poller->is_polling = false;
100038d6:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
100038d8:	e7d4      	b.n	10003884 <signal_poll_event+0x24>
	arch_thread_return_value_set(thread,
100038da:	2304      	movs	r3, #4
100038dc:	425b      	negs	r3, r3
100038de:	e7ee      	b.n	100038be <signal_poll_event+0x5e>
		} else if (poller->mode == MODE_TRIGGERED) {
100038e0:	2b02      	cmp	r3, #2
100038e2:	d002      	beq.n	100038ea <signal_poll_event+0x8a>
		poller->is_polling = false;
100038e4:	2300      	movs	r3, #0
100038e6:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
100038e8:	e7cc      	b.n	10003884 <signal_poll_event+0x24>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
100038ea:	7823      	ldrb	r3, [r4, #0]
100038ec:	2b00      	cmp	r3, #0
100038ee:	d0c9      	beq.n	10003884 <signal_poll_event+0x24>
100038f0:	0027      	movs	r7, r4
100038f2:	3f14      	subs	r7, #20
100038f4:	693e      	ldr	r6, [r7, #16]
100038f6:	2e00      	cmp	r6, #0
100038f8:	d00a      	beq.n	10003910 <signal_poll_event+0xb0>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
100038fa:	0020      	movs	r0, r4
100038fc:	3014      	adds	r0, #20
100038fe:	f000 ff3a 	bl	10004776 <z_abort_timeout>
		twork->poll_result = 0;
10003902:	2300      	movs	r3, #0
		z_work_submit_to_queue(work_q, &twork->work);
10003904:	0039      	movs	r1, r7
10003906:	0030      	movs	r0, r6
		twork->poll_result = 0;
10003908:	643b      	str	r3, [r7, #64]	; 0x40
		z_work_submit_to_queue(work_q, &twork->work);
1000390a:	f000 ffb2 	bl	10004872 <z_work_submit_to_queue>
1000390e:	e7e9      	b.n	100038e4 <signal_poll_event+0x84>
		poller->is_polling = false;
10003910:	7026      	strb	r6, [r4, #0]
		if (retcode < 0) {
10003912:	e7b7      	b.n	10003884 <signal_poll_event+0x24>
		poller->is_polling = false;
10003914:	2300      	movs	r3, #0
		return -EAGAIN;
10003916:	200b      	movs	r0, #11
		poller->is_polling = false;
10003918:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
1000391a:	4240      	negs	r0, r0
}
1000391c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000391e:	46c0      	nop			; (mov r8, r8)
10003920:	ffe03fff 	.word	0xffe03fff

10003924 <z_impl_k_poll_signal_raise>:
{
10003924:	0003      	movs	r3, r0
10003926:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10003928:	f3ef 8510 	mrs	r5, PRIMASK
1000392c:	b672      	cpsid	i
	sig->result = result;
1000392e:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
10003930:	2101      	movs	r1, #1
10003932:	6081      	str	r1, [r0, #8]
	return list->head == list;
10003934:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
10003936:	4283      	cmp	r3, r0
10003938:	d103      	bne.n	10003942 <z_impl_k_poll_signal_raise+0x1e>
	if (key != 0U) {
1000393a:	2d00      	cmp	r5, #0
1000393c:	d011      	beq.n	10003962 <z_impl_k_poll_signal_raise+0x3e>
		return 0;
1000393e:	2400      	movs	r4, #0
10003940:	e00d      	b.n	1000395e <z_impl_k_poll_signal_raise+0x3a>
	sys_dnode_t *const next = node->next;
10003942:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10003944:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10003946:	6013      	str	r3, [r2, #0]
	next->prev = prev;
10003948:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000394a:	2300      	movs	r3, #0
1000394c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
1000394e:	6043      	str	r3, [r0, #4]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
10003950:	f7ff ff86 	bl	10003860 <signal_poll_event>
	z_reschedule(&lock, key);
10003954:	0029      	movs	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
10003956:	0004      	movs	r4, r0
	z_reschedule(&lock, key);
10003958:	4804      	ldr	r0, [pc, #16]	; (1000396c <z_impl_k_poll_signal_raise+0x48>)
1000395a:	f7ff fbeb 	bl	10003134 <z_reschedule>
}
1000395e:	0020      	movs	r0, r4
10003960:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
10003962:	b662      	cpsie	i
10003964:	f3bf 8f6f 	isb	sy
10003968:	e7e9      	b.n	1000393e <z_impl_k_poll_signal_raise+0x1a>
1000396a:	46c0      	nop			; (mov r8, r8)
1000396c:	20000365 	.word	0x20000365

10003970 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
10003970:	b510      	push	{r4, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
10003972:	4802      	ldr	r0, [pc, #8]	; (1000397c <boot_banner+0xc>)
10003974:	f000 f98e 	bl	10003c94 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
10003978:	bd10      	pop	{r4, pc}
1000397a:	46c0      	nop			; (mov r8, r8)
1000397c:	100050a9 	.word	0x100050a9

10003980 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
10003980:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
10003982:	4b09      	ldr	r3, [pc, #36]	; (100039a8 <k_sys_work_q_init+0x28>)
{
10003984:	b085      	sub	sp, #20
	struct k_work_queue_config cfg = {
10003986:	2400      	movs	r4, #0
10003988:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
1000398a:	2280      	movs	r2, #128	; 0x80
1000398c:	2301      	movs	r3, #1
	struct k_work_queue_config cfg = {
1000398e:	ad02      	add	r5, sp, #8
10003990:	712c      	strb	r4, [r5, #4]
	k_work_queue_start(&k_sys_work_q,
10003992:	4906      	ldr	r1, [pc, #24]	; (100039ac <k_sys_work_q_init+0x2c>)
10003994:	4806      	ldr	r0, [pc, #24]	; (100039b0 <k_sys_work_q_init+0x30>)
10003996:	9500      	str	r5, [sp, #0]
10003998:	425b      	negs	r3, r3
1000399a:	00d2      	lsls	r2, r2, #3
1000399c:	f000 f904 	bl	10003ba8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
100039a0:	0020      	movs	r0, r4
100039a2:	b005      	add	sp, #20
100039a4:	bd30      	pop	{r4, r5, pc}
100039a6:	46c0      	nop			; (mov r8, r8)
100039a8:	100050eb 	.word	0x100050eb
100039ac:	20001068 	.word	0x20001068
100039b0:	20000210 	.word	0x20000210

100039b4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
100039b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100039b6:	0005      	movs	r5, r0
100039b8:	b087      	sub	sp, #28
	__asm__ volatile("mrs %0, PRIMASK;"
100039ba:	f3ef 8710 	mrs	r7, PRIMASK
100039be:	b672      	cpsid	i
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
100039c0:	002e      	movs	r6, r5
100039c2:	6fac      	ldr	r4, [r5, #120]	; 0x78
100039c4:	3690      	adds	r6, #144	; 0x90
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
100039c6:	2c00      	cmp	r4, #0
100039c8:	d113      	bne.n	100039f2 <work_queue_main+0x3e>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
100039ca:	2102      	movs	r1, #2
100039cc:	0030      	movs	r0, r6
100039ce:	f000 ff3b 	bl	10004848 <flag_test_and_clear>
100039d2:	2800      	cmp	r0, #0
100039d4:	d13c      	bne.n	10003a50 <work_queue_main+0x9c>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
100039d6:	2300      	movs	r3, #0
100039d8:	002a      	movs	r2, r5
100039da:	9302      	str	r3, [sp, #8]
100039dc:	2301      	movs	r3, #1
100039de:	425b      	negs	r3, r3
100039e0:	17dc      	asrs	r4, r3, #31
100039e2:	0039      	movs	r1, r7
100039e4:	9300      	str	r3, [sp, #0]
100039e6:	9401      	str	r4, [sp, #4]
100039e8:	3280      	adds	r2, #128	; 0x80
100039ea:	4839      	ldr	r0, [pc, #228]	; (10003ad0 <work_queue_main+0x11c>)
100039ec:	f7ff fd2e 	bl	1000344c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
100039f0:	e7e3      	b.n	100039ba <work_queue_main+0x6>
	return node->next;
100039f2:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
100039f4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	list->head = node;
100039f6:	67ab      	str	r3, [r5, #120]	; 0x78
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
100039f8:	4294      	cmp	r4, r2
100039fa:	d100      	bne.n	100039fe <work_queue_main+0x4a>
	list->tail = node;
100039fc:	67eb      	str	r3, [r5, #124]	; 0x7c
	*flagp |= BIT(bit);
100039fe:	2202      	movs	r2, #2
10003a00:	6833      	ldr	r3, [r6, #0]
10003a02:	4313      	orrs	r3, r2
10003a04:	6033      	str	r3, [r6, #0]
	*flagp &= ~BIT(bit);
10003a06:	2304      	movs	r3, #4
10003a08:	68e2      	ldr	r2, [r4, #12]
10003a0a:	439a      	bics	r2, r3
10003a0c:	3b03      	subs	r3, #3
10003a0e:	4313      	orrs	r3, r2
10003a10:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
10003a12:	6863      	ldr	r3, [r4, #4]
	if (key != 0U) {
10003a14:	2f00      	cmp	r7, #0
10003a16:	d025      	beq.n	10003a64 <work_queue_main+0xb0>
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
10003a18:	0020      	movs	r0, r4
10003a1a:	4798      	blx	r3
	__asm__ volatile("mrs %0, PRIMASK;"
10003a1c:	f3ef 8310 	mrs	r3, PRIMASK
10003a20:	b672      	cpsid	i
10003a22:	9305      	str	r3, [sp, #20]
	*flagp &= ~BIT(bit);
10003a24:	68e3      	ldr	r3, [r4, #12]
10003a26:	2101      	movs	r1, #1
10003a28:	001a      	movs	r2, r3
10003a2a:	438a      	bics	r2, r1
	return (*flagp & BIT(bit)) != 0U;
10003a2c:	0850      	lsrs	r0, r2, #1
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003a2e:	4208      	tst	r0, r1
10003a30:	d11c      	bne.n	10003a6c <work_queue_main+0xb8>
	*flagp &= ~BIT(bit);
10003a32:	60e2      	str	r2, [r4, #12]
10003a34:	2202      	movs	r2, #2
10003a36:	6833      	ldr	r3, [r6, #0]
10003a38:	4393      	bics	r3, r2
	if (key != 0U) {
10003a3a:	9a05      	ldr	r2, [sp, #20]
10003a3c:	6033      	str	r3, [r6, #0]
	return (*flagp & BIT(bit)) != 0U;
10003a3e:	05db      	lsls	r3, r3, #23
10003a40:	0fdb      	lsrs	r3, r3, #31
10003a42:	2a00      	cmp	r2, #0
10003a44:	d03f      	beq.n	10003ac6 <work_queue_main+0x112>
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
10003a46:	2b00      	cmp	r3, #0
10003a48:	d1b7      	bne.n	100039ba <work_queue_main+0x6>
	z_impl_k_yield();
10003a4a:	f7ff fc03 	bl	10003254 <z_impl_k_yield>
}
10003a4e:	e7b4      	b.n	100039ba <work_queue_main+0x6>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
10003a50:	002c      	movs	r4, r5
10003a52:	3488      	adds	r4, #136	; 0x88
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
10003a54:	2200      	movs	r2, #0
10003a56:	2101      	movs	r1, #1
10003a58:	0020      	movs	r0, r4
10003a5a:	f000 fe6e 	bl	1000473a <z_sched_wake>
10003a5e:	2800      	cmp	r0, #0
10003a60:	d1f8      	bne.n	10003a54 <work_queue_main+0xa0>
10003a62:	e7b8      	b.n	100039d6 <work_queue_main+0x22>
	__asm__ volatile(
10003a64:	b662      	cpsie	i
10003a66:	f3bf 8f6f 	isb	sy
10003a6a:	e7d5      	b.n	10003a18 <work_queue_main+0x64>
	*flagp &= ~BIT(bit);
10003a6c:	2203      	movs	r2, #3
10003a6e:	4393      	bics	r3, r2
10003a70:	60e3      	str	r3, [r4, #12]
	return list->head;
10003a72:	4b18      	ldr	r3, [pc, #96]	; (10003ad4 <work_queue_main+0x120>)
10003a74:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10003a76:	2800      	cmp	r0, #0
10003a78:	d0dc      	beq.n	10003a34 <work_queue_main+0x80>
	return node->next;
10003a7a:	2700      	movs	r7, #0
10003a7c:	6803      	ldr	r3, [r0, #0]
10003a7e:	9304      	str	r3, [sp, #16]
10003a80:	2800      	cmp	r0, #0
10003a82:	d0d7      	beq.n	10003a34 <work_queue_main+0x80>
		if (wc->work == work) {
10003a84:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
10003a86:	0002      	movs	r2, r0
		if (wc->work == work) {
10003a88:	429c      	cmp	r4, r3
10003a8a:	d10e      	bne.n	10003aaa <work_queue_main+0xf6>
10003a8c:	6802      	ldr	r2, [r0, #0]
10003a8e:	4b11      	ldr	r3, [pc, #68]	; (10003ad4 <work_queue_main+0x120>)
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
10003a90:	2f00      	cmp	r7, #0
10003a92:	d112      	bne.n	10003aba <work_queue_main+0x106>
10003a94:	6859      	ldr	r1, [r3, #4]
	list->head = node;
10003a96:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
10003a98:	4281      	cmp	r1, r0
10003a9a:	d100      	bne.n	10003a9e <work_queue_main+0xea>
	list->tail = node;
10003a9c:	605a      	str	r2, [r3, #4]
	parent->next = child;
10003a9e:	2300      	movs	r3, #0
10003aa0:	6003      	str	r3, [r0, #0]
			k_sem_give(&wc->sem);
10003aa2:	3008      	adds	r0, #8
	z_impl_k_sem_give(sem);
10003aa4:	f7ff f984 	bl	10002db0 <z_impl_k_sem_give>
}
10003aa8:	003a      	movs	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
10003aaa:	9b04      	ldr	r3, [sp, #16]
10003aac:	2b00      	cmp	r3, #0
10003aae:	d000      	beq.n	10003ab2 <work_queue_main+0xfe>
	return node->next;
10003ab0:	681b      	ldr	r3, [r3, #0]
10003ab2:	9804      	ldr	r0, [sp, #16]
10003ab4:	0017      	movs	r7, r2
10003ab6:	9304      	str	r3, [sp, #16]
10003ab8:	e7e2      	b.n	10003a80 <work_queue_main+0xcc>
	parent->next = child;
10003aba:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
10003abc:	685a      	ldr	r2, [r3, #4]
10003abe:	4282      	cmp	r2, r0
10003ac0:	d1ed      	bne.n	10003a9e <work_queue_main+0xea>
	list->tail = node;
10003ac2:	605f      	str	r7, [r3, #4]
}
10003ac4:	e7eb      	b.n	10003a9e <work_queue_main+0xea>
10003ac6:	b662      	cpsie	i
10003ac8:	f3bf 8f6f 	isb	sy
10003acc:	e7bb      	b.n	10003a46 <work_queue_main+0x92>
10003ace:	46c0      	nop			; (mov r8, r8)
10003ad0:	20000365 	.word	0x20000365
10003ad4:	20000354 	.word	0x20000354

10003ad8 <submit_to_queue_locked>:
{
10003ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
10003ada:	68c3      	ldr	r3, [r0, #12]
{
10003adc:	000d      	movs	r5, r1
	return (*flagp & BIT(bit)) != 0U;
10003ade:	0859      	lsrs	r1, r3, #1
10003ae0:	2201      	movs	r2, #1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003ae2:	000f      	movs	r7, r1
{
10003ae4:	0004      	movs	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
10003ae6:	4017      	ands	r7, r2
10003ae8:	4211      	tst	r1, r2
10003aea:	d14b      	bne.n	10003b84 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10003aec:	089b      	lsrs	r3, r3, #2
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
10003aee:	4213      	tst	r3, r2
10003af0:	d11d      	bne.n	10003b2e <submit_to_queue_locked+0x56>
		if (*queuep == NULL) {
10003af2:	682b      	ldr	r3, [r5, #0]
10003af4:	2b00      	cmp	r3, #0
10003af6:	d101      	bne.n	10003afc <submit_to_queue_locked+0x24>
			*queuep = work->queue;
10003af8:	6883      	ldr	r3, [r0, #8]
10003afa:	602b      	str	r3, [r5, #0]
		ret = 1;
10003afc:	2701      	movs	r7, #1
	return (*flagp & BIT(bit)) != 0U;
10003afe:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
10003b00:	423b      	tst	r3, r7
10003b02:	d002      	beq.n	10003b0a <submit_to_queue_locked+0x32>
			*queuep = work->queue;
10003b04:	68a3      	ldr	r3, [r4, #8]
			ret = 2;
10003b06:	19ff      	adds	r7, r7, r7
			*queuep = work->queue;
10003b08:	602b      	str	r3, [r5, #0]
		int rc = queue_submit_locked(*queuep, work);
10003b0a:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
10003b0c:	2e00      	cmp	r6, #0
10003b0e:	d047      	beq.n	10003ba0 <submit_to_queue_locked+0xc8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10003b10:	0032      	movs	r2, r6
10003b12:	4b24      	ldr	r3, [pc, #144]	; (10003ba4 <submit_to_queue_locked+0xcc>)
10003b14:	3290      	adds	r2, #144	; 0x90
10003b16:	689b      	ldr	r3, [r3, #8]
10003b18:	9201      	str	r2, [sp, #4]
10003b1a:	42b3      	cmp	r3, r6
10003b1c:	d022      	beq.n	10003b64 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
10003b1e:	2101      	movs	r1, #1
10003b20:	6812      	ldr	r2, [r2, #0]
10003b22:	0893      	lsrs	r3, r2, #2
10003b24:	400b      	ands	r3, r1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10003b26:	420a      	tst	r2, r1
10003b28:	d104      	bne.n	10003b34 <submit_to_queue_locked+0x5c>
		ret = -EBUSY;
10003b2a:	2713      	movs	r7, #19
		return -EINVAL;
10003b2c:	427f      	negs	r7, r7
		*queuep = NULL;
10003b2e:	2300      	movs	r3, #0
10003b30:	602b      	str	r3, [r5, #0]
	return ret;
10003b32:	e015      	b.n	10003b60 <submit_to_queue_locked+0x88>
	} else if (draining && !chained) {
10003b34:	2b00      	cmp	r3, #0
10003b36:	d125      	bne.n	10003b84 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10003b38:	08d3      	lsrs	r3, r2, #3
10003b3a:	400b      	ands	r3, r1
	} else if (plugged && !draining) {
10003b3c:	2b00      	cmp	r3, #0
10003b3e:	d121      	bne.n	10003b84 <submit_to_queue_locked+0xac>
	parent->next = child;
10003b40:	2300      	movs	r3, #0
10003b42:	6023      	str	r3, [r4, #0]
	return list->tail;
10003b44:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
Z_GENLIST_APPEND(slist, snode)
10003b46:	2b00      	cmp	r3, #0
10003b48:	d127      	bne.n	10003b9a <submit_to_queue_locked+0xc2>
	list->tail = node;
10003b4a:	67f4      	str	r4, [r6, #124]	; 0x7c
	list->head = node;
10003b4c:	67b4      	str	r4, [r6, #120]	; 0x78
		(void)notify_queue_locked(queue);
10003b4e:	0030      	movs	r0, r6
10003b50:	f000 fe86 	bl	10004860 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
10003b54:	2304      	movs	r3, #4
10003b56:	68e2      	ldr	r2, [r4, #12]
10003b58:	4313      	orrs	r3, r2
10003b5a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
10003b5c:	682b      	ldr	r3, [r5, #0]
10003b5e:	60a3      	str	r3, [r4, #8]
}
10003b60:	0038      	movs	r0, r7
10003b62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10003b64:	f000 fd00 	bl	10004568 <k_is_in_isr>
	return (*flagp & BIT(bit)) != 0U;
10003b68:	9b01      	ldr	r3, [sp, #4]
10003b6a:	2201      	movs	r2, #1
10003b6c:	681b      	ldr	r3, [r3, #0]
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
10003b6e:	2800      	cmp	r0, #0
10003b70:	d10a      	bne.n	10003b88 <submit_to_queue_locked+0xb0>
	return (*flagp & BIT(bit)) != 0U;
10003b72:	08d9      	lsrs	r1, r3, #3
10003b74:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10003b76:	4213      	tst	r3, r2
10003b78:	d0d7      	beq.n	10003b2a <submit_to_queue_locked+0x52>
	} else if (plugged && !draining) {
10003b7a:	2900      	cmp	r1, #0
10003b7c:	d0e0      	beq.n	10003b40 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
10003b7e:	089b      	lsrs	r3, r3, #2
	} else if (plugged && !draining) {
10003b80:	4213      	tst	r3, r2
10003b82:	d1dd      	bne.n	10003b40 <submit_to_queue_locked+0x68>
		ret = -EBUSY;
10003b84:	2710      	movs	r7, #16
10003b86:	e7d1      	b.n	10003b2c <submit_to_queue_locked+0x54>
	return (*flagp & BIT(bit)) != 0U;
10003b88:	0899      	lsrs	r1, r3, #2
10003b8a:	4011      	ands	r1, r2
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
10003b8c:	4213      	tst	r3, r2
10003b8e:	d0cc      	beq.n	10003b2a <submit_to_queue_locked+0x52>
	} else if (draining && !chained) {
10003b90:	2900      	cmp	r1, #0
10003b92:	d1f7      	bne.n	10003b84 <submit_to_queue_locked+0xac>
	return (*flagp & BIT(bit)) != 0U;
10003b94:	08db      	lsrs	r3, r3, #3
10003b96:	4013      	ands	r3, r2
10003b98:	e7d0      	b.n	10003b3c <submit_to_queue_locked+0x64>
	parent->next = child;
10003b9a:	601c      	str	r4, [r3, #0]
	list->tail = node;
10003b9c:	67f4      	str	r4, [r6, #124]	; 0x7c
}
10003b9e:	e7d6      	b.n	10003b4e <submit_to_queue_locked+0x76>
		return -EINVAL;
10003ba0:	2716      	movs	r7, #22
10003ba2:	e7c3      	b.n	10003b2c <submit_to_queue_locked+0x54>
10003ba4:	20000324 	.word	0x20000324

10003ba8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
10003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
10003baa:	0004      	movs	r4, r0
	list->head = NULL;
10003bac:	2000      	movs	r0, #0
	sys_dlist_init(&w->waitq);
10003bae:	0026      	movs	r6, r4
10003bb0:	67a0      	str	r0, [r4, #120]	; 0x78
	list->tail = NULL;
10003bb2:	67e0      	str	r0, [r4, #124]	; 0x7c
10003bb4:	3680      	adds	r6, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10003bb6:	1d20      	adds	r0, r4, #4
10003bb8:	b089      	sub	sp, #36	; 0x24
10003bba:	67c6      	str	r6, [r0, #124]	; 0x7c
10003bbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->tail = (sys_dnode_t *)list;
10003bbe:	3004      	adds	r0, #4
10003bc0:	67c6      	str	r6, [r0, #124]	; 0x7c
10003bc2:	3080      	adds	r0, #128	; 0x80
	list->head = (sys_dnode_t *)list;
10003bc4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
10003bc6:	6040      	str	r0, [r0, #4]
	__ASSERT_NO_MSG(queue);
	__ASSERT_NO_MSG(stack);
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
	uint32_t flags = K_WORK_QUEUE_STARTED;
10003bc8:	2001      	movs	r0, #1

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
10003bca:	2d00      	cmp	r5, #0
10003bcc:	d007      	beq.n	10003bde <k_work_queue_start+0x36>
10003bce:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
10003bd0:	4246      	negs	r6, r0
10003bd2:	4170      	adcs	r0, r6
10003bd4:	26ff      	movs	r6, #255	; 0xff
10003bd6:	4240      	negs	r0, r0
10003bd8:	43b0      	bics	r0, r6
10003bda:	3002      	adds	r0, #2
10003bdc:	30ff      	adds	r0, #255	; 0xff
	*flagp = flags;
10003bde:	0026      	movs	r6, r4
10003be0:	3690      	adds	r6, #144	; 0x90
10003be2:	6030      	str	r0, [r6, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
10003be4:	2601      	movs	r6, #1
10003be6:	4276      	negs	r6, r6
10003be8:	17f7      	asrs	r7, r6, #31
10003bea:	9606      	str	r6, [sp, #24]
10003bec:	9707      	str	r7, [sp, #28]
10003bee:	2600      	movs	r6, #0
10003bf0:	480b      	ldr	r0, [pc, #44]	; (10003c20 <k_work_queue_start+0x78>)
10003bf2:	9303      	str	r3, [sp, #12]
10003bf4:	9604      	str	r6, [sp, #16]
10003bf6:	0003      	movs	r3, r0
10003bf8:	9602      	str	r6, [sp, #8]
10003bfa:	0020      	movs	r0, r4
10003bfc:	9601      	str	r6, [sp, #4]
10003bfe:	9400      	str	r4, [sp, #0]
10003c00:	f7ff f862 	bl	10002cc8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
10003c04:	42b5      	cmp	r5, r6
10003c06:	d005      	beq.n	10003c14 <k_work_queue_start+0x6c>
10003c08:	6829      	ldr	r1, [r5, #0]
10003c0a:	42b1      	cmp	r1, r6
10003c0c:	d002      	beq.n	10003c14 <k_work_queue_start+0x6c>
	return z_impl_k_thread_name_set(thread, str);
10003c0e:	0020      	movs	r0, r4
10003c10:	f000 fcb0 	bl	10004574 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
10003c14:	0020      	movs	r0, r4
10003c16:	f000 fcb2 	bl	1000457e <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
10003c1a:	b009      	add	sp, #36	; 0x24
10003c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003c1e:	46c0      	nop			; (mov r8, r8)
10003c20:	100039b5 	.word	0x100039b5

10003c24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
10003c24:	4770      	bx	lr

10003c26 <AverageResis>:
		sum += res; 
	}
	average = sum / 10; 

	return average; 
10003c26:	4770      	bx	lr

10003c28 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
10003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
10003c2a:	b085      	sub	sp, #20
10003c2c:	000d      	movs	r5, r1
10003c2e:	1e1c      	subs	r4, r3, #0
10003c30:	9002      	str	r0, [sp, #8]
10003c32:	9203      	str	r2, [sp, #12]
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
10003c34:	d029      	beq.n	10003c8a <cbpprintf_external+0x62>
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
10003c36:	2600      	movs	r6, #0
	s_nbr     = hdr->hdr.desc.str_cnt;
10003c38:	785b      	ldrb	r3, [r3, #1]
10003c3a:	9301      	str	r3, [sp, #4]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
10003c3c:	78e0      	ldrb	r0, [r4, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
10003c3e:	7823      	ldrb	r3, [r4, #0]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10003c40:	0040      	lsls	r0, r0, #1
	args_size = hdr->hdr.desc.len * sizeof(int);
10003c42:	009b      	lsls	r3, r3, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10003c44:	18c0      	adds	r0, r0, r3
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
10003c46:	78a3      	ldrb	r3, [r4, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
10003c48:	18c0      	adds	r0, r0, r3
10003c4a:	1820      	adds	r0, r4, r0
	for (i = 0; i < s_nbr; i++) {
10003c4c:	9b01      	ldr	r3, [sp, #4]
10003c4e:	429e      	cmp	r6, r3
10003c50:	d310      	bcc.n	10003c74 <cbpprintf_external+0x4c>

	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10003c52:	7962      	ldrb	r2, [r4, #5]
10003c54:	7923      	ldrb	r3, [r4, #4]
10003c56:	0212      	lsls	r2, r2, #8
10003c58:	431a      	orrs	r2, r3
10003c5a:	79a3      	ldrb	r3, [r4, #6]
	return formatter(out, ctx, fmt, u.ap);
10003c5c:	9903      	ldr	r1, [sp, #12]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10003c5e:	041b      	lsls	r3, r3, #16
10003c60:	4313      	orrs	r3, r2
10003c62:	79e2      	ldrb	r2, [r4, #7]
	return formatter(out, ctx, fmt, u.ap);
10003c64:	9802      	ldr	r0, [sp, #8]
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
10003c66:	0612      	lsls	r2, r2, #24
10003c68:	431a      	orrs	r2, r3
	buf += sizeof(*hdr);
10003c6a:	0023      	movs	r3, r4
10003c6c:	3308      	adds	r3, #8
	return formatter(out, ctx, fmt, u.ap);
10003c6e:	47a8      	blx	r5
}
10003c70:	b005      	add	sp, #20
10003c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s_idx = *(uint8_t *)s++;
10003c74:	7803      	ldrb	r3, [r0, #0]
10003c76:	1c47      	adds	r7, r0, #1
		*ps = s;
10003c78:	009b      	lsls	r3, r3, #2
		s += strlen(s) + 1;
10003c7a:	0038      	movs	r0, r7
		*ps = s;
10003c7c:	511f      	str	r7, [r3, r4]
		s += strlen(s) + 1;
10003c7e:	f000 f92d 	bl	10003edc <strlen>
10003c82:	3001      	adds	r0, #1
10003c84:	1838      	adds	r0, r7, r0
	for (i = 0; i < s_nbr; i++) {
10003c86:	3601      	adds	r6, #1
10003c88:	e7e0      	b.n	10003c4c <cbpprintf_external+0x24>
		return -EINVAL;
10003c8a:	2016      	movs	r0, #22
10003c8c:	4240      	negs	r0, r0
10003c8e:	e7ef      	b.n	10003c70 <cbpprintf_external+0x48>

10003c90 <arch_printk_char_out>:
}
10003c90:	2000      	movs	r0, #0
10003c92:	4770      	bx	lr

10003c94 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
10003c94:	b40f      	push	{r0, r1, r2, r3}
10003c96:	b507      	push	{r0, r1, r2, lr}
10003c98:	a904      	add	r1, sp, #16
10003c9a:	c901      	ldmia	r1!, {r0}
	va_list ap;

	va_start(ap, fmt);
10003c9c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
10003c9e:	f000 f888 	bl	10003db2 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
10003ca2:	b003      	add	sp, #12
10003ca4:	bc08      	pop	{r3}
10003ca6:	b004      	add	sp, #16
10003ca8:	4718      	bx	r3

10003caa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
10003caa:	b510      	push	{r4, lr}
10003cac:	0004      	movs	r4, r0
10003cae:	0008      	movs	r0, r1
10003cb0:	0011      	movs	r1, r2
10003cb2:	001a      	movs	r2, r3
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
10003cb4:	47a0      	blx	r4
	return z_impl_z_current_get();
10003cb6:	f7ff fb67 	bl	10003388 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
10003cba:	f7fe f811 	bl	10001ce0 <z_impl_k_thread_abort>

10003cbe <encode_uint>:
{
10003cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
10003cc0:	b085      	sub	sp, #20
10003cc2:	9001      	str	r0, [sp, #4]
10003cc4:	9303      	str	r3, [sp, #12]
	bool upcase = isupper((int)conv->specifier);
10003cc6:	78d3      	ldrb	r3, [r2, #3]
{
10003cc8:	0015      	movs	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
10003cca:	001a      	movs	r2, r3
10003ccc:	3a41      	subs	r2, #65	; 0x41
10003cce:	000f      	movs	r7, r1
	switch (specifier) {
10003cd0:	2408      	movs	r4, #8
10003cd2:	9202      	str	r2, [sp, #8]
10003cd4:	2b6f      	cmp	r3, #111	; 0x6f
10003cd6:	d00a      	beq.n	10003cee <encode_uint+0x30>
10003cd8:	d804      	bhi.n	10003ce4 <encode_uint+0x26>
		return 16;
10003cda:	1924      	adds	r4, r4, r4
	switch (specifier) {
10003cdc:	2b58      	cmp	r3, #88	; 0x58
10003cde:	d006      	beq.n	10003cee <encode_uint+0x30>
		return 10;
10003ce0:	3c06      	subs	r4, #6
10003ce2:	e004      	b.n	10003cee <encode_uint+0x30>
	switch (specifier) {
10003ce4:	2208      	movs	r2, #8
		return 16;
10003ce6:	2410      	movs	r4, #16
	switch (specifier) {
10003ce8:	4393      	bics	r3, r2
10003cea:	2b70      	cmp	r3, #112	; 0x70
10003cec:	d1f8      	bne.n	10003ce0 <encode_uint+0x22>
	char *bp = bps + (bpe - bps);
10003cee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
10003cf0:	0022      	movs	r2, r4
10003cf2:	2300      	movs	r3, #0
10003cf4:	0039      	movs	r1, r7
10003cf6:	9801      	ldr	r0, [sp, #4]
10003cf8:	f7fc fb44 	bl	10000384 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10003cfc:	0013      	movs	r3, r2
10003cfe:	468c      	mov	ip, r1
10003d00:	b2d2      	uxtb	r2, r2
10003d02:	2b09      	cmp	r3, #9
10003d04:	d81a      	bhi.n	10003d3c <encode_uint+0x7e>
10003d06:	3230      	adds	r2, #48	; 0x30
10003d08:	b2d3      	uxtb	r3, r2
10003d0a:	3e01      	subs	r6, #1
10003d0c:	7033      	strb	r3, [r6, #0]
	} while ((value != 0) && (bps < bp));
10003d0e:	2300      	movs	r3, #0
10003d10:	42bb      	cmp	r3, r7
10003d12:	d102      	bne.n	10003d1a <encode_uint+0x5c>
10003d14:	9b01      	ldr	r3, [sp, #4]
10003d16:	429c      	cmp	r4, r3
10003d18:	d802      	bhi.n	10003d20 <encode_uint+0x62>
10003d1a:	9b03      	ldr	r3, [sp, #12]
10003d1c:	429e      	cmp	r6, r3
10003d1e:	d80a      	bhi.n	10003d36 <encode_uint+0x78>
	if (conv->flag_hash) {
10003d20:	782b      	ldrb	r3, [r5, #0]
10003d22:	069b      	lsls	r3, r3, #26
10003d24:	d504      	bpl.n	10003d30 <encode_uint+0x72>
		if (radix == 8) {
10003d26:	2c08      	cmp	r4, #8
10003d28:	d110      	bne.n	10003d4c <encode_uint+0x8e>
			conv->altform_0 = true;
10003d2a:	78ab      	ldrb	r3, [r5, #2]
10003d2c:	4323      	orrs	r3, r4
10003d2e:	70ab      	strb	r3, [r5, #2]
}
10003d30:	0030      	movs	r0, r6
10003d32:	b005      	add	sp, #20
10003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value /= radix;
10003d36:	4667      	mov	r7, ip
10003d38:	9001      	str	r0, [sp, #4]
10003d3a:	e7d9      	b.n	10003cf0 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
10003d3c:	0013      	movs	r3, r2
10003d3e:	9902      	ldr	r1, [sp, #8]
10003d40:	3357      	adds	r3, #87	; 0x57
10003d42:	b2db      	uxtb	r3, r3
10003d44:	2919      	cmp	r1, #25
10003d46:	d8e0      	bhi.n	10003d0a <encode_uint+0x4c>
10003d48:	3237      	adds	r2, #55	; 0x37
10003d4a:	e7dd      	b.n	10003d08 <encode_uint+0x4a>
		} else if (radix == 16) {
10003d4c:	2c10      	cmp	r4, #16
10003d4e:	d1ef      	bne.n	10003d30 <encode_uint+0x72>
			conv->altform_0c = true;
10003d50:	78ab      	ldrb	r3, [r5, #2]
10003d52:	431c      	orrs	r4, r3
10003d54:	70ac      	strb	r4, [r5, #2]
	return bp;
10003d56:	e7eb      	b.n	10003d30 <encode_uint+0x72>

10003d58 <outs>:
{
10003d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10003d5a:	0007      	movs	r7, r0
10003d5c:	0015      	movs	r5, r2
10003d5e:	001e      	movs	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10003d60:	0014      	movs	r4, r2
{
10003d62:	9101      	str	r1, [sp, #4]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10003d64:	42a6      	cmp	r6, r4
10003d66:	d806      	bhi.n	10003d76 <outs+0x1e>
10003d68:	2e00      	cmp	r6, #0
10003d6a:	d001      	beq.n	10003d70 <outs+0x18>
	return (int)count;
10003d6c:	1b60      	subs	r0, r4, r5
10003d6e:	e008      	b.n	10003d82 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
10003d70:	7823      	ldrb	r3, [r4, #0]
10003d72:	2b00      	cmp	r3, #0
10003d74:	d0fa      	beq.n	10003d6c <outs+0x14>
		int rc = out((int)*sp++, ctx);
10003d76:	7820      	ldrb	r0, [r4, #0]
10003d78:	9901      	ldr	r1, [sp, #4]
10003d7a:	47b8      	blx	r7
		if (rc < 0) {
10003d7c:	3401      	adds	r4, #1
10003d7e:	2800      	cmp	r0, #0
10003d80:	daf0      	bge.n	10003d64 <outs+0xc>
}
10003d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10003d84 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_TAINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
10003d84:	4770      	bx	lr

10003d86 <dummy_timestamp>:
}
10003d86:	2000      	movs	r0, #0
10003d88:	4770      	bx	lr

10003d8a <default_lf_get_timestamp>:
{
10003d8a:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
10003d8c:	f000 fd0a 	bl	100047a4 <z_impl_k_uptime_ticks>
10003d90:	220a      	movs	r2, #10
10003d92:	2300      	movs	r3, #0
10003d94:	f7fc faf6 	bl	10000384 <__aeabi_uldivmod>
}
10003d98:	bd10      	pop	{r4, pc}

10003d9a <atomic_inc>:
__syscall atomic_val_t atomic_add(atomic_t *target, atomic_val_t value);

__syscall atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value);

static inline atomic_val_t atomic_inc(atomic_t *target)
{
10003d9a:	b510      	push	{r4, lr}
	return z_impl_atomic_add(target, value);
10003d9c:	2101      	movs	r1, #1
10003d9e:	f000 fd1e 	bl	100047de <z_impl_atomic_add>
	return atomic_add(target, 1);

}
10003da2:	bd10      	pop	{r4, pc}

10003da4 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
10003da4:	2100      	movs	r1, #0
{
10003da6:	b510      	push	{r4, lr}
		(void)z_log_init(false, false);
10003da8:	0008      	movs	r0, r1
10003daa:	f7fd fa53 	bl	10001254 <z_log_init.isra.0>
	}

	return 0;
}
10003dae:	2000      	movs	r0, #0
10003db0:	bd10      	pop	{r4, pc}

10003db2 <z_log_vprintk>:
{
10003db2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
10003db4:	9002      	str	r0, [sp, #8]
10003db6:	2000      	movs	r0, #0
10003db8:	9103      	str	r1, [sp, #12]
10003dba:	0003      	movs	r3, r0
10003dbc:	0002      	movs	r2, r0
10003dbe:	0001      	movs	r1, r0
10003dc0:	9001      	str	r0, [sp, #4]
10003dc2:	9000      	str	r0, [sp, #0]
10003dc4:	f7fd fb48 	bl	10001458 <z_impl_z_log_msg_runtime_vcreate>
}
10003dc8:	b005      	add	sp, #20
10003dca:	bd00      	pop	{pc}

10003dcc <z_log_notify_backend_enabled>:
}
10003dcc:	4770      	bx	lr

10003dce <z_log_get_tag>:
}
10003dce:	2000      	movs	r0, #0
10003dd0:	4770      	bx	lr

10003dd2 <z_log_msg_finalize>:
{
10003dd2:	b570      	push	{r4, r5, r6, lr}
10003dd4:	000e      	movs	r6, r1
10003dd6:	0004      	movs	r4, r0
10003dd8:	0015      	movs	r5, r2
10003dda:	0019      	movs	r1, r3
	if (!msg) {
10003ddc:	2800      	cmp	r0, #0
10003dde:	d102      	bne.n	10003de6 <z_log_msg_finalize+0x14>
		z_log_dropped(false);
10003de0:	f7fd faec 	bl	100013bc <z_log_dropped>
}
10003de4:	bd70      	pop	{r4, r5, r6, pc}
	if (data) {
10003de6:	2b00      	cmp	r3, #0
10003de8:	d006      	beq.n	10003df8 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
10003dea:	032b      	lsls	r3, r5, #12
10003dec:	0d5b      	lsrs	r3, r3, #21
10003dee:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
10003df0:	0d12      	lsrs	r2, r2, #20
		uint8_t *d = msg->data + desc.package_len;
10003df2:	18c0      	adds	r0, r0, r3
		memcpy(d, data, desc.data_len);
10003df4:	f000 f884 	bl	10003f00 <memcpy>
	z_log_msg_commit(msg);
10003df8:	0020      	movs	r0, r4
	msg->hdr.desc = desc;
10003dfa:	6025      	str	r5, [r4, #0]
	msg->hdr.source = source;
10003dfc:	6066      	str	r6, [r4, #4]
	z_log_msg_commit(msg);
10003dfe:	f7fd faed 	bl	100013dc <z_log_msg_commit>
10003e02:	e7ef      	b.n	10003de4 <z_log_msg_finalize+0x12>

10003e04 <out_func>:
{
10003e04:	b513      	push	{r0, r1, r4, lr}
		char x = (char)c;
10003e06:	466b      	mov	r3, sp
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
10003e08:	684a      	ldr	r2, [r1, #4]
		char x = (char)c;
10003e0a:	71d8      	strb	r0, [r3, #7]
10003e0c:	3307      	adds	r3, #7
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
10003e0e:	680c      	ldr	r4, [r1, #0]
10003e10:	0018      	movs	r0, r3
10003e12:	2101      	movs	r1, #1
10003e14:	6852      	ldr	r2, [r2, #4]
10003e16:	47a0      	blx	r4
}
10003e18:	2000      	movs	r0, #0
10003e1a:	bd16      	pop	{r1, r2, r4, pc}

10003e1c <cr_out_func>:
{
10003e1c:	b570      	push	{r4, r5, r6, lr}
10003e1e:	0004      	movs	r4, r0
10003e20:	000d      	movs	r5, r1
	if (c == '\n') {
10003e22:	280a      	cmp	r0, #10
10003e24:	d102      	bne.n	10003e2c <cr_out_func+0x10>
		out_func((int)'\r', ctx);
10003e26:	200d      	movs	r0, #13
10003e28:	f7ff ffec 	bl	10003e04 <out_func>
	out_func(c, ctx);
10003e2c:	0029      	movs	r1, r5
10003e2e:	0020      	movs	r0, r4
10003e30:	f7ff ffe8 	bl	10003e04 <out_func>
}
10003e34:	2000      	movs	r0, #0
10003e36:	bd70      	pop	{r4, r5, r6, pc}

10003e38 <buffer_write>:
{
10003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10003e3a:	0006      	movs	r6, r0
10003e3c:	000d      	movs	r5, r1
10003e3e:	0014      	movs	r4, r2
10003e40:	001f      	movs	r7, r3
		processed = outf(buf, len, ctx);
10003e42:	0021      	movs	r1, r4
10003e44:	0028      	movs	r0, r5
10003e46:	003a      	movs	r2, r7
10003e48:	47b0      	blx	r6
		len -= processed;
10003e4a:	1a24      	subs	r4, r4, r0
		buf += processed;
10003e4c:	182d      	adds	r5, r5, r0
	} while (len != 0);
10003e4e:	2c00      	cmp	r4, #0
10003e50:	d1f7      	bne.n	10003e42 <buffer_write+0xa>
}
10003e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10003e54 <cbvprintf>:
{
10003e54:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
10003e56:	2400      	movs	r4, #0
10003e58:	9400      	str	r4, [sp, #0]
10003e5a:	f7fc fe67 	bl	10000b2c <z_cbvprintf_impl>
}
10003e5e:	bd16      	pop	{r1, r2, r4, pc}

10003e60 <log_output_flush>:
{
10003e60:	b510      	push	{r4, lr}
		     output->control_block->offset,
10003e62:	6842      	ldr	r2, [r0, #4]
{
10003e64:	0004      	movs	r4, r0
	buffer_write(output->func, output->buf,
10003e66:	ca0c      	ldmia	r2, {r2, r3}
10003e68:	6881      	ldr	r1, [r0, #8]
10003e6a:	6800      	ldr	r0, [r0, #0]
10003e6c:	f7ff ffe4 	bl	10003e38 <buffer_write>
	output->control_block->offset = 0;
10003e70:	2200      	movs	r2, #0
10003e72:	6863      	ldr	r3, [r4, #4]
10003e74:	601a      	str	r2, [r3, #0]
}
10003e76:	bd10      	pop	{r4, pc}

10003e78 <log_backend_uart_init>:
}
10003e78:	4770      	bx	lr

10003e7a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10003e7a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10003e7c:	ab0b      	add	r3, sp, #44	; 0x2c
10003e7e:	9305      	str	r3, [sp, #20]
10003e80:	2000      	movs	r0, #0
10003e82:	9303      	str	r3, [sp, #12]
10003e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003e86:	2201      	movs	r2, #1
10003e88:	9302      	str	r3, [sp, #8]
10003e8a:	9001      	str	r0, [sp, #4]
10003e8c:	0003      	movs	r3, r0
10003e8e:	9000      	str	r0, [sp, #0]
10003e90:	f7fd fae2 	bl	10001458 <z_impl_z_log_msg_runtime_vcreate>
}
10003e94:	b007      	add	sp, #28
10003e96:	bd00      	pop	{pc}

10003e98 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
10003e98:	b510      	push	{r4, lr}
10003e9a:	0001      	movs	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
10003e9c:	6800      	ldr	r0, [r0, #0]
10003e9e:	f7fd fd21 	bl	100018e4 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
10003ea2:	bd10      	pop	{r4, pc}

10003ea4 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
10003ea4:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
10003ea6:	2100      	movs	r1, #0
10003ea8:	2001      	movs	r0, #1
10003eaa:	f7fd fd1b 	bl	100018e4 <z_arm_fatal_error>
}
10003eae:	bd10      	pop	{r4, pc}

10003eb0 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
10003eb0:	b510      	push	{r4, lr}
	handler();
10003eb2:	f7fd fd9d 	bl	100019f0 <z_SysNmiOnReset>
	z_arm_int_exit();
10003eb6:	f7fd fe47 	bl	10001b48 <z_arm_exc_exit>
}
10003eba:	bd10      	pop	{r4, pc}

10003ebc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10003ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10003ebe:	ab0b      	add	r3, sp, #44	; 0x2c
10003ec0:	9305      	str	r3, [sp, #20]
10003ec2:	2000      	movs	r0, #0
10003ec4:	9303      	str	r3, [sp, #12]
10003ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003ec8:	2201      	movs	r2, #1
10003eca:	9302      	str	r3, [sp, #8]
10003ecc:	9001      	str	r0, [sp, #4]
10003ece:	0003      	movs	r3, r0
10003ed0:	9000      	str	r0, [sp, #0]
10003ed2:	f7fd fac1 	bl	10001458 <z_impl_z_log_msg_runtime_vcreate>
}
10003ed6:	b007      	add	sp, #28
10003ed8:	bd00      	pop	{pc}

10003eda <z_arm_fault_init>:
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
10003eda:	4770      	bx	lr

10003edc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
10003edc:	0003      	movs	r3, r0
	size_t n = 0;
10003ede:	2000      	movs	r0, #0

	while (*s != '\0') {
10003ee0:	5c1a      	ldrb	r2, [r3, r0]
10003ee2:	2a00      	cmp	r2, #0
10003ee4:	d100      	bne.n	10003ee8 <strlen+0xc>
		s++;
		n++;
	}

	return n;
}
10003ee6:	4770      	bx	lr
		n++;
10003ee8:	3001      	adds	r0, #1
10003eea:	e7f9      	b.n	10003ee0 <strlen+0x4>

10003eec <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
10003eec:	0003      	movs	r3, r0
	size_t n = 0;
10003eee:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
10003ef0:	5c1a      	ldrb	r2, [r3, r0]
10003ef2:	2a00      	cmp	r2, #0
10003ef4:	d001      	beq.n	10003efa <strnlen+0xe>
10003ef6:	4288      	cmp	r0, r1
10003ef8:	d100      	bne.n	10003efc <strnlen+0x10>
		s++;
		n++;
	}

	return n;
}
10003efa:	4770      	bx	lr
		n++;
10003efc:	3001      	adds	r0, #1
10003efe:	e7f7      	b.n	10003ef0 <strnlen+0x4>

10003f00 <memcpy>:
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
10003f00:	2300      	movs	r3, #0
{
10003f02:	b510      	push	{r4, lr}
	while (n > 0) {
10003f04:	429a      	cmp	r2, r3
10003f06:	d100      	bne.n	10003f0a <memcpy+0xa>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
10003f08:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
10003f0a:	5ccc      	ldrb	r4, [r1, r3]
10003f0c:	54c4      	strb	r4, [r0, r3]
		n--;
10003f0e:	3301      	adds	r3, #1
10003f10:	e7f8      	b.n	10003f04 <memcpy+0x4>

10003f12 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
10003f12:	0003      	movs	r3, r0
10003f14:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
10003f16:	1882      	adds	r2, r0, r2
10003f18:	4293      	cmp	r3, r2
10003f1a:	d100      	bne.n	10003f1e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
10003f1c:	4770      	bx	lr
		*(d_byte++) = c_byte;
10003f1e:	7019      	strb	r1, [r3, #0]
		n--;
10003f20:	3301      	adds	r3, #1
10003f22:	e7f9      	b.n	10003f18 <memset+0x6>

10003f24 <_stdout_hook_default>:
	return EOF;
10003f24:	2001      	movs	r0, #1
}
10003f26:	4240      	negs	r0, r0
10003f28:	4770      	bx	lr

10003f2a <adc_rpi_configure_func_0>:
			      &adc_rpi_data_##idx,				   \
			      &adc_rpi_config_##idx, POST_KERNEL,		   \
			      CONFIG_ADC_INIT_PRIORITY,				   \
			      &adc_rpi_api_##idx)

DT_INST_FOREACH_STATUS_OKAY(ADC_RPI_INIT);
10003f2a:	b510      	push	{r4, lr}
10003f2c:	2200      	movs	r2, #0
10003f2e:	2103      	movs	r1, #3
10003f30:	2016      	movs	r0, #22
10003f32:	f7fd fd33 	bl	1000199c <z_arm_irq_priority_set>
10003f36:	2016      	movs	r0, #22
10003f38:	f7fd fd24 	bl	10001984 <arch_irq_enable>
10003f3c:	bd10      	pop	{r4, pc}

10003f3e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10003f3e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10003f40:	ab0b      	add	r3, sp, #44	; 0x2c
10003f42:	9305      	str	r3, [sp, #20]
10003f44:	2000      	movs	r0, #0
10003f46:	9303      	str	r3, [sp, #12]
10003f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10003f4a:	2201      	movs	r2, #1
10003f4c:	9302      	str	r3, [sp, #8]
10003f4e:	9001      	str	r0, [sp, #4]
10003f50:	0003      	movs	r3, r0
10003f52:	9000      	str	r0, [sp, #0]
10003f54:	f7fd fa80 	bl	10001458 <z_impl_z_log_msg_runtime_vcreate>
}
10003f58:	b007      	add	sp, #28
10003f5a:	bd00      	pop	{pc}

10003f5c <adc_context_on_timer_expired>:
{
10003f5c:	b510      	push	{r4, lr}
10003f5e:	0004      	movs	r4, r0
	if (atomic_inc(&ctx->sampling_requested) == 0) {
10003f60:	3c08      	subs	r4, #8
10003f62:	2101      	movs	r1, #1
10003f64:	0020      	movs	r0, r4
10003f66:	f000 fc3a 	bl	100047de <z_impl_atomic_add>
10003f6a:	2800      	cmp	r0, #0
10003f6c:	d103      	bne.n	10003f76 <adc_context_on_timer_expired+0x1a>
		adc_context_start_sampling(ctx);
10003f6e:	0020      	movs	r0, r4
10003f70:	f7fd ff66 	bl	10001e40 <adc_context_start_sampling>
}
10003f74:	bd10      	pop	{r4, pc}
		ctx->status = -EBUSY;
10003f76:	2310      	movs	r3, #16
10003f78:	425b      	negs	r3, r3
10003f7a:	6723      	str	r3, [r4, #112]	; 0x70
}
10003f7c:	e7fa      	b.n	10003f74 <adc_context_on_timer_expired+0x18>

10003f7e <adc_rpi_read>:
{
10003f7e:	b510      	push	{r4, lr}
	return adc_rpi_read_async(dev, sequence, NULL);
10003f80:	2200      	movs	r2, #0
10003f82:	f7fd ff8b 	bl	10001e9c <adc_rpi_read_async>
}
10003f86:	bd10      	pop	{r4, pc}

10003f88 <adc_context_complete.part.0>:
static inline void adc_context_complete(struct adc_context *ctx, int status)
10003f88:	b510      	push	{r4, lr}
10003f8a:	0004      	movs	r4, r0
		if (ctx->signal) {
10003f8c:	6f40      	ldr	r0, [r0, #116]	; 0x74
10003f8e:	2800      	cmp	r0, #0
10003f90:	d001      	beq.n	10003f96 <adc_context_complete.part.0+0xe>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
10003f92:	f7ff fcc7 	bl	10003924 <z_impl_k_poll_signal_raise>
		k_sem_give(&ctx->lock);
10003f96:	0020      	movs	r0, r4
10003f98:	3040      	adds	r0, #64	; 0x40
	z_impl_k_sem_give(sem);
10003f9a:	f7fe ff09 	bl	10002db0 <z_impl_k_sem_give>
}
10003f9e:	bd10      	pop	{r4, pc}

10003fa0 <gpio_rpi_port_get_raw>:
 *  \ingroup hardware_gpio
 *
 * \return Bitmask of raw GPIO values, as bits 0-29
 */
static inline uint32_t gpio_get_all(void) {
    return sio_hw->gpio_in;
10003fa0:	23d0      	movs	r3, #208	; 0xd0
10003fa2:	061b      	lsls	r3, r3, #24
10003fa4:	685b      	ldr	r3, [r3, #4]
}
10003fa6:	2000      	movs	r0, #0
	*value = gpio_get_all();
10003fa8:	600b      	str	r3, [r1, #0]
}
10003faa:	4770      	bx	lr

10003fac <gpio_rpi_port_set_bits_raw>:
{
10003fac:	000a      	movs	r2, r1
10003fae:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10003fb0:	6903      	ldr	r3, [r0, #16]
	gpio_set_mask(pins & ~data->single_ended_mask);
10003fb2:	0010      	movs	r0, r2
10003fb4:	6919      	ldr	r1, [r3, #16]
10003fb6:	4388      	bics	r0, r1
10003fb8:	0001      	movs	r1, r0
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO values to set, as bits 0-29
 */
static inline void gpio_set_mask(uint32_t mask) {
    sio_hw->gpio_set = mask;
10003fba:	20d0      	movs	r0, #208	; 0xd0
10003fbc:	0600      	lsls	r0, r0, #24
10003fbe:	6141      	str	r1, [r0, #20]
	gpio_set_dir_in_masked(pins & data->single_ended_mask & data->open_drain_mask);
10003fc0:	691c      	ldr	r4, [r3, #16]
10003fc2:	6959      	ldr	r1, [r3, #20]
10003fc4:	4021      	ands	r1, r4
10003fc6:	4011      	ands	r1, r2
 *  \ingroup hardware_gpio
 *
 * \param mask Bitmask of GPIO to set to input, as bits 0-29
 */
static inline void gpio_set_dir_in_masked(uint32_t mask) {
    sio_hw->gpio_oe_clr = mask;
10003fc8:	6281      	str	r1, [r0, #40]	; 0x28
	gpio_set_dir_out_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10003fca:	6919      	ldr	r1, [r3, #16]
10003fcc:	695b      	ldr	r3, [r3, #20]
10003fce:	4011      	ands	r1, r2
10003fd0:	4399      	bics	r1, r3
    sio_hw->gpio_oe_set = mask;
10003fd2:	6241      	str	r1, [r0, #36]	; 0x24
}
10003fd4:	2000      	movs	r0, #0
10003fd6:	bd10      	pop	{r4, pc}

10003fd8 <gpio_rpi_port_clear_bits_raw>:
{
10003fd8:	000a      	movs	r2, r1
10003fda:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = port->data;
10003fdc:	6903      	ldr	r3, [r0, #16]
	gpio_clr_mask(pins & ~data->single_ended_mask);
10003fde:	0010      	movs	r0, r2
10003fe0:	6919      	ldr	r1, [r3, #16]
10003fe2:	4388      	bics	r0, r1
10003fe4:	0001      	movs	r1, r0
    sio_hw->gpio_clr = mask;
10003fe6:	20d0      	movs	r0, #208	; 0xd0
10003fe8:	0600      	lsls	r0, r0, #24
10003fea:	6181      	str	r1, [r0, #24]
	gpio_set_dir_out_masked(pins & data->single_ended_mask & data->open_drain_mask);
10003fec:	691c      	ldr	r4, [r3, #16]
10003fee:	6959      	ldr	r1, [r3, #20]
10003ff0:	4021      	ands	r1, r4
10003ff2:	4011      	ands	r1, r2
    sio_hw->gpio_oe_set = mask;
10003ff4:	6241      	str	r1, [r0, #36]	; 0x24
	gpio_set_dir_in_masked(pins & data->single_ended_mask & ~data->open_drain_mask);
10003ff6:	6919      	ldr	r1, [r3, #16]
10003ff8:	695b      	ldr	r3, [r3, #20]
10003ffa:	4011      	ands	r1, r2
10003ffc:	4399      	bics	r1, r3
    sio_hw->gpio_oe_clr = mask;
10003ffe:	6281      	str	r1, [r0, #40]	; 0x28
}
10004000:	2000      	movs	r0, #0
10004002:	bd10      	pop	{r4, pc}

10004004 <gpio_rpi_port_toggle_bits>:
	struct gpio_rpi_data *data = port->data;
10004004:	6903      	ldr	r3, [r0, #16]
	gpio_xor_mask(pins & ~data->single_ended_mask);
10004006:	0008      	movs	r0, r1
10004008:	691a      	ldr	r2, [r3, #16]
1000400a:	4390      	bics	r0, r2
    sio_hw->gpio_togl = mask;
1000400c:	22d0      	movs	r2, #208	; 0xd0
1000400e:	0612      	lsls	r2, r2, #24
10004010:	61d0      	str	r0, [r2, #28]
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10004012:	691b      	ldr	r3, [r3, #16]
}
10004014:	2000      	movs	r0, #0
	sio_hw->gpio_oe_togl = (pins & data->single_ended_mask);
10004016:	400b      	ands	r3, r1
10004018:	62d3      	str	r3, [r2, #44]	; 0x2c
}
1000401a:	4770      	bx	lr

1000401c <gpio_rpi_manage_callback>:
{
1000401c:	b510      	push	{r4, lr}
	struct gpio_rpi_data *data = dev->data;
1000401e:	6903      	ldr	r3, [r0, #16]
	return list->head;
10004020:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
10004022:	2800      	cmp	r0, #0
10004024:	d021      	beq.n	1000406a <gpio_rpi_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004026:	4288      	cmp	r0, r1
10004028:	d11b      	bne.n	10004062 <gpio_rpi_manage_callback+0x46>
	return node->next;
1000402a:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
1000402c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
1000402e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
10004030:	42a1      	cmp	r1, r4
10004032:	d100      	bne.n	10004036 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
10004034:	6098      	str	r0, [r3, #8]
	parent->next = child;
10004036:	2000      	movs	r0, #0
10004038:	6008      	str	r0, [r1, #0]
	if (set) {
1000403a:	4282      	cmp	r2, r0
1000403c:	d006      	beq.n	1000404c <gpio_rpi_manage_callback+0x30>
	return list->head;
1000403e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
10004040:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
10004042:	689a      	ldr	r2, [r3, #8]
	list->head = node;
10004044:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
10004046:	2a00      	cmp	r2, #0
10004048:	d100      	bne.n	1000404c <gpio_rpi_manage_callback+0x30>
	list->tail = node;
1000404a:	6099      	str	r1, [r3, #8]
	return 0;
1000404c:	2000      	movs	r0, #0
	return gpio_manage_callback(&data->callbacks, callback, set);
1000404e:	e010      	b.n	10004072 <gpio_rpi_manage_callback+0x56>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004050:	4281      	cmp	r1, r0
10004052:	d106      	bne.n	10004062 <gpio_rpi_manage_callback+0x46>
	return node->next;
10004054:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
10004056:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
10004058:	6898      	ldr	r0, [r3, #8]
1000405a:	4281      	cmp	r1, r0
1000405c:	d1eb      	bne.n	10004036 <gpio_rpi_manage_callback+0x1a>
	list->tail = node;
1000405e:	609c      	str	r4, [r3, #8]
}
10004060:	e7e9      	b.n	10004036 <gpio_rpi_manage_callback+0x1a>
	return node->next;
10004062:	0004      	movs	r4, r0
10004064:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
10004066:	2800      	cmp	r0, #0
10004068:	d1f2      	bne.n	10004050 <gpio_rpi_manage_callback+0x34>
			if (!set) {
1000406a:	2a00      	cmp	r2, #0
1000406c:	d1e7      	bne.n	1000403e <gpio_rpi_manage_callback+0x22>
				return -EINVAL;
1000406e:	2016      	movs	r0, #22
10004070:	4240      	negs	r0, r0
}
10004072:	bd10      	pop	{r4, pc}

10004074 <gpio_rpi_bank_init>:

static int gpio_rpi_bank_init(const struct device *dev)
{
10004074:	b510      	push	{r4, lr}
	const struct gpio_rpi_config *config = dev->config;

	config->bank_config_func();
10004076:	6843      	ldr	r3, [r0, #4]
10004078:	685b      	ldr	r3, [r3, #4]
1000407a:	4798      	blx	r3
	return 0;
}
1000407c:	2000      	movs	r0, #0
1000407e:	bd10      	pop	{r4, pc}

10004080 <gpio_rpi_pin_interrupt_configure>:
{
10004080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10004082:	000d      	movs	r5, r1
	struct gpio_rpi_data *data = dev->data;
10004084:	6907      	ldr	r7, [r0, #16]
{
10004086:	0016      	movs	r6, r2
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004088:	210f      	movs	r1, #15
1000408a:	2200      	movs	r2, #0
1000408c:	0028      	movs	r0, r5
{
1000408e:	001c      	movs	r4, r3
	gpio_set_irq_enabled(pin, ALL_EVENTS, false);
10004090:	f7fe fbf2 	bl	10002878 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
10004094:	2201      	movs	r2, #1
10004096:	0013      	movs	r3, r2
10004098:	40ab      	lsls	r3, r5
1000409a:	9301      	str	r3, [sp, #4]
	if (mode != GPIO_INT_DISABLE) {
1000409c:	2380      	movs	r3, #128	; 0x80
1000409e:	039b      	lsls	r3, r3, #14
100040a0:	429e      	cmp	r6, r3
100040a2:	d105      	bne.n	100040b0 <gpio_rpi_pin_interrupt_configure+0x30>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100040a4:	68fb      	ldr	r3, [r7, #12]
100040a6:	9a01      	ldr	r2, [sp, #4]
100040a8:	4393      	bics	r3, r2
}
100040aa:	2000      	movs	r0, #0
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100040ac:	60fb      	str	r3, [r7, #12]
}
100040ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (trig & GPIO_INT_HIGH_1) {
100040b0:	2380      	movs	r3, #128	; 0x80
			if (trig & GPIO_INT_LOW_0) {
100040b2:	0e61      	lsrs	r1, r4, #25
			if (trig & GPIO_INT_HIGH_1) {
100040b4:	04db      	lsls	r3, r3, #19
100040b6:	4023      	ands	r3, r4
			if (trig & GPIO_INT_LOW_0) {
100040b8:	4011      	ands	r1, r2
		if (mode & GPIO_INT_EDGE) {
100040ba:	01f6      	lsls	r6, r6, #7
100040bc:	d50d      	bpl.n	100040da <gpio_rpi_pin_interrupt_configure+0x5a>
			if (trig & GPIO_INT_LOW_0) {
100040be:	0089      	lsls	r1, r1, #2
			if (trig & GPIO_INT_HIGH_1) {
100040c0:	2b00      	cmp	r3, #0
100040c2:	d001      	beq.n	100040c8 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_EDGE_RISE;
100040c4:	2308      	movs	r3, #8
				events |= GPIO_IRQ_LEVEL_HIGH;
100040c6:	4319      	orrs	r1, r3
		gpio_set_irq_enabled(pin, events, true);
100040c8:	2201      	movs	r2, #1
100040ca:	0028      	movs	r0, r5
100040cc:	f7fe fbd4 	bl	10002878 <gpio_set_irq_enabled>
	WRITE_BIT(data->int_enabled_mask, pin, mode != GPIO_INT_DISABLE);
100040d0:	68fb      	ldr	r3, [r7, #12]
100040d2:	9a01      	ldr	r2, [sp, #4]
100040d4:	431a      	orrs	r2, r3
100040d6:	0013      	movs	r3, r2
100040d8:	e7e7      	b.n	100040aa <gpio_rpi_pin_interrupt_configure+0x2a>
			if (trig & GPIO_INT_HIGH_1) {
100040da:	2b00      	cmp	r3, #0
100040dc:	d0f4      	beq.n	100040c8 <gpio_rpi_pin_interrupt_configure+0x48>
				events |= GPIO_IRQ_LEVEL_HIGH;
100040de:	2302      	movs	r3, #2
100040e0:	e7f1      	b.n	100040c6 <gpio_rpi_pin_interrupt_configure+0x46>

100040e2 <bank_0_config_func>:
				&gpio_rpi_##idx##_data,				\
				&gpio_rpi_##idx##_config,			\
				POST_KERNEL, CONFIG_GPIO_INIT_PRIORITY,		\
				&gpio_rpi_driver_api);

DT_INST_FOREACH_STATUS_OKAY(GPIO_RPI_INIT)
100040e2:	b510      	push	{r4, lr}
100040e4:	2200      	movs	r2, #0
100040e6:	2103      	movs	r1, #3
100040e8:	200d      	movs	r0, #13
100040ea:	f7fd fc57 	bl	1000199c <z_arm_irq_priority_set>
100040ee:	200d      	movs	r0, #13
100040f0:	f7fd fc48 	bl	10001984 <arch_irq_enable>
100040f4:	bd10      	pop	{r4, pc}

100040f6 <gpio_rpi_port_set_masked_raw>:
{
100040f6:	b530      	push	{r4, r5, lr}
	struct gpio_rpi_data *data = port->data;
100040f8:	6904      	ldr	r4, [r0, #16]
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
100040fa:	20d0      	movs	r0, #208	; 0xd0
100040fc:	0600      	lsls	r0, r0, #24
100040fe:	6903      	ldr	r3, [r0, #16]
	gpio_put_masked(mask & ~data->single_ended_mask, value);
10004100:	6925      	ldr	r5, [r4, #16]
10004102:	4053      	eors	r3, r2
10004104:	400b      	ands	r3, r1
10004106:	43ab      	bics	r3, r5
 * corresponding bit in "value", leaving other pins unchanged.
 * E.g. gpio_set_dir_masked(0x3, 0x2); -> set pin 0 to input, pin 1 to output,
 * simultaneously.
 */
static inline void gpio_set_dir_masked(uint32_t mask, uint32_t value) {
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
10004108:	000d      	movs	r5, r1
    sio_hw->gpio_togl = (sio_hw->gpio_out ^ value) & mask;
1000410a:	61c3      	str	r3, [r0, #28]
    sio_hw->gpio_oe_togl = (sio_hw->gpio_oe ^ value) & mask;
1000410c:	6a03      	ldr	r3, [r0, #32]
1000410e:	4053      	eors	r3, r2
10004110:	439d      	bics	r5, r3
10004112:	002b      	movs	r3, r5
10004114:	6925      	ldr	r5, [r4, #16]
10004116:	401d      	ands	r5, r3
10004118:	6963      	ldr	r3, [r4, #20]
1000411a:	402b      	ands	r3, r5
1000411c:	62c3      	str	r3, [r0, #44]	; 0x2c
1000411e:	6a03      	ldr	r3, [r0, #32]
10004120:	405a      	eors	r2, r3
10004122:	400a      	ands	r2, r1
10004124:	6921      	ldr	r1, [r4, #16]
	gpio_set_dir_masked(mask & data->single_ended_mask & ~data->open_drain_mask, value);
10004126:	6963      	ldr	r3, [r4, #20]
10004128:	4011      	ands	r1, r2
1000412a:	4399      	bics	r1, r3
1000412c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
1000412e:	2000      	movs	r0, #0
10004130:	bd30      	pop	{r4, r5, pc}

10004132 <gpio_rpi_configure>:
{
10004132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10004134:	0015      	movs	r5, r2
10004136:	000f      	movs	r7, r1
	gpio_set_pulls(pin,
10004138:	2401      	movs	r4, #1
1000413a:	0952      	lsrs	r2, r2, #5
1000413c:	0929      	lsrs	r1, r5, #4
	struct gpio_rpi_data *data = dev->data;
1000413e:	6906      	ldr	r6, [r0, #16]
	gpio_set_pulls(pin,
10004140:	4021      	ands	r1, r4
10004142:	0038      	movs	r0, r7
10004144:	4022      	ands	r2, r4
10004146:	f7fe fb4d 	bl	100027e4 <gpio_set_pulls>
	gpio_set_function(pin, GPIO_FUNC_SIO);
1000414a:	2105      	movs	r1, #5
1000414c:	0038      	movs	r0, r7
1000414e:	f7fe fb33 	bl	100027b8 <gpio_set_function>
	if (flags & GPIO_OUTPUT) {
10004152:	03ab      	lsls	r3, r5, #14
10004154:	d525      	bpl.n	100041a2 <gpio_rpi_configure+0x70>
			data->single_ended_mask |= BIT(pin);
10004156:	40bc      	lsls	r4, r7
10004158:	6932      	ldr	r2, [r6, #16]
		if (flags & GPIO_SINGLE_ENDED) {
1000415a:	07a9      	lsls	r1, r5, #30
1000415c:	d515      	bpl.n	1000418a <gpio_rpi_configure+0x58>
			data->single_ended_mask |= BIT(pin);
1000415e:	4322      	orrs	r2, r4
10004160:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10004162:	22d0      	movs	r2, #208	; 0xd0
				data->open_drain_mask |= BIT(pin);
10004164:	6971      	ldr	r1, [r6, #20]
10004166:	0612      	lsls	r2, r2, #24
			if (flags & GPIO_LINE_OPEN_DRAIN) {
10004168:	0768      	lsls	r0, r5, #29
1000416a:	d507      	bpl.n	1000417c <gpio_rpi_configure+0x4a>
				data->open_drain_mask |= BIT(pin);
1000416c:	4321      	orrs	r1, r4
1000416e:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_clr = mask;
10004170:	6194      	str	r4, [r2, #24]
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
    uint32_t mask = 1ul << gpio;
    if (out)
10004172:	036d      	lsls	r5, r5, #13
10004174:	d507      	bpl.n	10004186 <gpio_rpi_configure+0x54>
    sio_hw->gpio_oe_set = mask;
10004176:	6254      	str	r4, [r2, #36]	; 0x24
}
10004178:	2000      	movs	r0, #0
1000417a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data->open_drain_mask &= ~(BIT(pin));
1000417c:	43a1      	bics	r1, r4
1000417e:	6171      	str	r1, [r6, #20]
    sio_hw->gpio_set = mask;
10004180:	6154      	str	r4, [r2, #20]
    if (out)
10004182:	032d      	lsls	r5, r5, #12
10004184:	d4f7      	bmi.n	10004176 <gpio_rpi_configure+0x44>
    sio_hw->gpio_oe_clr = mask;
10004186:	6294      	str	r4, [r2, #40]	; 0x28
}
10004188:	e7f6      	b.n	10004178 <gpio_rpi_configure+0x46>
			data->single_ended_mask &= ~(BIT(pin));
1000418a:	43a2      	bics	r2, r4
1000418c:	6132      	str	r2, [r6, #16]
			if (flags & GPIO_OUTPUT_INIT_HIGH) {
1000418e:	22d0      	movs	r2, #208	; 0xd0
10004190:	0612      	lsls	r2, r2, #24
10004192:	0329      	lsls	r1, r5, #12
10004194:	d501      	bpl.n	1000419a <gpio_rpi_configure+0x68>
    sio_hw->gpio_set = mask;
10004196:	6154      	str	r4, [r2, #20]
}
10004198:	e7ed      	b.n	10004176 <gpio_rpi_configure+0x44>
			} else if (flags & GPIO_OUTPUT_INIT_LOW) {
1000419a:	036d      	lsls	r5, r5, #13
1000419c:	d5eb      	bpl.n	10004176 <gpio_rpi_configure+0x44>
    sio_hw->gpio_clr = mask;
1000419e:	6194      	str	r4, [r2, #24]
}
100041a0:	e7e9      	b.n	10004176 <gpio_rpi_configure+0x44>
	} else if (flags & GPIO_INPUT) {
100041a2:	03ed      	lsls	r5, r5, #15
100041a4:	d5e8      	bpl.n	10004178 <gpio_rpi_configure+0x46>
    sio_hw->gpio_oe_clr = mask;
100041a6:	22d0      	movs	r2, #208	; 0xd0
    uint32_t mask = 1ul << gpio;
100041a8:	40bc      	lsls	r4, r7
    sio_hw->gpio_oe_clr = mask;
100041aa:	0612      	lsls	r2, r2, #24
100041ac:	e7eb      	b.n	10004186 <gpio_rpi_configure+0x54>

100041ae <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
100041ae:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
100041b0:	6803      	ldr	r3, [r0, #0]
100041b2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
100041b4:	7905      	ldrb	r5, [r0, #4]
100041b6:	6804      	ldr	r4, [r0, #0]
100041b8:	00ed      	lsls	r5, r5, #3
100041ba:	1964      	adds	r4, r4, r5
100041bc:	42a3      	cmp	r3, r4
100041be:	d302      	bcc.n	100041c6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
100041c0:	2002      	movs	r0, #2
100041c2:	4240      	negs	r0, r0
}
100041c4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
100041c6:	795c      	ldrb	r4, [r3, #5]
100041c8:	428c      	cmp	r4, r1
100041ca:	d001      	beq.n	100041d0 <pinctrl_lookup_state+0x22>
		(*state)++;
100041cc:	3308      	adds	r3, #8
100041ce:	e7f0      	b.n	100041b2 <pinctrl_lookup_state+0x4>
			return 0;
100041d0:	2000      	movs	r0, #0
100041d2:	e7f7      	b.n	100041c4 <pinctrl_lookup_state+0x16>

100041d4 <pinctrl_configure_pins>:
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
}

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
100041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100041d6:	0004      	movs	r4, r0
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
100041d8:	2601      	movs	r6, #1
100041da:	008d      	lsls	r5, r1, #2
100041dc:	1945      	adds	r5, r0, r5
	ARG_UNUSED(reg);

	for (uint8_t i = 0U; i < pin_cnt; i++) {
100041de:	42ac      	cmp	r4, r5
100041e0:	d101      	bne.n	100041e6 <pinctrl_configure_pins+0x12>
		pinctrl_configure_pin(pins++);
	}

	return 0;
}
100041e2:	2000      	movs	r0, #0
100041e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	gpio_init(pin->pin_num);
100041e6:	7820      	ldrb	r0, [r4, #0]
		pinctrl_configure_pin(pins++);
100041e8:	1d27      	adds	r7, r4, #4
	gpio_init(pin->pin_num);
100041ea:	06c0      	lsls	r0, r0, #27
100041ec:	0ec0      	lsrs	r0, r0, #27
100041ee:	f000 f987 	bl	10004500 <gpio_init>
	gpio_set_function(pin->pin_num, pin->alt_func);
100041f2:	8821      	ldrh	r1, [r4, #0]
100041f4:	7820      	ldrb	r0, [r4, #0]
100041f6:	05c9      	lsls	r1, r1, #23
100041f8:	06c0      	lsls	r0, r0, #27
100041fa:	0f09      	lsrs	r1, r1, #28
100041fc:	0ec0      	lsrs	r0, r0, #27
100041fe:	f7fe fadb 	bl	100027b8 <gpio_set_function>
	gpio_set_pulls(pin->pin_num, pin->pullup, pin->pulldown);
10004202:	7861      	ldrb	r1, [r4, #1]
10004204:	7820      	ldrb	r0, [r4, #0]
10004206:	09ca      	lsrs	r2, r1, #7
10004208:	06c0      	lsls	r0, r0, #27
1000420a:	0649      	lsls	r1, r1, #25
1000420c:	0fc9      	lsrs	r1, r1, #31
1000420e:	0ec0      	lsrs	r0, r0, #27
10004210:	f7fe fae8 	bl	100027e4 <gpio_set_pulls>
	gpio_set_drive_strength(pin->pin_num, pin->drive_strength);
10004214:	7861      	ldrb	r1, [r4, #1]
10004216:	7820      	ldrb	r0, [r4, #0]
10004218:	06c9      	lsls	r1, r1, #27
1000421a:	06c0      	lsls	r0, r0, #27
1000421c:	0f09      	lsrs	r1, r1, #28
1000421e:	0ec0      	lsrs	r0, r0, #27
10004220:	f7fe fb0e 	bl	10002840 <gpio_set_drive_strength>
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004224:	7861      	ldrb	r1, [r4, #1]
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
10004226:	7820      	ldrb	r0, [r4, #0]
				GPIO_SLEW_RATE_FAST : GPIO_SLEW_RATE_SLOW));
10004228:	0949      	lsrs	r1, r1, #5
	gpio_set_slew_rate(pin->pin_num, (pin->slew_rate ?
1000422a:	06c0      	lsls	r0, r0, #27
1000422c:	4031      	ands	r1, r6
1000422e:	0ec0      	lsrs	r0, r0, #27
10004230:	f7fe faf8 	bl	10002824 <gpio_set_slew_rate>
	gpio_set_input_hysteresis_enabled(pin->pin_num, pin->schmitt_enable);
10004234:	78a1      	ldrb	r1, [r4, #2]
10004236:	7820      	ldrb	r0, [r4, #0]
10004238:	0789      	lsls	r1, r1, #30
1000423a:	06c0      	lsls	r0, r0, #27
1000423c:	0fc9      	lsrs	r1, r1, #31
1000423e:	0ec0      	lsrs	r0, r0, #27
10004240:	f7fe fae2 	bl	10002808 <gpio_set_input_hysteresis_enabled>
	gpio_set_input_enabled(pin->pin_num, pin->input_enable);
10004244:	78a1      	ldrb	r1, [r4, #2]
10004246:	7820      	ldrb	r0, [r4, #0]
10004248:	07c9      	lsls	r1, r1, #31
1000424a:	06c0      	lsls	r0, r0, #27
1000424c:	0fc9      	lsrs	r1, r1, #31
1000424e:	0ec0      	lsrs	r0, r0, #27
10004250:	f7fe fb34 	bl	100028bc <gpio_set_input_enabled>
		pinctrl_configure_pin(pins++);
10004254:	003c      	movs	r4, r7
10004256:	e7c2      	b.n	100041de <pinctrl_configure_pins+0xa>

10004258 <reset_rpi_init>:
static int reset_rpi_init(const struct device *dev)
{
	DEVICE_MMIO_MAP(dev, K_MEM_CACHE_NONE);

	return 0;
}
10004258:	2000      	movs	r0, #0
1000425a:	4770      	bx	lr

1000425c <reset_rpi_read_register.isra.0>:
	uint32_t base_address = config->base_address;
1000425c:	6883      	ldr	r3, [r0, #8]
	switch (config->reg_width) {
1000425e:	7900      	ldrb	r0, [r0, #4]
10004260:	2802      	cmp	r0, #2
10004262:	d009      	beq.n	10004278 <reset_rpi_read_register.isra.0+0x1c>
10004264:	2804      	cmp	r0, #4
10004266:	d00b      	beq.n	10004280 <reset_rpi_read_register.isra.0+0x24>
10004268:	2801      	cmp	r0, #1
1000426a:	d10c      	bne.n	10004286 <reset_rpi_read_register.isra.0+0x2a>
		*value = sys_read8(base_address + offset);
1000426c:	18c9      	adds	r1, r1, r3
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
1000426e:	780b      	ldrb	r3, [r1, #0]
10004270:	b2db      	uxtb	r3, r3
	return 0;
10004272:	2000      	movs	r0, #0
		*value = sys_read16(base_address + offset);
10004274:	6013      	str	r3, [r2, #0]
}
10004276:	4770      	bx	lr
		*value = sys_read16(base_address + offset);
10004278:	18c9      	adds	r1, r1, r3
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
1000427a:	880b      	ldrh	r3, [r1, #0]
1000427c:	b29b      	uxth	r3, r3
		break;
1000427e:	e7f8      	b.n	10004272 <reset_rpi_read_register.isra.0+0x16>
		*value = sys_read32(base_address + offset);
10004280:	18c9      	adds	r1, r1, r3
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
10004282:	680b      	ldr	r3, [r1, #0]
		break;
10004284:	e7f5      	b.n	10004272 <reset_rpi_read_register.isra.0+0x16>
	switch (config->reg_width) {
10004286:	2016      	movs	r0, #22
10004288:	4240      	negs	r0, r0
1000428a:	e7f4      	b.n	10004276 <reset_rpi_read_register.isra.0+0x1a>

1000428c <reset_rpi_update>:
{
1000428c:	0003      	movs	r3, r0
1000428e:	b5f0      	push	{r4, r5, r6, r7, lr}
10004290:	b085      	sub	sp, #20
	const struct reset_rpi_config *config = dev->config;
10004292:	685f      	ldr	r7, [r3, #4]
{
10004294:	9201      	str	r2, [sp, #4]
	offset = id / (config->reg_width * CHAR_BIT);
10004296:	793e      	ldrb	r6, [r7, #4]
{
10004298:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
1000429a:	00f1      	lsls	r1, r6, #3
1000429c:	f7fb ffd4 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
100042a0:	aa03      	add	r2, sp, #12
100042a2:	0004      	movs	r4, r0
100042a4:	000d      	movs	r5, r1
100042a6:	b281      	uxth	r1, r0
100042a8:	0038      	movs	r0, r7
100042aa:	f7ff ffd7 	bl	1000425c <reset_rpi_read_register.isra.0>
	if (ret) {
100042ae:	2800      	cmp	r0, #0
100042b0:	d117      	bne.n	100042e2 <reset_rpi_update+0x56>
		value |= BIT(regbit);
100042b2:	2201      	movs	r2, #1
100042b4:	9903      	ldr	r1, [sp, #12]
100042b6:	b2ed      	uxtb	r5, r5
100042b8:	40aa      	lsls	r2, r5
		value &= ~BIT(regbit);
100042ba:	000b      	movs	r3, r1
		value |= BIT(regbit);
100042bc:	4694      	mov	ip, r2
		value &= ~BIT(regbit);
100042be:	4393      	bics	r3, r2
	if (assert ^ config->active_low) {
100042c0:	797d      	ldrb	r5, [r7, #5]
100042c2:	9a01      	ldr	r2, [sp, #4]
100042c4:	4295      	cmp	r5, r2
100042c6:	d001      	beq.n	100042cc <reset_rpi_update+0x40>
		value |= BIT(regbit);
100042c8:	4663      	mov	r3, ip
100042ca:	430b      	orrs	r3, r1
	uint32_t base_address = config->base_address;
100042cc:	68ba      	ldr	r2, [r7, #8]
	switch (config->reg_width) {
100042ce:	2e02      	cmp	r6, #2
100042d0:	d009      	beq.n	100042e6 <reset_rpi_update+0x5a>
100042d2:	2e04      	cmp	r6, #4
100042d4:	d00c      	beq.n	100042f0 <reset_rpi_update+0x64>
100042d6:	2e01      	cmp	r6, #1
100042d8:	d10e      	bne.n	100042f8 <reset_rpi_update+0x6c>
		sys_write8(value, base_address + offset);
100042da:	b2a4      	uxth	r4, r4
100042dc:	b2db      	uxtb	r3, r3
100042de:	18a4      	adds	r4, r4, r2
	*(volatile uint8_t *)addr = data;
100042e0:	7023      	strb	r3, [r4, #0]
}
100042e2:	b005      	add	sp, #20
100042e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write16(value, base_address + offset);
100042e6:	b2a4      	uxth	r4, r4
100042e8:	b29b      	uxth	r3, r3
100042ea:	18a4      	adds	r4, r4, r2
	*(volatile uint16_t *)addr = data;
100042ec:	8023      	strh	r3, [r4, #0]
}
100042ee:	e7f8      	b.n	100042e2 <reset_rpi_update+0x56>
		sys_write32(value, base_address + offset);
100042f0:	b2a4      	uxth	r4, r4
100042f2:	18a4      	adds	r4, r4, r2
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
100042f4:	6023      	str	r3, [r4, #0]
}
100042f6:	e7f4      	b.n	100042e2 <reset_rpi_update+0x56>
	switch (config->reg_width) {
100042f8:	2016      	movs	r0, #22
100042fa:	4240      	negs	r0, r0
100042fc:	e7f1      	b.n	100042e2 <reset_rpi_update+0x56>

100042fe <reset_rpi_line_assert>:
{
100042fe:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 1);
10004300:	2201      	movs	r2, #1
10004302:	f7ff ffc3 	bl	1000428c <reset_rpi_update>
}
10004306:	bd10      	pop	{r4, pc}

10004308 <reset_rpi_line_deassert>:
{
10004308:	b510      	push	{r4, lr}
	return reset_rpi_update(dev, id, 0);
1000430a:	2200      	movs	r2, #0
1000430c:	f7ff ffbe 	bl	1000428c <reset_rpi_update>
}
10004310:	bd10      	pop	{r4, pc}

10004312 <reset_rpi_line_toggle>:
{
10004312:	b570      	push	{r4, r5, r6, lr}
10004314:	0004      	movs	r4, r0
10004316:	000d      	movs	r5, r1
	ret = reset_rpi_line_assert(dev, id);
10004318:	f7ff fff1 	bl	100042fe <reset_rpi_line_assert>
	if (ret) {
1000431c:	2800      	cmp	r0, #0
1000431e:	d103      	bne.n	10004328 <reset_rpi_line_toggle+0x16>
	return reset_rpi_line_deassert(dev, id);
10004320:	0029      	movs	r1, r5
10004322:	0020      	movs	r0, r4
10004324:	f7ff fff0 	bl	10004308 <reset_rpi_line_deassert>
}
10004328:	bd70      	pop	{r4, r5, r6, pc}

1000432a <reset_rpi_status>:
{
1000432a:	0003      	movs	r3, r0
1000432c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct reset_rpi_config *config = dev->config;
1000432e:	685e      	ldr	r6, [r3, #4]
{
10004330:	0008      	movs	r0, r1
	offset = id / (config->reg_width * CHAR_BIT);
10004332:	7931      	ldrb	r1, [r6, #4]
{
10004334:	0014      	movs	r4, r2
	offset = id / (config->reg_width * CHAR_BIT);
10004336:	00c9      	lsls	r1, r1, #3
10004338:	f7fb ff86 	bl	10000248 <__aeabi_uidivmod>
	ret = reset_rpi_read_register(dev, offset, &value);
1000433c:	aa01      	add	r2, sp, #4
1000433e:	000d      	movs	r5, r1
10004340:	b281      	uxth	r1, r0
10004342:	0030      	movs	r0, r6
10004344:	f7ff ff8a 	bl	1000425c <reset_rpi_read_register.isra.0>
	if (ret) {
10004348:	2800      	cmp	r0, #0
1000434a:	d109      	bne.n	10004360 <reset_rpi_status+0x36>
	*status = !(value & BIT(regbit)) ^ !config->active_low;
1000434c:	9b01      	ldr	r3, [sp, #4]
1000434e:	b2ed      	uxtb	r5, r5
10004350:	40eb      	lsrs	r3, r5
10004352:	2201      	movs	r2, #1
10004354:	439a      	bics	r2, r3
10004356:	7973      	ldrb	r3, [r6, #5]
10004358:	4259      	negs	r1, r3
1000435a:	414b      	adcs	r3, r1
1000435c:	4053      	eors	r3, r2
1000435e:	7023      	strb	r3, [r4, #0]
}
10004360:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

10004362 <uart_rpi_poll_in>:
{
10004362:	b510      	push	{r4, lr}
	uart_hw_t * const uart_hw = config->uart_regs;
10004364:	6843      	ldr	r3, [r0, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
10004366:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10004368:	685b      	ldr	r3, [r3, #4]
	if (uart_hw->fr & UART_UARTFR_RXFE_BITS) {
1000436a:	699c      	ldr	r4, [r3, #24]
1000436c:	0020      	movs	r0, r4
1000436e:	4010      	ands	r0, r2
10004370:	4214      	tst	r4, r2
10004372:	d102      	bne.n	1000437a <uart_rpi_poll_in+0x18>
	*c = (unsigned char)uart_hw->dr;
10004374:	681b      	ldr	r3, [r3, #0]
10004376:	700b      	strb	r3, [r1, #0]
}
10004378:	bd10      	pop	{r4, pc}
		return -1;
1000437a:	2001      	movs	r0, #1
1000437c:	4240      	negs	r0, r0
1000437e:	e7fb      	b.n	10004378 <uart_rpi_poll_in+0x16>

10004380 <uart_rpi_poll_out>:
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10004380:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
10004382:	6843      	ldr	r3, [r0, #4]
10004384:	685b      	ldr	r3, [r3, #4]
	while (uart_hw->fr & UART_UARTFR_TXFF_BITS) {
10004386:	6998      	ldr	r0, [r3, #24]
10004388:	4210      	tst	r0, r2
1000438a:	d1fc      	bne.n	10004386 <uart_rpi_poll_out+0x6>
	uart_hw->dr = c;
1000438c:	6019      	str	r1, [r3, #0]
}
1000438e:	4770      	bx	lr

10004390 <uart_rpi_err_check>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004390:	6843      	ldr	r3, [r0, #4]
10004392:	685b      	ldr	r3, [r3, #4]
	uint32_t data_reg = uart_hw->dr;
10004394:	681b      	ldr	r3, [r3, #0]
	if (data_reg & UART_UARTDR_OE_BITS) {
10004396:	0518      	lsls	r0, r3, #20
10004398:	0fc0      	lsrs	r0, r0, #31
	if (data_reg & UART_UARTDR_BE_BITS) {
1000439a:	055a      	lsls	r2, r3, #21
1000439c:	d501      	bpl.n	100043a2 <uart_rpi_err_check+0x12>
		errors |= UART_BREAK;
1000439e:	2208      	movs	r2, #8
100043a0:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_PE_BITS) {
100043a2:	059a      	lsls	r2, r3, #22
100043a4:	d501      	bpl.n	100043aa <uart_rpi_err_check+0x1a>
		errors |= UART_ERROR_PARITY;
100043a6:	2202      	movs	r2, #2
100043a8:	4310      	orrs	r0, r2
	if (data_reg & UART_UARTDR_FE_BITS) {
100043aa:	05db      	lsls	r3, r3, #23
100043ac:	d501      	bpl.n	100043b2 <uart_rpi_err_check+0x22>
		errors |= UART_ERROR_FRAMING;
100043ae:	2304      	movs	r3, #4
100043b0:	4318      	orrs	r0, r3
}
100043b2:	4770      	bx	lr

100043b4 <uart_rpi_fifo_fill>:
{
100043b4:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100043b6:	2520      	movs	r5, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100043b8:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100043ba:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100043bc:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_TXFF_BITS) && (len - tx_len) > 0) {
100043be:	699c      	ldr	r4, [r3, #24]
100043c0:	422c      	tst	r4, r5
100043c2:	d102      	bne.n	100043ca <uart_rpi_fifo_fill+0x16>
100043c4:	1a14      	subs	r4, r2, r0
100043c6:	2c00      	cmp	r4, #0
100043c8:	dc00      	bgt.n	100043cc <uart_rpi_fifo_fill+0x18>
}
100043ca:	bd30      	pop	{r4, r5, pc}
		uart_hw->dr = tx_data[tx_len++];
100043cc:	5c0c      	ldrb	r4, [r1, r0]
100043ce:	3001      	adds	r0, #1
100043d0:	601c      	str	r4, [r3, #0]
100043d2:	e7f4      	b.n	100043be <uart_rpi_fifo_fill+0xa>

100043d4 <uart_rpi_fifo_read>:
{
100043d4:	b530      	push	{r4, r5, lr}
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100043d6:	2510      	movs	r5, #16
	uart_hw_t * const uart_hw = config->uart_regs;
100043d8:	6843      	ldr	r3, [r0, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100043da:	2000      	movs	r0, #0
	uart_hw_t * const uart_hw = config->uart_regs;
100043dc:	685b      	ldr	r3, [r3, #4]
	while (!(uart_hw->fr & UART_UARTFR_RXFE_BITS) && (len - rx_len) > 0) {
100043de:	699c      	ldr	r4, [r3, #24]
100043e0:	422c      	tst	r4, r5
100043e2:	d102      	bne.n	100043ea <uart_rpi_fifo_read+0x16>
100043e4:	1a14      	subs	r4, r2, r0
100043e6:	2c00      	cmp	r4, #0
100043e8:	dc00      	bgt.n	100043ec <uart_rpi_fifo_read+0x18>
}
100043ea:	bd30      	pop	{r4, r5, pc}
		rx_data[rx_len++] = (uint8_t)uart_hw->dr;
100043ec:	681c      	ldr	r4, [r3, #0]
100043ee:	540c      	strb	r4, [r1, r0]
100043f0:	3001      	adds	r0, #1
100043f2:	e7f4      	b.n	100043de <uart_rpi_fifo_read+0xa>

100043f4 <uart_rpi_irq_tx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100043f4:	2220      	movs	r2, #32
	uart_hw_t * const uart_hw = config->uart_regs;
100043f6:	6843      	ldr	r3, [r0, #4]
100043f8:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
100043fa:	6b99      	ldr	r1, [r3, #56]	; 0x38
100043fc:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
100043fe:	2107      	movs	r1, #7
	uart_hw->imsc |= UART_UARTIMSC_TXIM_BITS;
10004400:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_TXIFLSEL_BITS;
10004402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10004404:	438a      	bics	r2, r1
10004406:	635a      	str	r2, [r3, #52]	; 0x34
}
10004408:	4770      	bx	lr

1000440a <uart_rpi_irq_tx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
1000440a:	2120      	movs	r1, #32
	uart_hw_t * const uart_hw = config->uart_regs;
1000440c:	6843      	ldr	r3, [r0, #4]
1000440e:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_TXIM_BITS;
10004410:	6b93      	ldr	r3, [r2, #56]	; 0x38
10004412:	438b      	bics	r3, r1
10004414:	6393      	str	r3, [r2, #56]	; 0x38
}
10004416:	4770      	bx	lr

10004418 <uart_rpi_irq_tx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004418:	6843      	ldr	r3, [r0, #4]
1000441a:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_TXMIS_BITS) == UART_UARTMIS_TXMIS_BITS;
1000441c:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000441e:	0680      	lsls	r0, r0, #26
10004420:	0fc0      	lsrs	r0, r0, #31
}
10004422:	4770      	bx	lr

10004424 <uart_rpi_irq_rx_enable>:
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004424:	2210      	movs	r2, #16
	uart_hw_t * const uart_hw = config->uart_regs;
10004426:	6843      	ldr	r3, [r0, #4]
10004428:	685b      	ldr	r3, [r3, #4]
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
1000442a:	6b99      	ldr	r1, [r3, #56]	; 0x38
1000442c:	430a      	orrs	r2, r1
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
1000442e:	2138      	movs	r1, #56	; 0x38
	uart_hw->imsc |= UART_UARTIMSC_RXIM_BITS;
10004430:	639a      	str	r2, [r3, #56]	; 0x38
	uart_hw->ifls &= ~UART_UARTIFLS_RXIFLSEL_BITS;
10004432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10004434:	438a      	bics	r2, r1
10004436:	635a      	str	r2, [r3, #52]	; 0x34
}
10004438:	4770      	bx	lr

1000443a <uart_rpi_irq_rx_disable>:
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
1000443a:	2110      	movs	r1, #16
	uart_hw_t * const uart_hw = config->uart_regs;
1000443c:	6843      	ldr	r3, [r0, #4]
1000443e:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc &= ~UART_UARTIMSC_RXIM_BITS;
10004440:	6b93      	ldr	r3, [r2, #56]	; 0x38
10004442:	438b      	bics	r3, r1
10004444:	6393      	str	r3, [r2, #56]	; 0x38
}
10004446:	4770      	bx	lr

10004448 <uart_rpi_irq_tx_complete>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004448:	6843      	ldr	r3, [r0, #4]
1000444a:	685b      	ldr	r3, [r3, #4]
	return !!(uart_hw->fr & UART_UARTFR_TXFE_BITS);
1000444c:	6998      	ldr	r0, [r3, #24]
1000444e:	0600      	lsls	r0, r0, #24
10004450:	0fc0      	lsrs	r0, r0, #31
}
10004452:	4770      	bx	lr

10004454 <uart_rpi_irq_rx_ready>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004454:	6843      	ldr	r3, [r0, #4]
10004456:	685b      	ldr	r3, [r3, #4]
	return (uart_hw->mis & UART_UARTMIS_RXMIS_BITS) == UART_UARTMIS_RXMIS_BITS;
10004458:	6c18      	ldr	r0, [r3, #64]	; 0x40
1000445a:	06c0      	lsls	r0, r0, #27
1000445c:	0fc0      	lsrs	r0, r0, #31
}
1000445e:	4770      	bx	lr

10004460 <uart_rpi_irq_err_enable>:
	uart_hw_t * const uart_hw = config->uart_regs;
10004460:	6843      	ldr	r3, [r0, #4]
10004462:	685a      	ldr	r2, [r3, #4]
	uart_hw->imsc |= (UART_UARTIMSC_OEIM_BITS |
10004464:	23f8      	movs	r3, #248	; 0xf8
10004466:	6b91      	ldr	r1, [r2, #56]	; 0x38
10004468:	00db      	lsls	r3, r3, #3
1000446a:	430b      	orrs	r3, r1
1000446c:	6393      	str	r3, [r2, #56]	; 0x38
}
1000446e:	4770      	bx	lr

10004470 <uart_rpi_irq_is_pending>:

static int uart_rpi_irq_is_pending(const struct device *dev)
{
10004470:	b510      	push	{r4, lr}
10004472:	0004      	movs	r4, r0
	return !!(uart_rpi_irq_rx_ready(dev) || uart_rpi_irq_tx_ready(dev));
10004474:	f7ff ffee 	bl	10004454 <uart_rpi_irq_rx_ready>
10004478:	0003      	movs	r3, r0
1000447a:	2001      	movs	r0, #1
1000447c:	2b00      	cmp	r3, #0
1000447e:	d104      	bne.n	1000448a <uart_rpi_irq_is_pending+0x1a>
10004480:	0020      	movs	r0, r4
10004482:	f7ff ffc9 	bl	10004418 <uart_rpi_irq_tx_ready>
10004486:	1e43      	subs	r3, r0, #1
10004488:	4198      	sbcs	r0, r3
}
1000448a:	bd10      	pop	{r4, pc}

1000448c <uart_rpi_irq_update>:

static int uart_rpi_irq_update(const struct device *dev)
{
	return 1;
}
1000448c:	2001      	movs	r0, #1
1000448e:	4770      	bx	lr

10004490 <uart_rpi_irq_callback_set>:

static void uart_rpi_irq_callback_set(const struct device *dev,
				      uart_irq_callback_user_data_t cb,
				      void *cb_data)
{
	struct uart_rpi_data * const data = dev->data;
10004490:	6903      	ldr	r3, [r0, #16]

	data->irq_cb = cb;
10004492:	6099      	str	r1, [r3, #8]
	data->irq_cb_data = cb_data;
10004494:	60da      	str	r2, [r3, #12]
}
10004496:	4770      	bx	lr

10004498 <uart_rpi_isr>:

static void uart_rpi_isr(const struct device *dev)
{
10004498:	b510      	push	{r4, lr}
	struct uart_rpi_data * const data = dev->data;
1000449a:	6902      	ldr	r2, [r0, #16]

	if (data->irq_cb) {
1000449c:	6893      	ldr	r3, [r2, #8]
1000449e:	2b00      	cmp	r3, #0
100044a0:	d001      	beq.n	100044a6 <uart_rpi_isr+0xe>
		data->irq_cb(dev, data->irq_cb_data);
100044a2:	68d1      	ldr	r1, [r2, #12]
100044a4:	4798      	blx	r3
	}
}
100044a6:	bd10      	pop	{r4, pc}

100044a8 <uart_rpi_config_get>:
{
100044a8:	0003      	movs	r3, r0
100044aa:	b510      	push	{r4, lr}
100044ac:	0008      	movs	r0, r1
	memcpy(cfg, &data->uart_config, sizeof(struct uart_config));
100044ae:	2208      	movs	r2, #8
100044b0:	6919      	ldr	r1, [r3, #16]
100044b2:	f7ff fd25 	bl	10003f00 <memcpy>
}
100044b6:	2000      	movs	r0, #0
100044b8:	bd10      	pop	{r4, pc}

100044ba <uart0_rpi_irq_config_func>:
			    NULL, &uart##idx##_rpi_data,			\
			    &uart##idx##_rpi_config, PRE_KERNEL_1,		\
			    CONFIG_SERIAL_INIT_PRIORITY,			\
			    &uart_rpi_driver_api);				\

DT_INST_FOREACH_STATUS_OKAY(RPI_UART_INIT)
100044ba:	b510      	push	{r4, lr}
100044bc:	2200      	movs	r2, #0
100044be:	2103      	movs	r1, #3
100044c0:	2014      	movs	r0, #20
100044c2:	f7fd fa6b 	bl	1000199c <z_arm_irq_priority_set>
100044c6:	2014      	movs	r0, #20
100044c8:	f7fd fa5c 	bl	10001984 <arch_irq_enable>
100044cc:	bd10      	pop	{r4, pc}

100044ce <uart_rpi_configure>:
{
100044ce:	b570      	push	{r4, r5, r6, lr}
	uart_inst_t * const uart_inst = config->uart_dev;
100044d0:	6843      	ldr	r3, [r0, #4]
{
100044d2:	0006      	movs	r6, r0
100044d4:	000c      	movs	r4, r1
	struct uart_rpi_data *data = dev->data;
100044d6:	6905      	ldr	r5, [r0, #16]
	baudrate = uart_set_baudrate(uart_inst, cfg->baudrate);
100044d8:	6809      	ldr	r1, [r1, #0]
100044da:	6818      	ldr	r0, [r3, #0]
100044dc:	f7fe f9fc 	bl	100028d8 <uart_set_baudrate>
	if (baudrate == 0) {
100044e0:	2800      	cmp	r0, #0
100044e2:	d102      	bne.n	100044ea <uart_rpi_configure+0x1c>
		return -EINVAL;
100044e4:	2016      	movs	r0, #22
100044e6:	4240      	negs	r0, r0
}
100044e8:	bd70      	pop	{r4, r5, r6, pc}
	if (uart_rpi_set_format(dev, cfg) != 0) {
100044ea:	79a3      	ldrb	r3, [r4, #6]
100044ec:	7962      	ldrb	r2, [r4, #5]
100044ee:	7921      	ldrb	r1, [r4, #4]
100044f0:	6870      	ldr	r0, [r6, #4]
100044f2:	f7fd fea5 	bl	10002240 <uart_rpi_set_format.isra.0>
100044f6:	2800      	cmp	r0, #0
100044f8:	d1f4      	bne.n	100044e4 <uart_rpi_configure+0x16>
	data->uart_config = *cfg;
100044fa:	cc06      	ldmia	r4!, {r1, r2}
100044fc:	c506      	stmia	r5!, {r1, r2}
	return 0;
100044fe:	e7f3      	b.n	100044e8 <uart_rpi_configure+0x1a>

10004500 <gpio_init>:

void gpio_init(uint gpio) {
    sio_hw->gpio_oe_clr = 1ul << gpio;
10004500:	2301      	movs	r3, #1
10004502:	22d0      	movs	r2, #208	; 0xd0
10004504:	4083      	lsls	r3, r0
void gpio_init(uint gpio) {
10004506:	b510      	push	{r4, lr}
    sio_hw->gpio_oe_clr = 1ul << gpio;
10004508:	0612      	lsls	r2, r2, #24
1000450a:	6293      	str	r3, [r2, #40]	; 0x28
    sio_hw->gpio_clr = 1ul << gpio;
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000450c:	2105      	movs	r1, #5
    sio_hw->gpio_clr = 1ul << gpio;
1000450e:	6193      	str	r3, [r2, #24]
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10004510:	f7fe f952 	bl	100027b8 <gpio_set_function>
}
10004514:	bd10      	pop	{r4, pc}

10004516 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
10004516:	4770      	bx	lr

10004518 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
10004518:	2800      	cmp	r0, #0
1000451a:	d009      	beq.n	10004530 <z_device_is_ready+0x18>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
1000451c:	2301      	movs	r3, #1
1000451e:	68c2      	ldr	r2, [r0, #12]
10004520:	2000      	movs	r0, #0
10004522:	7851      	ldrb	r1, [r2, #1]
10004524:	4219      	tst	r1, r3
10004526:	d002      	beq.n	1000452e <z_device_is_ready+0x16>
10004528:	7810      	ldrb	r0, [r2, #0]
1000452a:	4242      	negs	r2, r0
1000452c:	4150      	adcs	r0, r2
1000452e:	4018      	ands	r0, r3
}
10004530:	4770      	bx	lr

10004532 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
10004532:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
10004534:	ab0b      	add	r3, sp, #44	; 0x2c
10004536:	9305      	str	r3, [sp, #20]
10004538:	2000      	movs	r0, #0
1000453a:	9303      	str	r3, [sp, #12]
1000453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000453e:	2201      	movs	r2, #1
10004540:	9302      	str	r3, [sp, #8]
10004542:	9001      	str	r0, [sp, #4]
10004544:	0003      	movs	r3, r0
10004546:	9000      	str	r0, [sp, #0]
10004548:	f7fc ff86 	bl	10001458 <z_impl_z_log_msg_runtime_vcreate>
}
1000454c:	b007      	add	sp, #28
1000454e:	bd00      	pop	{pc}

10004550 <arch_system_halt>:
	__asm__ volatile("mrs %0, PRIMASK;"
10004550:	f3ef 8310 	mrs	r3, PRIMASK
10004554:	b672      	cpsid	i
	for (;;) {
10004556:	e7fe      	b.n	10004556 <arch_system_halt+0x6>

10004558 <z_early_memset>:
{
10004558:	b510      	push	{r4, lr}
	(void) memset(dst, c, n);
1000455a:	f7ff fcda 	bl	10003f12 <memset>
}
1000455e:	bd10      	pop	{r4, pc}

10004560 <z_early_memcpy>:
{
10004560:	b510      	push	{r4, lr}
	(void) memcpy(dst, src, n);
10004562:	f7ff fccd 	bl	10003f00 <memcpy>
}
10004566:	bd10      	pop	{r4, pc}

10004568 <k_is_in_isr>:
10004568:	f3ef 8005 	mrs	r0, IPSR
	return (__get_IPSR()) ? (true) : (false);
1000456c:	1e43      	subs	r3, r0, #1
1000456e:	4198      	sbcs	r0, r3
	return arch_is_in_isr();
10004570:	b2c0      	uxtb	r0, r0
}
10004572:	4770      	bx	lr

10004574 <z_impl_k_thread_name_set>:
	return -ENOSYS;
10004574:	2058      	movs	r0, #88	; 0x58
}
10004576:	4240      	negs	r0, r0
10004578:	4770      	bx	lr

1000457a <k_thread_name_get>:
}
1000457a:	2000      	movs	r0, #0
1000457c:	4770      	bx	lr

1000457e <z_impl_k_thread_start>:
{
1000457e:	b510      	push	{r4, lr}
	z_sched_start(thread);
10004580:	f7fe fdee 	bl	10003160 <z_sched_start>
}
10004584:	bd10      	pop	{r4, pc}

10004586 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
10004586:	b510      	push	{r4, lr}
10004588:	f3ef 8310 	mrs	r3, PRIMASK
1000458c:	b672      	cpsid	i
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
1000458e:	f7fd f9a1 	bl	100018d4 <arch_cpu_idle>
10004592:	e7f9      	b.n	10004588 <idle+0x2>

10004594 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
10004594:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10004596:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10004598:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000459a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000459c:	2300      	movs	r3, #0
1000459e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
100045a0:	6043      	str	r3, [r0, #4]
}
100045a2:	4770      	bx	lr

100045a4 <unpend_thread_no_timeout>:
{
100045a4:	b510      	push	{r4, lr}
100045a6:	0004      	movs	r4, r0
	sys_dlist_remove(&thread->base.qnode_dlist);
100045a8:	f7ff fff4 	bl	10004594 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
100045ac:	2202      	movs	r2, #2
100045ae:	7b63      	ldrb	r3, [r4, #13]
100045b0:	4393      	bics	r3, r2
100045b2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
100045b4:	2300      	movs	r3, #0
100045b6:	60a3      	str	r3, [r4, #8]
}
100045b8:	bd10      	pop	{r4, pc}

100045ba <add_to_waitq_locked>:
{
100045ba:	b570      	push	{r4, r5, r6, lr}
100045bc:	0004      	movs	r4, r0
100045be:	000d      	movs	r5, r1
	unready_thread(thread);
100045c0:	f7fe fd28 	bl	10003014 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
100045c4:	2302      	movs	r3, #2
100045c6:	7b62      	ldrb	r2, [r4, #13]
100045c8:	4313      	orrs	r3, r2
100045ca:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
100045cc:	2d00      	cmp	r5, #0
100045ce:	d01c      	beq.n	1000460a <add_to_waitq_locked+0x50>
		thread->base.pended_on = wait_q;
100045d0:	60a5      	str	r5, [r4, #8]
	return list->head == list;
100045d2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100045d4:	429d      	cmp	r5, r3
100045d6:	d109      	bne.n	100045ec <add_to_waitq_locked+0x32>
	sys_dnode_t *const tail = list->tail;
100045d8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
100045da:	6025      	str	r5, [r4, #0]
	node->prev = tail;
100045dc:	6063      	str	r3, [r4, #4]
	tail->next = node;
100045de:	601c      	str	r4, [r3, #0]
	list->tail = node;
100045e0:	606c      	str	r4, [r5, #4]
}
100045e2:	e012      	b.n	1000460a <add_to_waitq_locked+0x50>
	return (node == list->tail) ? NULL : node->next;
100045e4:	686a      	ldr	r2, [r5, #4]
100045e6:	4293      	cmp	r3, r2
100045e8:	d0f6      	beq.n	100045d8 <add_to_waitq_locked+0x1e>
100045ea:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
100045ec:	2b00      	cmp	r3, #0
100045ee:	d0f3      	beq.n	100045d8 <add_to_waitq_locked+0x1e>
	int32_t b1 = thread_1->base.prio;
100045f0:	220e      	movs	r2, #14
	int32_t b2 = thread_2->base.prio;
100045f2:	210e      	movs	r1, #14
	int32_t b1 = thread_1->base.prio;
100045f4:	56a2      	ldrsb	r2, [r4, r2]
	int32_t b2 = thread_2->base.prio;
100045f6:	5659      	ldrsb	r1, [r3, r1]
	if (b1 != b2) {
100045f8:	428a      	cmp	r2, r1
100045fa:	d0f3      	beq.n	100045e4 <add_to_waitq_locked+0x2a>
		if (z_sched_prio_cmp(thread, t) > 0) {
100045fc:	4291      	cmp	r1, r2
100045fe:	ddf1      	ble.n	100045e4 <add_to_waitq_locked+0x2a>
	sys_dnode_t *const prev = successor->prev;
10004600:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
10004602:	6023      	str	r3, [r4, #0]
	node->prev = prev;
10004604:	6062      	str	r2, [r4, #4]
	prev->next = node;
10004606:	6014      	str	r4, [r2, #0]
	successor->prev = node;
10004608:	605c      	str	r4, [r3, #4]
}
1000460a:	bd70      	pop	{r4, r5, r6, pc}

1000460c <z_ready_thread>:
{
1000460c:	b510      	push	{r4, lr}
1000460e:	f3ef 8410 	mrs	r4, PRIMASK
10004612:	b672      	cpsid	i
			ready_thread(thread);
10004614:	f7fe fcc8 	bl	10002fa8 <ready_thread>
	if (key != 0U) {
10004618:	2c00      	cmp	r4, #0
1000461a:	d102      	bne.n	10004622 <z_ready_thread+0x16>
	__asm__ volatile(
1000461c:	b662      	cpsie	i
1000461e:	f3bf 8f6f 	isb	sy
}
10004622:	bd10      	pop	{r4, pc}

10004624 <z_unpend_thread_no_timeout>:
{
10004624:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004626:	f3ef 8410 	mrs	r4, PRIMASK
1000462a:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
1000462c:	6883      	ldr	r3, [r0, #8]
1000462e:	2b00      	cmp	r3, #0
10004630:	d001      	beq.n	10004636 <z_unpend_thread_no_timeout+0x12>
			unpend_thread_no_timeout(thread);
10004632:	f7ff ffb7 	bl	100045a4 <unpend_thread_no_timeout>
	if (key != 0U) {
10004636:	2c00      	cmp	r4, #0
10004638:	d102      	bne.n	10004640 <z_unpend_thread_no_timeout+0x1c>
	__asm__ volatile(
1000463a:	b662      	cpsie	i
1000463c:	f3bf 8f6f 	isb	sy
}
10004640:	bd10      	pop	{r4, pc}

10004642 <z_sched_wake_thread>:
{
10004642:	b570      	push	{r4, r5, r6, lr}
10004644:	0004      	movs	r4, r0
10004646:	000e      	movs	r6, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10004648:	f3ef 8510 	mrs	r5, PRIMASK
1000464c:	b672      	cpsid	i
		if (!killed) {
1000464e:	2328      	movs	r3, #40	; 0x28
10004650:	7b42      	ldrb	r2, [r0, #13]
10004652:	421a      	tst	r2, r3
10004654:	d10e      	bne.n	10004674 <z_sched_wake_thread+0x32>
			if (thread->base.pended_on != NULL) {
10004656:	6883      	ldr	r3, [r0, #8]
10004658:	2b00      	cmp	r3, #0
1000465a:	d001      	beq.n	10004660 <z_sched_wake_thread+0x1e>
				unpend_thread_no_timeout(thread);
1000465c:	f7ff ffa2 	bl	100045a4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
10004660:	2204      	movs	r2, #4
10004662:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
10004664:	2e00      	cmp	r6, #0
10004666:	d000      	beq.n	1000466a <z_sched_wake_thread+0x28>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
10004668:	2214      	movs	r2, #20
1000466a:	4393      	bics	r3, r2
			ready_thread(thread);
1000466c:	0020      	movs	r0, r4
	thread->base.thread_state &= ~_THREAD_PRESTART;
1000466e:	7363      	strb	r3, [r4, #13]
10004670:	f7fe fc9a 	bl	10002fa8 <ready_thread>
	if (key != 0U) {
10004674:	2d00      	cmp	r5, #0
10004676:	d102      	bne.n	1000467e <z_sched_wake_thread+0x3c>
	__asm__ volatile(
10004678:	b662      	cpsie	i
1000467a:	f3bf 8f6f 	isb	sy
}
1000467e:	bd70      	pop	{r4, r5, r6, pc}

10004680 <z_thread_timeout>:
{
10004680:	b510      	push	{r4, lr}
	z_sched_wake_thread(thread, true);
10004682:	2101      	movs	r1, #1
	struct k_thread *thread = CONTAINER_OF(timeout,
10004684:	3818      	subs	r0, #24
	z_sched_wake_thread(thread, true);
10004686:	f7ff ffdc 	bl	10004642 <z_sched_wake_thread>
}
1000468a:	bd10      	pop	{r4, pc}

1000468c <z_unpend1_no_timeout>:
{
1000468c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000468e:	f3ef 8510 	mrs	r5, PRIMASK
10004692:	b672      	cpsid	i
	return list->head == list;
10004694:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004696:	42a0      	cmp	r0, r4
10004698:	d00b      	beq.n	100046b2 <z_unpend1_no_timeout+0x26>
		if (thread != NULL) {
1000469a:	2c00      	cmp	r4, #0
1000469c:	d002      	beq.n	100046a4 <z_unpend1_no_timeout+0x18>
			unpend_thread_no_timeout(thread);
1000469e:	0020      	movs	r0, r4
100046a0:	f7ff ff80 	bl	100045a4 <unpend_thread_no_timeout>
	if (key != 0U) {
100046a4:	2d00      	cmp	r5, #0
100046a6:	d102      	bne.n	100046ae <z_unpend1_no_timeout+0x22>
	__asm__ volatile(
100046a8:	b662      	cpsie	i
100046aa:	f3bf 8f6f 	isb	sy
}
100046ae:	0020      	movs	r0, r4
100046b0:	bd70      	pop	{r4, r5, r6, pc}
100046b2:	2400      	movs	r4, #0
100046b4:	e7f6      	b.n	100046a4 <z_unpend1_no_timeout+0x18>

100046b6 <z_unpend_first_thread>:
{
100046b6:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
100046b8:	f3ef 8510 	mrs	r5, PRIMASK
100046bc:	b672      	cpsid	i
	return list->head == list;
100046be:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
100046c0:	42a0      	cmp	r0, r4
100046c2:	d00f      	beq.n	100046e4 <z_unpend_first_thread+0x2e>
		if (thread != NULL) {
100046c4:	2c00      	cmp	r4, #0
100046c6:	d006      	beq.n	100046d6 <z_unpend_first_thread+0x20>
			unpend_thread_no_timeout(thread);
100046c8:	0020      	movs	r0, r4
100046ca:	f7ff ff6b 	bl	100045a4 <unpend_thread_no_timeout>
100046ce:	0020      	movs	r0, r4
100046d0:	3018      	adds	r0, #24
100046d2:	f000 f850 	bl	10004776 <z_abort_timeout>
	if (key != 0U) {
100046d6:	2d00      	cmp	r5, #0
100046d8:	d102      	bne.n	100046e0 <z_unpend_first_thread+0x2a>
	__asm__ volatile(
100046da:	b662      	cpsie	i
100046dc:	f3bf 8f6f 	isb	sy
}
100046e0:	0020      	movs	r0, r4
100046e2:	bd70      	pop	{r4, r5, r6, pc}
100046e4:	2400      	movs	r4, #0
100046e6:	e7f6      	b.n	100046d6 <z_unpend_first_thread+0x20>

100046e8 <z_unpend_thread>:
{
100046e8:	b570      	push	{r4, r5, r6, lr}
100046ea:	0004      	movs	r4, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100046ec:	f3ef 8510 	mrs	r5, PRIMASK
100046f0:	b672      	cpsid	i
		if (thread->base.pended_on != NULL) {
100046f2:	6883      	ldr	r3, [r0, #8]
100046f4:	2b00      	cmp	r3, #0
100046f6:	d001      	beq.n	100046fc <z_unpend_thread+0x14>
			unpend_thread_no_timeout(thread);
100046f8:	f7ff ff54 	bl	100045a4 <unpend_thread_no_timeout>
	if (key != 0U) {
100046fc:	2d00      	cmp	r5, #0
100046fe:	d102      	bne.n	10004706 <z_unpend_thread+0x1e>
	__asm__ volatile(
10004700:	b662      	cpsie	i
10004702:	f3bf 8f6f 	isb	sy
10004706:	0020      	movs	r0, r4
10004708:	3018      	adds	r0, #24
1000470a:	f000 f834 	bl	10004776 <z_abort_timeout>
}
1000470e:	bd70      	pop	{r4, r5, r6, pc}

10004710 <z_reschedule_irqlock>:
{
10004710:	b510      	push	{r4, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
10004712:	2800      	cmp	r0, #0
10004714:	d105      	bne.n	10004722 <z_reschedule_irqlock+0x12>
10004716:	f3ef 8005 	mrs	r0, IPSR
1000471a:	2800      	cmp	r0, #0
1000471c:	d102      	bne.n	10004724 <z_reschedule_irqlock+0x14>
	ret = arch_swap(key);
1000471e:	f7fd f97f 	bl	10001a20 <arch_swap>
}
10004722:	bd10      	pop	{r4, pc}
10004724:	b662      	cpsie	i
10004726:	f3bf 8f6f 	isb	sy
1000472a:	e7fa      	b.n	10004722 <z_reschedule_irqlock+0x12>

1000472c <z_reschedule_unlocked>:
{
1000472c:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
1000472e:	f3ef 8010 	mrs	r0, PRIMASK
10004732:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
10004734:	f7ff ffec 	bl	10004710 <z_reschedule_irqlock>
}
10004738:	bd10      	pop	{r4, pc}

1000473a <z_sched_wake>:
{
1000473a:	0003      	movs	r3, r0
1000473c:	b570      	push	{r4, r5, r6, lr}
1000473e:	f3ef 8510 	mrs	r5, PRIMASK
10004742:	b672      	cpsid	i
	return list->head == list;
10004744:	6804      	ldr	r4, [r0, #0]
	bool ret = false;
10004746:	2000      	movs	r0, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
10004748:	42a3      	cmp	r3, r4
1000474a:	d00e      	beq.n	1000476a <z_sched_wake+0x30>
		if (thread != NULL) {
1000474c:	4284      	cmp	r4, r0
1000474e:	d00c      	beq.n	1000476a <z_sched_wake+0x30>
10004750:	6721      	str	r1, [r4, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
10004752:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
10004754:	0020      	movs	r0, r4
10004756:	f7ff ff25 	bl	100045a4 <unpend_thread_no_timeout>
1000475a:	0020      	movs	r0, r4
1000475c:	3018      	adds	r0, #24
1000475e:	f000 f80a 	bl	10004776 <z_abort_timeout>
			ready_thread(thread);
10004762:	0020      	movs	r0, r4
10004764:	f7fe fc20 	bl	10002fa8 <ready_thread>
			ret = true;
10004768:	2001      	movs	r0, #1
	if (key != 0U) {
1000476a:	2d00      	cmp	r5, #0
1000476c:	d102      	bne.n	10004774 <z_sched_wake+0x3a>
	__asm__ volatile(
1000476e:	b662      	cpsie	i
10004770:	f3bf 8f6f 	isb	sy
}
10004774:	bd70      	pop	{r4, r5, r6, pc}

10004776 <z_abort_timeout>:
{
10004776:	b510      	push	{r4, lr}
	__asm__ volatile("mrs %0, PRIMASK;"
10004778:	f3ef 8410 	mrs	r4, PRIMASK
1000477c:	b672      	cpsid	i
		if (sys_dnode_is_linked(&to->node)) {
1000477e:	6803      	ldr	r3, [r0, #0]
10004780:	2b00      	cmp	r3, #0
10004782:	d008      	beq.n	10004796 <z_abort_timeout+0x20>
			remove_timeout(to);
10004784:	f7fe febc 	bl	10003500 <remove_timeout>
			ret = 0;
10004788:	2000      	movs	r0, #0
	if (key != 0U) {
1000478a:	2c00      	cmp	r4, #0
1000478c:	d102      	bne.n	10004794 <z_abort_timeout+0x1e>
	__asm__ volatile(
1000478e:	b662      	cpsie	i
10004790:	f3bf 8f6f 	isb	sy
}
10004794:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
10004796:	2016      	movs	r0, #22
10004798:	4240      	negs	r0, r0
1000479a:	e7f6      	b.n	1000478a <z_abort_timeout+0x14>

1000479c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
1000479c:	b510      	push	{r4, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
1000479e:	f7fe ffa7 	bl	100036f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
100047a2:	bd10      	pop	{r4, pc}

100047a4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
100047a4:	b510      	push	{r4, lr}
	return sys_clock_tick_get();
100047a6:	f7fe ffa3 	bl	100036f0 <sys_clock_tick_get>
}
100047aa:	bd10      	pop	{r4, pc}

100047ac <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
100047ac:	b510      	push	{r4, lr}
100047ae:	0004      	movs	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
100047b0:	f7ff ffe1 	bl	10004776 <z_abort_timeout>

	if (inactive) {
100047b4:	2800      	cmp	r0, #0
100047b6:	d111      	bne.n	100047dc <z_impl_k_timer_stop+0x30>
		return;
	}

	if (timer->stop_fn != NULL) {
100047b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
100047ba:	2b00      	cmp	r3, #0
100047bc:	d001      	beq.n	100047c2 <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
100047be:	0020      	movs	r0, r4
100047c0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
100047c2:	0020      	movs	r0, r4
100047c4:	3018      	adds	r0, #24
100047c6:	f7ff ff61 	bl	1000468c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
100047ca:	2800      	cmp	r0, #0
100047cc:	d006      	beq.n	100047dc <z_impl_k_timer_stop+0x30>
			z_ready_thread(pending_thread);
100047ce:	f7ff ff1d 	bl	1000460c <z_ready_thread>
	__asm__ volatile("mrs %0, PRIMASK;"
100047d2:	f3ef 8010 	mrs	r0, PRIMASK
100047d6:	b672      	cpsid	i
	(void) z_reschedule_irqlock(arch_irq_lock());
100047d8:	f7ff ff9a 	bl	10004710 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
100047dc:	bd10      	pop	{r4, pc}

100047de <z_impl_atomic_add>:
 * @param value the value to add
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_add(atomic_t *target, atomic_val_t value)
{
100047de:	0003      	movs	r3, r0
100047e0:	f3ef 8210 	mrs	r2, PRIMASK
100047e4:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
100047e6:	6800      	ldr	r0, [r0, #0]
	*target += value;
100047e8:	1841      	adds	r1, r0, r1
100047ea:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
100047ec:	2a00      	cmp	r2, #0
100047ee:	d102      	bne.n	100047f6 <z_impl_atomic_add+0x18>
	__asm__ volatile(
100047f0:	b662      	cpsie	i
100047f2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
100047f6:	4770      	bx	lr

100047f8 <z_impl_atomic_sub>:
 * @param value the value to subtract
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_sub(atomic_t *target, atomic_val_t value)
{
100047f8:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
100047fa:	f3ef 8210 	mrs	r2, PRIMASK
100047fe:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
10004800:	6800      	ldr	r0, [r0, #0]
	*target -= value;
10004802:	1a41      	subs	r1, r0, r1
10004804:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
10004806:	2a00      	cmp	r2, #0
10004808:	d102      	bne.n	10004810 <z_impl_atomic_sub+0x18>
	__asm__ volatile(
1000480a:	b662      	cpsie	i
1000480c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10004810:	4770      	bx	lr

10004812 <z_impl_atomic_set>:
 * @param value the value to write
 *
 * @return The previous value from <target>
 */
atomic_val_t z_impl_atomic_set(atomic_t *target, atomic_val_t value)
{
10004812:	0003      	movs	r3, r0
	__asm__ volatile("mrs %0, PRIMASK;"
10004814:	f3ef 8210 	mrs	r2, PRIMASK
10004818:	b672      	cpsid	i
	k_spinlock_key_t key;
	atomic_val_t ret;

	key = k_spin_lock(&lock);

	ret = *target;
1000481a:	6800      	ldr	r0, [r0, #0]
	*target = value;
1000481c:	6019      	str	r1, [r3, #0]
	if (key != 0U) {
1000481e:	2a00      	cmp	r2, #0
10004820:	d102      	bne.n	10004828 <z_impl_atomic_set+0x16>
	__asm__ volatile(
10004822:	b662      	cpsie	i
10004824:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);

	return ret;
}
10004828:	4770      	bx	lr

1000482a <z_handle_obj_poll_events>:
{
1000482a:	b510      	push	{r4, lr}
1000482c:	0003      	movs	r3, r0
	return list->head == list;
1000482e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
10004830:	4283      	cmp	r3, r0
10004832:	d008      	beq.n	10004846 <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const next = node->next;
10004834:	6803      	ldr	r3, [r0, #0]
	sys_dnode_t *const prev = node->prev;
10004836:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
10004838:	6013      	str	r3, [r2, #0]
	next->prev = prev;
1000483a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
1000483c:	2300      	movs	r3, #0
1000483e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
10004840:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
10004842:	f7ff f80d 	bl	10003860 <signal_poll_event>
}
10004846:	bd10      	pop	{r4, pc}

10004848 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
10004848:	2201      	movs	r2, #1
{
1000484a:	b530      	push	{r4, r5, lr}
	*flagp &= ~BIT(bit);
1000484c:	0014      	movs	r4, r2
	return (*flagp & BIT(bit)) != 0U;
1000484e:	6803      	ldr	r3, [r0, #0]
	*flagp &= ~BIT(bit);
10004850:	408c      	lsls	r4, r1
10004852:	001d      	movs	r5, r3
	return (*flagp & BIT(bit)) != 0U;
10004854:	40cb      	lsrs	r3, r1
	*flagp &= ~BIT(bit);
10004856:	43a5      	bics	r5, r4
10004858:	6005      	str	r5, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
1000485a:	0018      	movs	r0, r3
	return ret;
1000485c:	4010      	ands	r0, r2
}
1000485e:	bd30      	pop	{r4, r5, pc}

10004860 <notify_queue_locked.isra.0>:
static inline bool notify_queue_locked(struct k_work_q *queue)
10004860:	b510      	push	{r4, lr}
	if (queue != NULL) {
10004862:	2800      	cmp	r0, #0
10004864:	d004      	beq.n	10004870 <notify_queue_locked.isra.0+0x10>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
10004866:	2200      	movs	r2, #0
10004868:	3080      	adds	r0, #128	; 0x80
1000486a:	0011      	movs	r1, r2
1000486c:	f7ff ff65 	bl	1000473a <z_sched_wake>
}
10004870:	bd10      	pop	{r4, pc}

10004872 <z_work_submit_to_queue>:
{
10004872:	b513      	push	{r0, r1, r4, lr}
10004874:	9001      	str	r0, [sp, #4]
10004876:	0008      	movs	r0, r1
	__asm__ volatile("mrs %0, PRIMASK;"
10004878:	f3ef 8410 	mrs	r4, PRIMASK
1000487c:	b672      	cpsid	i
	int ret = submit_to_queue_locked(work, &queue);
1000487e:	a901      	add	r1, sp, #4
10004880:	f7ff f92a 	bl	10003ad8 <submit_to_queue_locked>
	if (key != 0U) {
10004884:	2c00      	cmp	r4, #0
10004886:	d102      	bne.n	1000488e <z_work_submit_to_queue+0x1c>
	__asm__ volatile(
10004888:	b662      	cpsie	i
1000488a:	f3bf 8f6f 	isb	sy
}
1000488e:	bd16      	pop	{r1, r2, r4, pc}
